/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Asistencial;

import Clases.clsConnection;
import Clases.clsFunciones;
import Clases.clsOperacionesUsuarios;
import autocomplete.ajTextFieldConsulta;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author DEYMER
 */
public class ExamenInmunologico extends javax.swing.JFrame {

    /**
     * Creates new form Hemograma
     */
    clsConnection oConn = new clsConnection();
    clsFunciones  oFunc = new clsFunciones();
    clsOperacionesUsuarios oPe = new clsOperacionesUsuarios();
    DefaultTableModel ticket;
    public ExamenInmunologico() {
        initComponents();
        sbTicket();
        cboExamen.setSelectedIndex(-1);
        AutoCompleteDecorator.decorate(this.cboExamen);
        new ajTextFieldConsulta.autocompleterText(txtResponsable, "select nombre_user||' '||apellido_user as nombre FROM usuarios WHERE CONCAT(nombre_user,' ',apellido_user)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        pmTicket = new javax.swing.JPopupMenu();
        btnEliminar = new javax.swing.JMenuItem();
        btgResultado = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtResultado = new javax.swing.JTextField();
        cboExamen = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        lblValorR = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtNTicket = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        btnEditarIn = new javax.swing.JButton();
        FechaExamen = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtResponsable = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnGrabar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        jPanel16 = new javax.swing.JPanel();
        txtImprimir = new javax.swing.JTextField();
        btnImprimir = new javax.swing.JButton();
        btnGrabar1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbTicket = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/xx.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pmTicket.add(btnEliminar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HEMOGRAMA");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Inmunologia"));

        jLabel10.setText("Resultado:");

        txtResultado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResultadoActionPerformed(evt);
            }
        });
        txtResultado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtResultadoKeyTyped(evt);
            }
        });

        cboExamen.setEditable(true);
        cboExamen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PROTEINA C REACTIVA CUALITATIVO (PCR)", "PROTEINA C REACTIVO CUANTITATIVO", "VELOCIDAD DE SEDIMENTACION GLOBULAR (VSG)", "RPR", "PREGNOSTICON EN SANGRE B-HCG CUALITATIVA", "HELICOBACTER PYLORI", "FACTOR REUMATOIDEO", "HIV TIPO I Y II", "PRUEBA RAPIDA HEPATITIS A IGG/IGM" }));
        cboExamen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cboExamenMousePressed(evt);
            }
        });
        cboExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboExamenActionPerformed(evt);
            }
        });

        jLabel2.setText("Examen:");

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/entrar.png"))); // NOI18N
        btnAgregar.setMnemonic('a');
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        lblValorR.setText("-");

        btgResultado.add(jCheckBox1);
        jCheckBox1.setText("POSITIVO");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        btgResultado.add(jCheckBox2);
        jCheckBox2.setText("NEGATIVO");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        btgResultado.add(jCheckBox3);
        jCheckBox3.setText("REACTIVO");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        btgResultado.add(jCheckBox4);
        jCheckBox4.setText("NO REACTIVO");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValorR, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cboExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregar))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox4)))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel10)
                            .addComponent(txtResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValorR)))
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox3)
                        .addComponent(jCheckBox4))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox1)
                        .addComponent(jCheckBox2)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("N° Ticket :");

        txtNTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNTicketActionPerformed(evt);
            }
        });
        txtNTicket.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNTicketKeyTyped(evt);
            }
        });

        jLabel48.setText("Dni:");

        txtDni.setEditable(false);

        jLabel1.setText("Nombres :");

        txtNombres.setEditable(false);

        btnEditarIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/configuracion.png"))); // NOI18N
        btnEditarIn.setText("Editar");
        btnEditarIn.setEnabled(false);
        btnEditarIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarInActionPerformed(evt);
            }
        });

        jLabel3.setText("Fecha :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombres, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditarIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FechaExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtNTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel48)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditarIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(FechaExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel4.setText("Responsable Lab :");

        txtResponsable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResponsableActionPerformed(evt);
            }
        });
        txtResponsable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtResponsableKeyReleased(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/agegar.png"))); // NOI18N

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        btnGrabar.setText("Grabar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        txtObservaciones.setColumns(20);
        txtObservaciones.setLineWrap(true);
        txtObservaciones.setRows(5);
        txtObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Observaciones"));
        jScrollPane1.setViewportView(txtObservaciones);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IMPRIMIR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        txtImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImprimirActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtImprimir)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(txtImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir))
        );

        btnGrabar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        btnGrabar1.setText("Actualizar");
        btnGrabar1.setEnabled(false);
        btnGrabar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabar1ActionPerformed(evt);
            }
        });

        tbTicket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbTicket.setComponentPopupMenu(pmTicket);
        jScrollPane2.setViewportView(tbTicket);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(btnGrabar1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGrabar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(txtResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGrabar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGrabar1)
                        .addGap(71, 71, 71))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNTicketActionPerformed
        if(!txtNTicket.getText().isEmpty()){
          if(!OrdenExiste()){
              String Sql = "select t.cod_pa,d.nombres_pa || d.apellidos_pa as nombres \n"
                        + "from datos_paciente_asistencial d\n"
                        + "inner join ticket t on(d.cod_pa=t.cod_pa)\n"
                        + "where t.n_ticket='" + txtNTicket.getText() + "'";
                oConn.FnBoolQueryExecute(Sql);
                try {
                    if(oConn.setResult.next()) {
                        txtNombres.setText(oConn.setResult.getString("nombres"));
                        txtDni.setText(oConn.setResult.getString("cod_pa"));
                        oPe.fecha(FechaExamen);
                        txtResponsable.requestFocus();
                    }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Registro: \n 1- Intente de nuevo \n 2- Si el error sigue Registre Usuario o \n    Aperture EX-Preocupacional de nuevo");
                    }
                    oConn.setResult.close();
                } catch (SQLException ex) {
                    oFunc.SubSistemaMensajeInformacion("Laboratorio Clinico:" + ex.getMessage().toString());
                }
          }else{
               oFunc.SubSistemaMensajeInformacion("Ticket Registrado");
          }

            
        }
    }//GEN-LAST:event_txtNTicketActionPerformed

    private void txtNTicketKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNTicketKeyTyped
        oFunc.NoLetras(evt);
    }//GEN-LAST:event_txtNTicketKeyTyped

    private void txtResponsableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResponsableActionPerformed
        cboExamen.requestFocusInWindow();
    }//GEN-LAST:event_txtResponsableActionPerformed

    private void txtResultadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResultadoKeyTyped

    }//GEN-LAST:event_txtResultadoKeyTyped

    private void txtResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResultadoActionPerformed
        if(!txtNTicket.getText().isEmpty()){
            String sql="SELECT dp.sexo_pa FROM datos_paciente_asistencial as dp \n"
                    + "inner join ticket AS t ON(dp.cod_pa = t.cod_pa) \n"
                    + "where t.n_ticket =" + txtNTicket.getText() + "";
            oConn.FnBoolQueryExecute(sql);
            String sexo;
            try {
                if (oConn.setResult.next()) {
                    sexo = oConn.setResult.getString("sexo_pa");
                    if (!txtResultado.getText().isEmpty()) {
                        float hemoglobina = Float.parseFloat(txtResultado.getText());
                        if ("M".equals(sexo)) {
                            if (hemoglobina < 14 || hemoglobina > 20) {
                                txtResultado.setForeground(Color.red);
                            } else {
                                txtResultado.setForeground(Color.BLACK);
                            }
                        }
                        if ("F".equals(sexo)) {
                            if (hemoglobina < 13.5 || hemoglobina > 20) {
                                txtResultado.setForeground(Color.red);
                            } else {
                                txtResultado.setForeground(Color.BLACK);
                            }
                        }
                    }
                }
                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError("ERROR EN CONSULTA");
            }
        }
    }//GEN-LAST:event_txtResultadoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
//        Limpiar();
        txtNTicket.requestFocus();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        if (!OrdenExiste()) {
            agregarDatos();
            Limpiar();
        } 
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void txtImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImprimirActionPerformed
        // TODO add your handling code here:
//        print (Integer.parseInt(txtImprimir.getText()));
    }//GEN-LAST:event_txtImprimirActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        print (Integer.parseInt(txtImprimir.getText()));
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEditarInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarInActionPerformed
//        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        if(!txtNTicket .getText().isEmpty()){
            String Sql = "select t.cod_pa,d.nombres_pa || d.apellidos_pa as nombres, i.i_fecha, i.i_responsable, i.i_resultado, i.i_observaciones\n"
                    + "from datos_paciente_asistencial d\n"
                    + "inner join ticket t on(d.cod_pa=t.cod_pa)\n"
                    + "inner join inmunologico_asistencial i on (t.n_ticket=i.i_ticket)\n"
                    + "where i.i_ticket='" + txtNTicket.getText() + "' and i.i_examen='" + cboExamen.getSelectedItem()+"'";
            oConn.FnBoolQueryExecute(Sql);
            try {
                if (oConn.setResult.next()) {
                    txtNombres.setText(oConn.setResult.getString("nombres"));
                    txtDni.setText(oConn.setResult.getString("cod_pa"));
                    FechaExamen.setDate(oConn.setResult.getDate("i_fecha"));
                    txtResponsable.setText(oConn.setResult.getString("i_responsable"));
                    txtResultado.setText(oConn.setResult.getString("i_resultado"));
//                    txtHematocrito.setText(oConn.setResult.getString("h_hematocrito"));
//                    txtPlaquetas.setText(oConn.setResult.getString("h_plaquetas"));
//                    txtLeucocitosEmatologia.setText(oConn.setResult.getString("h_leucocitos"));
//                    txtNeutrofilos.setText(oConn.setResult.getString("h_neutrofilos"));
//                    txtAbastonados.setText(oConn.setResult.getString("h_abastonados"));
//                    txtsegmentadosEmatologia.setText(oConn.setResult.getString("h_segmentdos"));
//                    txtmonocitosEmatologia.setText(oConn.setResult.getString("h_monocitos"));
//                    txtEosinofiosEmatologia.setText(oConn.setResult.getString("h_eosinofilos"));
//                    txtbasofilosEmatologia.setText(oConn.setResult.getString("h_basofilos"));
//                    txtLinfocitosEmatologia.setText(oConn.setResult.getString("h_linfocitos"));
                    txtObservaciones.setText(oConn.setResult.getString("i_observaciones"));
                    
                }else{
                    oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios");
                }
                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeInformacion("Ficha inmunologica:" + ex.getMessage());}
        }
    }//GEN-LAST:event_btnEditarInActionPerformed

    private void txtResponsableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResponsableKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtResponsableKeyReleased

    private void btnGrabar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabar1ActionPerformed
        // TODO add your handling code here:
//         actualizar();
//         Limpiar();
    }//GEN-LAST:event_btnGrabar1ActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        sbServicioAgrega();
        cboExamen.setSelectedIndex(-1);
        txtResultado.setText(null);
        lblValorR.setText(".");
        btgResultado.clearSelection();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void cboExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboExamenActionPerformed
        // TODO add your handling code here:
        cboExamen.getEditor().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (cboExamen.getSelectedIndex()) {
                    case 0:
                        lblValorR.setText(null);
                        break;
                    case 1:
                        lblValorR.setText(" <6.0 mg/l");
                        break;
                    case 2:
                        lblValorR.setText(" Hombre 0 - 10 \n Mujer 0 - 20");
                        break;
                    default:
                        lblValorR.setText(".");
                        break;
                }
                txtResultado.setText(null);
                txtResultado.requestFocus();
                btgResultado.clearSelection();
            }
        });
    }//GEN-LAST:event_cboExamenActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected()){
            txtResultado.setText("POSITIVO");
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox2.isSelected()){
            txtResultado.setText("NEGATIVO");
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int iRow;
        if(tbTicket.getSelectedRow()>= 0){
            if(tbTicket.getRowCount()>1){
                iRow = tbTicket.getSelectedRow();
                DefaultTableModel tblDatos = (DefaultTableModel) tbTicket.getModel();
                tblDatos.removeRow(iRow);
                tbTicket.setModel(tblDatos);

            }else{
                iRow = tbTicket.getSelectedRow();
                DefaultTableModel tblDatos = (DefaultTableModel) tbTicket.getModel();
                tblDatos.removeRow(iRow);
                tbTicket.setModel(tblDatos);

            }
        }else{
            oFunc.SubSistemaMensajeError("Seleccione un Item");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox3.isSelected()){
            txtResultado.setText("REACTIVO");
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox4.isSelected()){
            txtResultado.setText("NO REACTIVO");
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void cboExamenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboExamenMousePressed
        // TODO add your handling code here:
        cboExamen.getEditor().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                switch (cboExamen.getSelectedIndex()) {
                    case 0:
                        lblValorR.setText(null);
                        break;
                    case 1:
                        lblValorR.setText(" <6.0 mg/l");
                        break;
                    case 2:
                        lblValorR.setText(" Hombre 0 - 10 \n Mujer 0 - 20");
                        break;
                    default:
                        lblValorR.setText(null);
                        break;
                }
                txtResultado.setText(null);
                txtResultado.requestFocus();
            }
        });
    }//GEN-LAST:event_cboExamenMousePressed

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamenInmunologico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamenInmunologico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamenInmunologico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamenInmunologico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExamenInmunologico().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaExamen;
    private javax.swing.ButtonGroup btgResultado;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEditarIn;
    private javax.swing.JMenuItem btnEliminar;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnGrabar1;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboExamen;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblValorR;
    private javax.swing.JPopupMenu pmTicket;
    private javax.swing.JTable tbTicket;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtImprimir;
    private javax.swing.JTextField txtNTicket;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextArea txtObservaciones;
    private javax.swing.JTextField txtResponsable;
    private javax.swing.JTextField txtResultado;
    // End of variables declaration//GEN-END:variables
    
    private boolean validar() {
        boolean bResultado = true;
            if (((JTextField) FechaExamen.getDateEditor().getUiComponent()).getText().trim().length() < 2) {
                oFunc.SubSistemaMensajeError("Ingrese Fecha de Examen");
                bResultado = false;
            }
        return bResultado;
    }
    public void Agregar(){
        String strSqlStmt;
        String Query;
         strSqlStmt = "INSERT INTO inmunologico_asistencial(";
         Query = "Values(";
         strSqlStmt += "i_ticket";Query += "'" + txtNTicket.getText() + "'";
         if (((JTextField) FechaExamen.getDateEditor().getUiComponent()).getText().trim().length() > 1) {
             strSqlStmt += ",i_fecha";Query += ",'" + FechaExamen.getDate() + "'";
         }
         if (txtResponsable.getText().trim().length() >= 1) {
             strSqlStmt += ", i_responsable";Query += ",'" + txtResponsable.getText() + "'";
         }
         strSqlStmt += ", i_examen";Query += ",'" + cboExamen.getSelectedItem()+ "'";
         strSqlStmt += ", i_resultado";Query += ",'" + txtResultado.getText() + "'";
//         strSqlStmt += ", h_plaquetas";Query += ",'" + txtPlaquetas.getText() + "'";
//         strSqlStmt += ", h_leucocitos";Query += ",'" + txtLeucocitosEmatologia.getText() + "'";
//         strSqlStmt += ", h_neutrofilos";Query += ",'" + txtNeutrofilos.getText() + "'";
//         strSqlStmt += ", h_abastonados";Query += ",'" + txtAbastonados.getText() + "'";
//         strSqlStmt += ", h_segmentdos";Query += ",'" + txtsegmentadosEmatologia.getText() + "'";
//         strSqlStmt += ", h_monocitos";Query += ",'" + txtmonocitosEmatologia.getText() + "'";
//         strSqlStmt += ", h_eosinofilos";Query += ",'" + txtEosinofiosEmatologia.getText() + "'";
//         strSqlStmt += ", h_basofilos";Query += ",'" + txtbasofilosEmatologia.getText() + "'";
//         strSqlStmt += ", h_linfocitos";Query += ",'" + txtLinfocitosEmatologia.getText() + "'";
         strSqlStmt += ", i_observaciones";Query += ",'" + txtObservaciones.getText() + "'";
         
         try {
             if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt.concat(") ") + Query.concat(")"))) {
                 oFunc.SubSistemaMensajeInformacion("Se ha registrado la Entrada con Éxito");
                 imprimir();
                 Limpiar();
                 oConn.sqlStmt.close();
             } else {
                 oFunc.SubSistemaMensajeError("No se pudo registrar La Entrada");
             }
         } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion(ex.toString());
            Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
         }
     
    }
    public void actualizar() {
        String sql = "UPDATE inmunologico_asistencial SET  i_fecha='" + FechaExamen.getDate().toString()
                + "', i_responsable='" + txtResponsable.getText()
                + "', i_resultado='" + txtResultado.getText()
//                + "', h_plaquetas='" + txtPlaquetas.getText()
//                + "', h_leucocitos='" + txtLeucocitosEmatologia.getText()
//                + "', h_neutrofilos='" + txtNeutrofilos.getText()
//                + "', h_abastonados='" + txtAbastonados.getText()
//                + "', h_segmentdos='" + txtsegmentadosEmatologia.getText()
//                + "', h_monocitos='" + txtmonocitosEmatologia.getText()
//                + "', h_eosinofilos='" + txtEosinofiosEmatologia.getText()
//                + "', h_basofilos='" + txtbasofilosEmatologia.getText()
//                + "', h_linfocitos='" + txtLinfocitosEmatologia.getText()
                + "', i_observaciones='" + txtObservaciones.getText()
             + "' where i_ticket=" + txtNTicket.getText() + " and i_examen='" + cboExamen.getSelectedItem()+"'";
        //  System.out.println("SQL:"+sql);
        if (oConn.FnBoolQueryExecuteUpdate(sql)) {
            oFunc.SubSistemaMensajeInformacion("Se ha actualizado la Entrada con Éxito");
            imprimir();
            try {
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            oFunc.SubSistemaMensajeError("No se pudo Agregar La Entrada");
        }

    }
    private void Limpiar() {
        FechaExamen.setDate(null);
        txtNTicket.setText(null);
        txtNombres.setText(null);
        txtDni.setText(null);
        txtResponsable.setText(null);
        txtResultado.setText(null);
//        txtLeucocitosEmatologia.setText(null);
        cboExamen.setSelectedIndex(-1);
//        txtHematocrito.setText(null);
//        txtNeutrofilos.setText(null);
//        txtAbastonados.setText(null);
//        txtsegmentadosEmatologia.setText(null);
//        txtmonocitosEmatologia.setText(null);
//        txtEosinofiosEmatologia.setText(null);
//        txtbasofilosEmatologia.setText(null);
//        txtLinfocitosEmatologia.setText(null);
//        txtPlaquetas.setText(null);
        txtObservaciones.setText(null);
    }
    private void imprimir() {
        int seleccion = JOptionPane.showOptionDialog(
                this, // Componente padre
                "¿Desea Imprimir ?", //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                "Si");
        if (seleccion != -1) {
            if ((seleccion + 1) == 1) {
                printer(Integer.valueOf(txtNTicket.getText()));
            } else {
                // PRESIONO NO
            }
        }

    }
    private void printer(Integer cod) {
        Map parameters = new HashMap();
        parameters.put("Norden", cod);
        try {
            String master = System.getProperty("user.dir")
                    + "/reportes/Hemograma.jasper";
            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte hemograma");
                //System.exit(2);
            }
            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }
//            JasperPrint myPrint = JasperFillManager.fillReport(masterReport, parameters, clsConnection.oConnection);
//            JasperViewer.viewReport(myPrint, false);
            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parameters, clsConnection.oConnection);
            JasperPrintManager.printReport(jasperPrint, true);
        } catch (JRException ex) {
            Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void print(Integer cod){
                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);         
                try 
                {
                    String direccionReporte = System.getProperty("user.dir")+File.separator+"reportes"+File.separator+"Hemograma.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport,parameters,clsConnection.oConnection);
                    JasperViewer viewer = new JasperViewer(myPrint, false);
                    viewer.setTitle("HEMOGRAMA");
                   // viewer.setAlwaysOnTop(true);
                    viewer.setVisible(true);
                 } catch (JRException ex) {
                    Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
                }
 }
  //agregar examen 
   
    public void sbServicioAgrega() {
        // Variable para el modelo de la tabla
        DefaultTableModel tblDatos = (DefaultTableModel) tbTicket.getModel();
        // Prepara los datos vacios iniciales
        Object[] oFila = new Object[4];
        // Para el Query
        // Valida que haya algo en el Codigo
        if (!cboExamen.getSelectedItem().toString().isEmpty()) {
            // Prepara el Query
            //Ejecuta el Query
            // Capturo el Error
                    oFila[0] = cboExamen.getSelectedItem().toString();
                    oFila[1] = txtResultado.getText();
                    oFila[2] = lblValorR.getText();
                    oFila[3] = txtObservaciones.getText();
                    tblDatos.insertRow(0, oFila);
                    tbTicket.setModel(tblDatos);
                // Cierro los Resultados
        }
    }
    private void sbTicket() {
        // Declaro un modelo de datos
        ticket = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 1) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        ticket.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getColumn() == 1) {
                    
                }
            }
        });
        // Añadimos columnas al modelo de datos
        ticket.addColumn("PRUEBA");
        ticket.addColumn("RESULTADO");
        ticket.addColumn("VALORR");
        ticket.addColumn("OBSERVACION");
        // Coloca el Modelo en la Tabla
        tbTicket.setModel(ticket);
        // Directamente
        tbTicket.getColumnModel().getColumn(0).setPreferredWidth(200);
        tbTicket.getColumnModel().getColumn(1).setPreferredWidth(60);
        tbTicket.getColumnModel().getColumn(2).setPreferredWidth(30);
        tbTicket.getColumnModel().getColumn(3).setPreferredWidth(20);
        tbTicket.getTableHeader().setReorderingAllowed(false);
        tbTicket.getTableHeader().setResizingAllowed(false);
        // tbBoleta.setFont(new java.awt.Font("Lucida Sans", 0, 12)); 
        // Alinear a la derecha las cantidades y precios
        DefaultTableCellRenderer cellAlinear = new DefaultTableCellRenderer();
        // Asignamos el Alineamiento Horizontal a la derecha
        cellAlinear.setHorizontalAlignment(SwingConstants.CENTER);
        // Asignamos la Variable de celda de alineamiento a cada una de las columnas a alinear
        tbTicket.getColumnModel().getColumn(0).setCellRenderer(cellAlinear);
        tbTicket.getColumnModel().getColumn(1).setCellRenderer(cellAlinear);
        tbTicket.getColumnModel().getColumn(2).setCellRenderer(cellAlinear);
        tbTicket.getColumnModel().getColumn(3).setCellRenderer(cellAlinear);
    }
    private boolean oTicketDetalle() {
        // Para los resultados
        boolean bResult = false;
        // Para la sentencia Sql
        String insert;
        String values;
        try{
        // Query para actualizar el Folio
        insert = "INSERT INTO inmunologico_asistencial(\n" +
"            i_ticket, i_fecha, i_responsable)";
        values = "VALUES ('" + txtNTicket.getText() + "','" 
                + FechaExamen.getDate()+ "','"
                + txtResponsable.getText() + "') ";
//        oFunc.SubSistemaMensajeError(insert+values);
            if (oConn.FnBoolQueryExecuteUpdate(insert + values)) {
                bResult = true;
            }
            oConn.sqlStmt.close();
        }catch(SQLException ex){
            Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Retorna el Valor
        return bResult;

    }
    private boolean oTicketContenido() {
        // Para los resultados
        boolean bResult = false;
        // Variable para las filas de la Tabla de Productos
        int iFila;
        // Variables para los diferentes datos
        String sExamen, sResultado, sValor, sObservacion;
        // Para la sentencia Sql
        String strSqlStmt; // Para el Query
        // Ciclo para grabar el detalle de la venta
        try {
            for (iFila = 0; iFila < tbTicket.getRowCount(); iFila++) {
                //Obtiene dato contenido en una celda de la tabla
                sExamen = tbTicket.getModel().getValueAt(iFila, 0).toString();
                sResultado = tbTicket.getModel().getValueAt(iFila, 1).toString();
                sValor = tbTicket.getModel().getValueAt(iFila, 2).toString();
                sObservacion = tbTicket.getModel().getValueAt(iFila, 3).toString();
                // Prepara Query para grabar venta detalle
                strSqlStmt = " INSERT INTO inmunologico_detalle";
                strSqlStmt = strSqlStmt + "(id_ticket,";
                strSqlStmt = strSqlStmt + " id_examen,";
                strSqlStmt = strSqlStmt + " id_resultado,";
                strSqlStmt = strSqlStmt + " id_valorr,";
                strSqlStmt = strSqlStmt + " id_observacion)";
                strSqlStmt = strSqlStmt + " Values (";
                strSqlStmt = strSqlStmt + "'" + txtNTicket.getText() + "'";
                strSqlStmt = strSqlStmt + ",'" + sExamen + "'";
                strSqlStmt = strSqlStmt + ",'" + sResultado + "'";
                strSqlStmt = strSqlStmt + ",'" + sValor + "'";
                strSqlStmt = strSqlStmt + ",'" + sObservacion + "')";

                // Ejecuta la Sentencia
//            oFunc.SubSistemaMensajeError(strSqlStmt);
                if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt)) {
                    bResult = true;

                }

            }

            // break;
            oConn.sqlStmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(ExamenInmunologico.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bResult;
    }
    void agregarDatos(){
        boolean bCommit = false;
        if (validar()) {
            // Inicia la transacción colocando el commit a false
            oConn.SubAutoCommit(false);
            // Intenta ejecutar cada uno de los procesos
            if (oTicketDetalle()) {
                if (oTicketContenido()) {
                    bCommit = true;
                }
            }
            // Verifica si debe hacer commit
            if (bCommit) {
                // Realiza la confirmación de la transaccion
                oConn.SubCommit();
//                btnImprimirFicha.setEnabled(bCommit);
                imprimir();
                sbTicket();
                
            } else {
                oConn.SubRollBack();
            }
            
        }
    }
    public boolean OrdenExiste(){
        boolean bResultado = false;
        String sQuery = "Select i_ticket from inmunologico_asistencial Where i_ticket=" + txtNTicket.getText();
        oConn.FnBoolQueryExecute(sQuery);
        try {
            if (oConn.setResult.next()) {
                bResultado = true;
//                oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//                txtNorden.setText(null);
            }
            oConn.setResult.close();
        } catch (SQLException ex) {
        }
        return bResultado;
    }
}
