/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Asistencial;

import Clases.clsConnection;
import Clases.clsFunciones;
import Clases.clsOperacionesUsuarios;
import autocomplete.ajTextFieldConsulta;
import java.awt.Color;
import java.io.File;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
/**
 *
 * @author DEYMER
 */
public class Hemograma extends javax.swing.JFrame {

    /**
     * Creates new form Hemograma
     */
    clsConnection oConn = new clsConnection();
    clsFunciones  oFunc = new clsFunciones();
    clsOperacionesUsuarios oPe = new clsOperacionesUsuarios();
    
    public Hemograma() {
        initComponents();
        new ajTextFieldConsulta.autocompleterText(txtResponsable, "select nombre_user||' '||apellido_user as nombre FROM usuarios WHERE CONCAT(nombre_user,' ',apellido_user)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtHemoglobina = new javax.swing.JTextField();
        txtHematocrito = new javax.swing.JTextField();
        txtLeucocitosEmatologia = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtAbastonados = new javax.swing.JTextField();
        txtsegmentadosEmatologia = new javax.swing.JTextField();
        txtmonocitosEmatologia = new javax.swing.JTextField();
        txtEosinofiosEmatologia = new javax.swing.JTextField();
        txtNeutrofilos = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtbasofilosEmatologia = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtLinfocitosEmatologia = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        txtPlaquetas = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtNTicket = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        btnEditarIn = new javax.swing.JButton();
        FechaExamen = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtResponsable = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnGrabar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservaciones = new javax.swing.JTextArea();
        jPanel16 = new javax.swing.JPanel();
        txtImprimir = new javax.swing.JTextField();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HEMOGRAMA");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Hemograma"));

        jLabel10.setText("Hemoglobina :");

        jLabel11.setText("Hematocrito :");

        jLabel13.setText("Leucocitos :");

        txtHemoglobina.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtHemoglobina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHemoglobinaActionPerformed(evt);
            }
        });
        txtHemoglobina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHemoglobinaKeyTyped(evt);
            }
        });

        txtHematocrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHematocritoActionPerformed(evt);
            }
        });

        txtLeucocitosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLeucocitosEmatologiaActionPerformed(evt);
            }
        });

        jLabel15.setText("g/dl");

        jLabel16.setText("%");

        jLabel18.setText("mm³");

        jLabel19.setText("Segmentados :");

        jLabel20.setText("Eosinofilos :");

        jLabel21.setText("Monocitos :");

        txtAbastonados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAbastonadosActionPerformed(evt);
            }
        });

        txtsegmentadosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsegmentadosEmatologiaActionPerformed(evt);
            }
        });

        txtmonocitosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmonocitosEmatologiaActionPerformed(evt);
            }
        });

        txtEosinofiosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEosinofiosEmatologiaActionPerformed(evt);
            }
        });

        txtNeutrofilos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNeutrofilosActionPerformed(evt);
            }
        });

        jLabel24.setText("%");

        jLabel26.setText("Neutrofilos :");

        jLabel27.setText("Abastonados :");

        txtbasofilosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbasofilosEmatologiaActionPerformed(evt);
            }
        });

        jLabel28.setText("Basofilos :");

        jLabel29.setText("Linfocitos :");

        txtLinfocitosEmatologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLinfocitosEmatologiaActionPerformed(evt);
            }
        });

        jLabel25.setText("%");

        jLabel30.setText("%");

        jLabel31.setText("%");

        jLabel32.setText("%");

        jLabel33.setText("%");

        jLabel34.setText("%");

        jLabel49.setText("Plaquetas :");

        txtPlaquetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlaquetasActionPerformed(evt);
            }
        });

        jLabel50.setText("mm³");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel49)
                    .addComponent(jLabel13)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNeutrofilos)
                    .addComponent(txtLeucocitosEmatologia, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                    .addComponent(txtHematocrito)
                    .addComponent(txtHemoglobina)
                    .addComponent(txtPlaquetas, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAbastonados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel16)
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18))
                    .addComponent(jLabel50)
                    .addComponent(jLabel24))
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel21)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEosinofiosEmatologia, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(txtmonocitosEmatologia)
                    .addComponent(txtbasofilosEmatologia)
                    .addComponent(txtLinfocitosEmatologia)
                    .addComponent(txtsegmentadosEmatologia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel19)
                            .addComponent(txtsegmentadosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel21)
                            .addComponent(txtmonocitosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(txtEosinofiosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel28)
                            .addComponent(txtbasofilosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel29)
                                .addComponent(txtLinfocitosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel34)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel10)
                            .addComponent(txtHemoglobina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel11)
                            .addComponent(txtHematocrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPlaquetas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel50))
                            .addComponent(jLabel49))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(txtLeucocitosEmatologia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13))
                            .addComponent(jLabel18))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(txtNeutrofilos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(txtAbastonados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("N° Ticket :");

        txtNTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNTicketActionPerformed(evt);
            }
        });
        txtNTicket.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNTicketKeyTyped(evt);
            }
        });

        jLabel48.setText("Dni:");

        txtDni.setEditable(false);

        jLabel1.setText("Nombres :");

        txtNombres.setEditable(false);

        btnEditarIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/configuracion.png"))); // NOI18N
        btnEditarIn.setText("Editar");
        btnEditarIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarInActionPerformed(evt);
            }
        });

        jLabel3.setText("Fecha :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNombres)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel48)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditarIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FechaExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(txtNTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel48)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditarIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(FechaExamen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel4.setText("Responsable Lab :");

        txtResponsable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResponsableActionPerformed(evt);
            }
        });
        txtResponsable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtResponsableKeyReleased(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/agegar.png"))); // NOI18N

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        btnGrabar.setText("Grabar/Actualizar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        txtObservaciones.setColumns(20);
        txtObservaciones.setLineWrap(true);
        txtObservaciones.setRows(5);
        txtObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Observaciones"));
        jScrollPane1.setViewportView(txtObservaciones);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IMPRIMIR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        txtImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImprimirActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtImprimir)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(txtImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGrabar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel4)
                            .addComponent(txtResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGrabar)))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLeucocitosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLeucocitosEmatologiaActionPerformed
        txtNeutrofilos.requestFocus();
    }//GEN-LAST:event_txtLeucocitosEmatologiaActionPerformed

    private void txtAbastonadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAbastonadosActionPerformed
        txtsegmentadosEmatologia.requestFocus();
    }//GEN-LAST:event_txtAbastonadosActionPerformed

    private void txtsegmentadosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsegmentadosEmatologiaActionPerformed
        txtmonocitosEmatologia.requestFocus();
    }//GEN-LAST:event_txtsegmentadosEmatologiaActionPerformed

    private void txtmonocitosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmonocitosEmatologiaActionPerformed
        txtEosinofiosEmatologia.requestFocus();
    }//GEN-LAST:event_txtmonocitosEmatologiaActionPerformed

    private void txtEosinofiosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEosinofiosEmatologiaActionPerformed
        txtbasofilosEmatologia.requestFocus();
    }//GEN-LAST:event_txtEosinofiosEmatologiaActionPerformed

    private void txtNeutrofilosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNeutrofilosActionPerformed
        txtAbastonados.requestFocus();
    }//GEN-LAST:event_txtNeutrofilosActionPerformed

    private void txtbasofilosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbasofilosEmatologiaActionPerformed
        txtLinfocitosEmatologia.requestFocus();
    }//GEN-LAST:event_txtbasofilosEmatologiaActionPerformed

    private void txtLinfocitosEmatologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLinfocitosEmatologiaActionPerformed
        txtObservaciones.requestFocus();
    }//GEN-LAST:event_txtLinfocitosEmatologiaActionPerformed

    private void txtPlaquetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlaquetasActionPerformed
        txtLeucocitosEmatologia.requestFocus();
    }//GEN-LAST:event_txtPlaquetasActionPerformed

    private void txtNTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNTicketActionPerformed
        if(!txtNTicket.getText().isEmpty()){
            if(! OrdenExiste()){
                String Sql = "select t.cod_pa,d.nombres_pa || d.apellidos_pa as nombres \n"
                        + "from datos_paciente_asistencial d\n"
                        + "inner join ticket t on(d.cod_pa=t.cod_pa)\n"
                        + "where t.n_ticket='" + txtNTicket.getText() + "'";
                oConn.FnBoolQueryExecute(Sql);
                try {
                    if(oConn.setResult.next()) {
                        txtNombres.setText(oConn.setResult.getString("nombres"));
                        txtDni.setText(oConn.setResult.getString("cod_pa"));
                        oPe.fecha(FechaExamen);
                        txtResponsable.requestFocus();
                    }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Registro: \n 1- Intente de nuevo \n 2- Si el error sigue Registre Usuario o \n    Aperture EX-Preocupacional de nuevo");
                    }
                    oConn.setResult.close();
                } catch (SQLException ex) {
                    oFunc.SubSistemaMensajeInformacion("Laboratorio Clinico:" + ex.getMessage().toString());
                }
            }
        }
    }//GEN-LAST:event_txtNTicketActionPerformed

    private void txtNTicketKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNTicketKeyTyped
        oFunc.NoLetras(evt);
    }//GEN-LAST:event_txtNTicketKeyTyped

    private void txtResponsableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResponsableActionPerformed
        txtHemoglobina.requestFocusInWindow();
    }//GEN-LAST:event_txtResponsableActionPerformed

    private void txtHemoglobinaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHemoglobinaKeyTyped

    }//GEN-LAST:event_txtHemoglobinaKeyTyped

    private void txtHemoglobinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHemoglobinaActionPerformed
        if(!txtNTicket.getText().isEmpty()){
            String sql="SELECT dp.sexo_pa FROM datos_paciente_asistencial as dp \n"
                    + "inner join ticket AS t ON(dp.cod_pa = t.cod_pa) \n"
                    + "where t.n_ticket =" + txtNTicket.getText() + "";
            oConn.FnBoolQueryExecute(sql);
            String sexo;
            try {
                if (oConn.setResult.next()) {
                    sexo = oConn.setResult.getString("sexo_pa");
                    if (!txtHemoglobina.getText().isEmpty()) {
                        float hemoglobina = Float.parseFloat(txtHemoglobina.getText());
                        if ("M".equals(sexo)) {
                            if (hemoglobina < 14 || hemoglobina > 20) {
                                txtHemoglobina.setForeground(Color.red);
                            } else {
                                txtHemoglobina.setForeground(Color.BLACK);
                            }
                        }
                        if ("F".equals(sexo)) {
                            if (hemoglobina < 13.5 || hemoglobina > 20) {
                                txtHemoglobina.setForeground(Color.red);
                            } else {
                                txtHemoglobina.setForeground(Color.BLACK);
                            }
                        }
                    }
                }
                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError("ERROR EN CONSULTA");
            }
        }
        txtHematocrito.requestFocus();
    }//GEN-LAST:event_txtHemoglobinaActionPerformed

    private void txtHematocritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHematocritoActionPerformed
        txtPlaquetas.requestFocus();
    }//GEN-LAST:event_txtHematocritoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
//        Limpiar();
        txtNTicket.requestFocus();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
        if (OrdenExiste()) {
            actualizar();
            Limpiar();
        } else {
            Agregar();
        }

    }//GEN-LAST:event_btnGrabarActionPerformed

    private void txtImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImprimirActionPerformed
        // TODO add your handling code here:
//        print (Integer.parseInt(txtImprimir.getText()));
    }//GEN-LAST:event_txtImprimirActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        print (Integer.parseInt(txtImprimir.getText()));
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnEditarInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarInActionPerformed
//        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        if(!txtNTicket .getText().isEmpty()){
            String Sql = "select t.cod_pa,d.nombres_pa || d.apellidos_pa as nombres, h.h_fecha, h.h_responsable, h.h_hemoglobina, h.h_hematocrito, \n"
                    + "       h.h_plaquetas, h.h_leucocitos, h.h_neutrofilos, h.h_abastonados, h.h_segmentdos, \n"
                    + "       h.h_monocitos, h.h_eosinofilos,h.h_basofilos, h.h_linfocitos, h.h_observaciones\n"
                    + "from datos_paciente_asistencial d\n"
                    + "inner join ticket t on(d.cod_pa=t.cod_pa)\n"
                    + "inner join hemograma h on (t.n_ticket=h.h_ticket)\n"
                    + "where t.n_ticket='" + txtNTicket.getText() + "'";
            oConn.FnBoolQueryExecute(Sql);
            try {
                if (oConn.setResult.next()) {
                    txtNombres.setText(oConn.setResult.getString("nombres"));
                    txtDni.setText(oConn.setResult.getString("cod_pa"));
                    FechaExamen.setDate(oConn.setResult.getDate("h_fecha"));
                    txtResponsable.setText(oConn.setResult.getString("h_responsable"));
                    txtHemoglobina.setText(oConn.setResult.getString("h_hemoglobina"));
                    txtHematocrito.setText(oConn.setResult.getString("h_hematocrito"));
                    txtPlaquetas.setText(oConn.setResult.getString("h_plaquetas"));
                    txtLeucocitosEmatologia.setText(oConn.setResult.getString("h_leucocitos"));
                    txtNeutrofilos.setText(oConn.setResult.getString("h_neutrofilos"));
                    txtAbastonados.setText(oConn.setResult.getString("h_abastonados"));
                    txtsegmentadosEmatologia.setText(oConn.setResult.getString("h_segmentdos"));
                    txtmonocitosEmatologia.setText(oConn.setResult.getString("h_monocitos"));
                    txtEosinofiosEmatologia.setText(oConn.setResult.getString("h_eosinofilos"));
                    txtbasofilosEmatologia.setText(oConn.setResult.getString("h_basofilos"));
                    txtLinfocitosEmatologia.setText(oConn.setResult.getString("h_linfocitos"));
                    txtObservaciones.setText(oConn.setResult.getString("h_observaciones"));
                    
                }else{
                    oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios");
                }
                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeInformacion("Ficha inmunologica:" + ex.getMessage());}
        }
    }//GEN-LAST:event_btnEditarInActionPerformed

    private void txtResponsableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResponsableKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtResponsableKeyReleased

public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hemograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hemograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hemograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hemograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hemograma().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaExamen;
    private javax.swing.JButton btnEditarIn;
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtAbastonados;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtEosinofiosEmatologia;
    private javax.swing.JTextField txtHematocrito;
    private javax.swing.JTextField txtHemoglobina;
    private javax.swing.JTextField txtImprimir;
    private javax.swing.JTextField txtLeucocitosEmatologia;
    private javax.swing.JTextField txtLinfocitosEmatologia;
    private javax.swing.JTextField txtNTicket;
    private javax.swing.JTextField txtNeutrofilos;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextArea txtObservaciones;
    private javax.swing.JTextField txtPlaquetas;
    private javax.swing.JTextField txtResponsable;
    private javax.swing.JTextField txtbasofilosEmatologia;
    private javax.swing.JTextField txtmonocitosEmatologia;
    private javax.swing.JTextField txtsegmentadosEmatologia;
    // End of variables declaration//GEN-END:variables
    public boolean OrdenExiste(){
        boolean bResultado = false;
        String sQuery = "Select h_ticket from hemograma Where h_ticket=" + txtNTicket.getText();
        oConn.FnBoolQueryExecute(sQuery);
        try {
            if (oConn.setResult.next()) {
                bResultado = true;
//                oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//                txtNorden.setText(null);
            }
            oConn.setResult.close();
        } catch (SQLException ex) {
        }
        return bResultado;
    }
    private boolean validar() {
        boolean bResultado = true;
            if (((JTextField) FechaExamen.getDateEditor().getUiComponent()).getText().trim().length() < 2) {
                oFunc.SubSistemaMensajeError("Ingrese Fecha de Examen");
                bResultado = false;
            }
        return bResultado;
    }
    public void Agregar(){
     if(!OrdenExiste()){
        String strSqlStmt;
        String Query;
         strSqlStmt = "INSERT INTO hemograma(";
         Query = "Values(";
         strSqlStmt += "h_ticket";Query += "'" + txtNTicket.getText() + "'";
         if (((JTextField) FechaExamen.getDateEditor().getUiComponent()).getText().trim().length() > 1) {
             strSqlStmt += ",h_fecha";Query += ",'" + FechaExamen.getDate() + "'";
         }
         if (txtResponsable.getText().trim().length() >= 1) {
             strSqlStmt += ", h_responsable";Query += ",'" + txtResponsable.getText() + "'";
         }
         strSqlStmt += ", h_hemoglobina";Query += ",'" + txtHemoglobina.getText() + "'";
         strSqlStmt += ", h_hematocrito";Query += ",'" + txtHematocrito.getText() + "'";
         strSqlStmt += ", h_plaquetas";Query += ",'" + txtPlaquetas.getText() + "'";
         strSqlStmt += ", h_leucocitos";Query += ",'" + txtLeucocitosEmatologia.getText() + "'";
         strSqlStmt += ", h_neutrofilos";Query += ",'" + txtNeutrofilos.getText() + "'";
         strSqlStmt += ", h_abastonados";Query += ",'" + txtAbastonados.getText() + "'";
         strSqlStmt += ", h_segmentdos";Query += ",'" + txtsegmentadosEmatologia.getText() + "'";
         strSqlStmt += ", h_monocitos";Query += ",'" + txtmonocitosEmatologia.getText() + "'";
         strSqlStmt += ", h_eosinofilos";Query += ",'" + txtEosinofiosEmatologia.getText() + "'";
         strSqlStmt += ", h_basofilos";Query += ",'" + txtbasofilosEmatologia.getText() + "'";
         strSqlStmt += ", h_linfocitos";Query += ",'" + txtLinfocitosEmatologia.getText() + "'";
         strSqlStmt += ", h_observaciones";Query += ",'" + txtObservaciones.getText() + "'";
         
         try {
             if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt.concat(") ") + Query.concat(")"))) {
                 oFunc.SubSistemaMensajeInformacion("Se ha registrado la Entrada con Éxito");
                 imprimir();
                 Limpiar();
                 oConn.sqlStmt.close();
             } else {
                 oFunc.SubSistemaMensajeError("No se pudo registrar La Entrada");
             }
         } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion(ex.toString());
            Logger.getLogger(Hemograma.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
    }
    public void actualizar() {
        String sql = "UPDATE hemograma SET  h_fecha='" + FechaExamen.getDate().toString()
                + "', h_responsable='" + txtResponsable.getText()
                + "', h_hemoglobina='" + txtHemoglobina.getText()
                + "', h_hematocrito='" + txtHematocrito.getText()
                + "', h_plaquetas='" + txtPlaquetas.getText()
                + "', h_leucocitos='" + txtLeucocitosEmatologia.getText()
                + "', h_neutrofilos='" + txtNeutrofilos.getText()
                + "', h_abastonados='" + txtAbastonados.getText()
                + "', h_segmentdos='" + txtsegmentadosEmatologia.getText()
                + "', h_monocitos='" + txtmonocitosEmatologia.getText()
                + "', h_eosinofilos='" + txtEosinofiosEmatologia.getText()
                + "', h_basofilos='" + txtbasofilosEmatologia.getText()
                + "', h_linfocitos='" + txtLinfocitosEmatologia.getText()
                + "', h_observaciones='" + txtObservaciones.getText()
             + "' where h_ticket=" + txtNTicket.getText();
        //  System.out.println("SQL:"+sql);
        if (oConn.FnBoolQueryExecuteUpdate(sql)) {
            oFunc.SubSistemaMensajeInformacion("Se ha actualizado la Entrada con Éxito");
            imprimir();
            try {
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(Hemograma.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            oFunc.SubSistemaMensajeError("No se pudo Agregar La Entrada");
        }

    }
    private void Limpiar() {
        FechaExamen.setDate(null);
        txtNTicket.setText(null);
        txtNombres.setText(null);
        txtDni.setText(null);
        txtResponsable.setText(null);
        txtLeucocitosEmatologia.setText(null);
        txtHemoglobina.setText(null);
        txtHematocrito.setText(null);
        txtNeutrofilos.setText(null);
        txtAbastonados.setText(null);
        txtsegmentadosEmatologia.setText(null);
        txtmonocitosEmatologia.setText(null);
        txtEosinofiosEmatologia.setText(null);
        txtbasofilosEmatologia.setText(null);
        txtLinfocitosEmatologia.setText(null);
        txtPlaquetas.setText(null);
        txtObservaciones.setText(null);
    }
    private void imprimir() {
        int seleccion = JOptionPane.showOptionDialog(
                this, // Componente padre
                "¿Desea Imprimir ?", //Mensaje
                "Seleccione una opción", // Título
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"Si", "No"}, // null para YES, NO y CANCEL
                "Si");
        if (seleccion != -1) {
            if ((seleccion + 1) == 1) {
                printer(Integer.valueOf(txtNTicket.getText()));
            } else {
                // PRESIONO NO
            }
        }

    }

    private void printer(Integer cod) {
        Map parameters = new HashMap();
        parameters.put("Norden", cod);
        try {
            String master = System.getProperty("user.dir")
                    + "/reportes/Hemograma.jasper";
            System.out.println("master" + master);
            if (master == null) {
                System.out.println("No encuentro el archivo del reporte hemograma");
                //System.exit(2);
            }
            JasperReport masterReport = null;
            try {
                masterReport = (JasperReport) JRLoader.loadObject(master);
            } catch (JRException e) {
                System.out.println("Error cargando el reporte maestro: " + e.getMessage());
                System.exit(3);
            }
//            JasperPrint myPrint = JasperFillManager.fillReport(masterReport, parameters, clsConnection.oConnection);
//            JasperViewer.viewReport(myPrint, false);

            JasperPrint jasperPrint = JasperFillManager.fillReport(masterReport, parameters, clsConnection.oConnection);
            JasperPrintManager.printReport(jasperPrint, true);

        } catch (JRException ex) {
            Logger.getLogger(Hemograma.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void print(Integer cod){

                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);             
                
                  try 
                {
                    String direccionReporte = System.getProperty("user.dir")+File.separator+"reportes"+File.separator+"Hemograma.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport,parameters,clsConnection.oConnection);
                    JasperViewer viewer = new JasperViewer(myPrint, false);
                    viewer.setTitle("HEMOGRAMA");
                   // viewer.setAlwaysOnTop(true);
                    viewer.setVisible(true);
                 } catch (JRException ex) {
                    Logger.getLogger(Hemograma.class.getName()).log(Level.SEVERE, null, ex);
                }
 }

}
