/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sistema;

import Clases.ExportarExel;
import Clases.clsConnection;
import Clases.clsFunciones;
import autocomplete.ajTextField;
import com.lowagie.text.Row;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;

/**
 *
 * @author Richard
 */
public class Frm_conalvias extends javax.swing.JInternalFrame {

    DefaultTableModel model;
  
    clsConnection oConn = new clsConnection();
    clsFunciones oFunc = new clsFunciones();

    public Frm_conalvias() {
        initComponents();
        new ajTextField.autocompleterText(txtEmpresa, "razon_empresa", "empresas");
        new ajTextField.autocompleterText(txtEmpresa, "razon_contrata", "contratas");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txtEmpresa = new javax.swing.JTextField();
        F_inicio = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        F_final = new com.toedter.calendar.JDateChooser();
        btnLimpiar = new javax.swing.JButton();
        rbEmpresa = new javax.swing.JRadioButton();
        rbContrata = new javax.swing.JRadioButton();
        btnBuscar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnObrainsa = new javax.swing.JButton();
        btnPoderosa = new javax.swing.JButton();
        chkAnexo2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbReporte = new javax.swing.JTable();
        Exportar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Exportar Datos Pacientes");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));

        txtEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpresaActionPerformed(evt);
            }
        });
        txtEmpresa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmpresaKeyTyped(evt);
            }
        });

        jLabel2.setText("Fecha Inicio :");

        jLabel3.setText("Fecha Final :");

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbEmpresa);
        rbEmpresa.setText("Empresa");

        buttonGroup1.add(rbContrata);
        rbContrata.setText("Contrata");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
        btnBuscar.setText("buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        jButton1.setText("STRACON");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnObrainsa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        btnObrainsa.setText("OBRAINSA");
        btnObrainsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrainsaActionPerformed(evt);
            }
        });

        btnPoderosa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        btnPoderosa.setText("Poderosa");
        btnPoderosa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPoderosaActionPerformed(evt);
            }
        });

        chkAnexo2.setText("ANEXO2");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        jButton2.setText("Caravelli");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        jButton3.setText("Proseguridad");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        jButton4.setText("Boroo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cambiar.png"))); // NOI18N
        jButton5.setText("Suma Gold");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbEmpresa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbContrata)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addComponent(F_inicio, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(F_final, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkAnexo2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnPoderosa)
                        .addGap(2, 2, 2)
                        .addComponent(btnObrainsa))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnLimpiar))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnObrainsa)
                    .addComponent(btnPoderosa))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(F_final, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(F_inicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(rbEmpresa)
                            .addComponent(rbContrata)
                            .addComponent(chkAnexo2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5)))))
        );

        tbReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbReporte.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(tbReporte);

        jTabbedPane1.addTab("Formulario", jScrollPane1);

        Exportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/excel.png"))); // NOI18N
        Exportar.setText("Exportar");
        Exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Exportar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Exportar)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpresaActionPerformed
       if(!txtEmpresa.getText().isEmpty()){
           if(rbEmpresa.isSelected()){
               cEmpresa();
           }
           if(rbContrata.isSelected()){
            cContrata();
           }
              
       }
    }//GEN-LAST:event_txtEmpresaActionPerformed

    private void ExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportarActionPerformed
         if(this.tbReporte.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.","Aviso",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        generar(tbReporte);
       oFunc.SubSistemaMensajeInformacion("Revisar");
        
    }//GEN-LAST:event_ExportarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        rbEmpresa.setSelected(false);
        rbContrata.setSelected(false);
        txtEmpresa.setText(null);
        F_inicio.setDate(null);
        F_final.setDate(null);
        cEmpresa();
        
        
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if(!txtEmpresa.getText().isEmpty()){
           if(rbEmpresa.isSelected()){
               cEmpresa();
           }
           if(rbContrata.isSelected()){
            cContrata();
           }
              
       }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(chkAnexo2.isSelected()){
            stracon1();
        }else{
           stracon(); 
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnObrainsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrainsaActionPerformed
        obrainsa();
    }//GEN-LAST:event_btnObrainsaActionPerformed

    private void txtEmpresaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpresaKeyTyped
        int k=(int)evt.getKeyChar();
        if(txtEmpresa.getText().trim().length()==0){
            if(k==32){
            evt.setKeyChar((char)KeyEvent.VK_CLEAR);
            Toolkit.getDefaultToolkit().beep(); 
            JOptionPane.showMessageDialog(null,"La primera letra no puede ser espacio!!!","Ventana Error Ingreso de Datos",JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_txtEmpresaKeyTyped

    private void btnPoderosaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPoderosaActionPerformed
        poderosa();
    }//GEN-LAST:event_btnPoderosaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        caraveli();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        proseguridad();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boroo();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        sumagold();
    }//GEN-LAST:event_jButton5ActionPerformed
    private void cEmpresa(){
    model = new DefaultTableModel(){        
                 @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                    }};
//   String vSql="SELECT ";
//                        vSql += "n.nom_examen AS EXAMEN,";
//                         
//                        
//                         vSql += "d.cod_pa AS DNI,";
//                         
//                        
//                          vSql += "d.nombres_pa||' '||d.apellidos_pa AS NOMBRES, ";
//                         
//                        
//                         vSql+= "d.sexo_pa AS SEXO, ";
//                         
//                        
//                         vSql+= "n.fecha_apertura_po AS FECHA, ";
//                          
//                     
//                         vSql+= "d.nivel_est_pa AS ESTUDIOS, ";
//                                 
//                       
//                         vSql+= "n.razon_contrata AS CONTRATA, ";
//                                 
//                       
//                         vSql+= "n.razon_empresa AS EMPRESA, ";
//                                 
//                        
//                         vSql+= "n.precio_po::numeric AS PRECIO "
//                             
//                + "FROM n_orden_ocupacional AS n "
//                + "LEFT JOIN datos_paciente AS d ON (n.cod_pa = d.cod_pa) "
//                + "LEFT JOIN lab_clinico AS l ON (n.n_orden = l.n_orden) ";
//             
//             
//               
//                vSql +=" WHERE ";
//                              
//                
//                vSql +="'"+txtEmpresa.getText().toString()+"' = n.razon_empresa";
//                   if (((JTextField)F_inicio.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
//                 {  
//               vSql +=" AND n.fecha_apertura_po >= '"+F_inicio.getDate().toString()+"'";
//                 }
//                if (((JTextField)F_final.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
//                 {
//                 vSql +=" AND n.fecha_apertura_po <= '"+F_final.getDate().toString()+"'";
//                 
//                 }    
    
    String vSql="select n.n_orden AS N°, n.razon_empresa AS Empresa, d.apellidos_pa||', '||nombres_pa AS nombres,\n" +
"obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS edad,\n" +
"CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS sexo,\n" +
"d.cod_pa AS \"DNI/Carnet extranjería\", d.fecha_nacimiento_pa AS \"Fecha de Nacimiento\", nivel_est_pa AS \"Grado de Instrucción\", n.cargo_de AS \"Puesto de Trabajo\",\n" +
"n.area_o AS \"área de trabajo\", fecha_apertura_po AS \"Fecha de Evaluación\", n.nom_examen AS \"Tipo de Examen\",\n" +
"CASE WHEN a.txtantecedentespersonales is null THEN 'SIN FICHA ANT. PAT.' ELSE a.txtantecedentespersonales END AS \"Antecedentes Patológicos\",\n" +
"CASE WHEN a.chktnada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chktpoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkthabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chktexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Tabaco,\n" +
"CASE WHEN a.chkanada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chkapoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkahabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chkaexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Licor,\n" +
"CASE WHEN a.chkdnada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chkdpoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkdhabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chkdexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Drogas,\n" +
"CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'PESO NORMAL'\n" +
"     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBRE PESO'   \n" +
"     WHEN t.imc > '29.9' THEN 'OBESIDAD' \n" +
"     WHEN t.imc is null THEN 'SIN FICHA 7C'	\n" +
"     END  AS \"Resultado IMC\",\n" +
"CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"CASE WHEN d.sexo_pa = 'F' AND t.icc < '0.84' THEN 'NORMAL'\n" +
"     WHEN d.sexo_pa = 'M' AND t.icc < '0.94' THEN 'NORMAL'\n" +
"     ELSE 'ALTO' END AS \"Resultado Índice Cintura Cadera (R-ICC)\",\n" +
"CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
//"CASE WHEN CAST ( t.sistolica AS NUMERIC ) <= 120 AND CAST(t.diastolica AS NUMERIC ) <= 80 THEN 'OPTIMA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) <= 129 AND CAST(t.diastolica AS NUMERIC ) <=85 THEN 'NORMAL' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 130 AND CAST(t.sistolica AS NUMERIC ) <=139 THEN 'NORMAL ALTA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 140 AND CAST(t.sistolica AS NUMERIC ) <=159 THEN 'HIPERTENSION LEVE' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 160 AND CAST(t.sistolica AS NUMERIC ) <=179 THEN 'HIPERTENSION MODERADA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 180 THEN 'HIPERTENSION GRAVE' \n" +
//"     ELSE 'DATOS INSUFICIENTES'     \n" +
//"END AS \"R-HA\",\n" +
"CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS \"Frecuencia Cardiaca (FC)\",\n" +
"CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS \"Frecuencia Respiratoria (FR)\",\n" +
"o.v_cerca_s_od AS \"Cerca OD\",\n" +
"o.v_lejos_s_od AS \"Lejos OD\",\n" +
"o.v_cerca_s_oi AS \"Cerca OI\",\n" +
"o.v_lejos_s_oi AS \"Lejos OI\",\n" +
"o.v_cerca_c_od AS \"Cerca Corregida OD\",\n" +
"o.v_lejos_c_od AS \"Lejos Corregida OD\",\n" +
"o.v_cerca_c_oi AS \"Cerca Corregida OI\",\n" +
"o.v_lejos_c_oi AS \"Lejos Corregida OI\",\n" +
"CASE WHEN o.e_oculares IS NULL THEN '...' ELSE o.e_oculares END AS \"Resultado de examen de ojos \",\n" +
"CASE WHEN a.txtconclusion IS NULL THEN '...' ELSE a.txtconclusion END AS \"Resultado de Espirometría \",\n" +
"CASE WHEN a.txtod IS NULL THEN '...' ELSE a.txtod END AS \"Otoscopía OD \",\n" +
"CASE WHEN a.txtoi IS NULL THEN '...' ELSE a.txtoi END AS \"Otoscopía OI \",\n" +
"CASE WHEN au.diagnostico IS NULL THEN '...' ELSE au.diagnostico END AS \"Audiometria \", \n" +
"CASE WHEN rt.txtconclusionesradiograficas IS NULL THEN '...' ELSE rt.txtconclusionesradiograficas END AS \"Radiografia Torax \", \n" + 
"CASE WHEN ie.conclusion IS NULL THEN '...' ELSE ie.conclusion END AS \"Resultado EKG \",\n" + 
"CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS \"Hemoglobina \",\n" +  
//////////////////////////////////////////////////////////////////            
"CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE '**' END AS \"R- hemoglobina \",\n" +              
//////////////////////////////////////////////////////////////////            
 "CASE WHEN lc.txtleucocitosematologia IS NULL THEN '...' ELSE lc.txtleucocitosematologia END AS \"Leucocitos \",\n" +  
 "CASE WHEN lc.txtleucocitosematologia IS NULL THEN '...' ELSE '**' END AS \"Resultado Leu \",\n" +  
 "CASE WHEN lc.n_orden IS NULL THEN '***' ELSE '**' END AS \"Plaquetas \",\n" +  
 "CASE WHEN lc.n_orden IS NULL THEN '***' ELSE '**' END AS \"R. Plaquetas\",\n" +
 "CASE WHEN lc.chko = 'TRUE' THEN 'O'"
 + " WHEN lc.chka = 'TRUE' THEN 'A'"
 + " WHEN lc.chkb = 'TRUE' THEN 'B'"
 + " WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| "
 + "CASE WHEN lc.rbrhpositivo ='TRUE' THEN '+' "
 + " WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS \"Grupo y factor \" ,\n" +  
"CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS \"Glucosa \",\n" +     
"CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE '***' END AS \"Resultado Glucosa\",\n" +              
"CASE WHEN lc.txtobservacioneslb IS NULL THEN '...' ELSE lc.txtobservacioneslb END AS \"Examen de Orina \", \n" +  
"CASE WHEN od.txtpiezasmalestado IS NULL THEN 0 ELSE od.txtpiezasmalestado END AS \"Piezas en Mal estado \" ,\n" +
"CASE WHEN od.txtausentes IS NULL THEN 0 ELSE od.txtausentes END AS \"Piezas Faltantes \", \n" +             
"CASE WHEN od.txtobservaciones IS NULL THEN '...' ELSE od.txtobservaciones END AS \"Resultado de evaluación dental \", \n" +    
"CASE WHEN ca.chkapto = 'TRUE' THEN 'APTO'"
+ " WHEN ca.chkapto_restriccion = 'TRUE' THEN 'APTO CON RESTRICCION'"
+ " WHEN ca.chkno_apto = 'TRUE' THEN 'NO APTO'"+    
"     END  AS \"APTITUD MEDICA\"\n" +
"\n" +
"\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN anexo7c AS a ON (a.n_orden = n.n_orden)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) " +
"LEFT JOIN audiometria_po AS au ON(au.n_orden = n.n_orden) " +
"LEFT JOIN radiografia_torax AS rt ON(rt.n_orden = n.n_orden) " +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)" +
"LEFT JOIN certificado_aptitud_medico_ocupacional AS ca ON(ca.n_orden = n.n_orden)" + 
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)" +            
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)"     
+ "WHERE "+"'"+txtEmpresa.getText().toString()+"' = n.razon_empresa ";//OR "+txtEmpresa.getText().toString()+"' = n.razon_contrata ";
            
            
            System.out.println(vSql);
                         
                   //oFunc.SubSistemaMensajeInformacion(vSql);      
                if (oConn.FnBoolQueryExecute(vSql))
             {
             try  {
                        java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                        int CantidaColumnas = rsmt.getColumnCount();
                        for (int i = 1; i <= CantidaColumnas; i++) {
                         model.addColumn(rsmt.getColumnLabel(i));
                        }
                    while (oConn.setResult.next())
                    {
                        Object [] Fila = new Object[CantidaColumnas];
                        for (int i = 0; i < CantidaColumnas; i++) {
                            Fila[i] = oConn.setResult.getObject(i+1);
                        }
                        model.addRow(Fila);
                    }
                                            
                        tbReporte = autoResizeColWidth(tbReporte, model);
                       
                      tbReporte.setModel(model);
                      
                   
                     oConn.setResult.close();
                } 
                catch (SQLException ex) 
                {
                    oFunc.SubSistemaMensajeError(ex.toString());
                    Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    
    
    }
     private void cContrata(){
    model = new DefaultTableModel(){        
                 @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return false;
                    }};
//   String vSql="SELECT ";
//                        vSql += "n.nom_examen AS EXAMEN,";
//                         
//                        
//                         vSql += "d.cod_pa AS DNI,";
//                         
//                        
//                          vSql += "d.nombres_pa||' '||d.apellidos_pa AS NOMBRES, ";
//                         
//                        
//                         vSql+= "d.sexo_pa AS SEXO, ";
//                         
//                        
//                         vSql+= "n.fecha_apertura_po AS FECHA, ";
//                          
//                     
//                         vSql+= "d.nivel_est_pa AS ESTUDIOS, ";
//                                 
//                       
//                         vSql+= "n.razon_contrata AS CONTRATA, ";
//                                 
//                       
//                         vSql+= "n.razon_empresa AS EMPRESA, ";
//                                 
//                        
//                         vSql+= "n.precio_po::numeric AS PRECIO "
//                             
//                + "FROM n_orden_ocupacional AS n "
//                + "LEFT JOIN datos_paciente AS d ON (n.cod_pa = d.cod_pa) "
//                + "LEFT JOIN lab_clinico AS l ON (n.n_orden = l.n_orden) ";
//             
//             
//               
//                vSql +=" WHERE ";
//                              
//                
//                vSql +="'"+txtEmpresa.getText().toString()+"' = n.razon_empresa";
//                   if (((JTextField)F_inicio.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
//                 {  
//               vSql +=" AND n.fecha_apertura_po >= '"+F_inicio.getDate().toString()+"'";
//                 }
//                if (((JTextField)F_final.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
//                 {
//                 vSql +=" AND n.fecha_apertura_po <= '"+F_final.getDate().toString()+"'";
//                 
//                 }    
    
    String vSql="select n.n_orden AS N°, n.razon_empresa AS Empresa, d.apellidos_pa||', '||nombres_pa AS nombres,\n" +
"obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS edad,\n" +
"CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS sexo,\n" +
"d.cod_pa AS \"DNI/Carnet extranjería\", d.fecha_nacimiento_pa AS \"Fecha de Nacimiento\", nivel_est_pa AS \"Grado de Instrucción\", n.cargo_de AS \"Puesto de Trabajo\",\n" +
"n.area_o AS \"área de trabajo\", fecha_apertura_po AS \"Fecha de Evaluación\", n.nom_examen AS \"Tipo de Examen\",\n" +
"CASE WHEN a.txtantecedentespersonales is null THEN 'SIN FICHA ANT. PAT.' ELSE a.txtantecedentespersonales END AS \"Antecedentes Patológicos\",\n" +
"CASE WHEN a.chktnada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chktpoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkthabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chktexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Tabaco,\n" +
"CASE WHEN a.chkanada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chkapoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkahabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chkaexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Licor,\n" +
"CASE WHEN a.chkdnada ='TRUE' THEN 'NADA' \n" +
"     WHEN a.chkdpoco ='TRUE' THEN 'POCO' \n" +
"     WHEN a.chkdhabitual ='TRUE' THEN 'HABITUAL'\n" +
"     WHEN a.chkdexcesivo ='TRUE' THEN 'EXCESIVO'\n" +
"     ELSE 'SIN FICHA 7C'\n" +
"     END AS Drogas,\n" +
"CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'PESO NORMAL'\n" +
"     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBRE PESO'   \n" +
"     WHEN t.imc > '29.9' THEN 'OBESIDAD' \n" +
"     WHEN t.imc is null THEN 'SIN FICHA 7C'	\n" +
"     END  AS \"Resultado IMC\",\n" +
"CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"CASE WHEN d.sexo_pa = 'F' AND t.icc < '0.84' THEN 'NORMAL'\n" +
"     WHEN d.sexo_pa = 'M' AND t.icc < '0.94' THEN 'NORMAL'\n" +
"     ELSE 'ALTO' END AS \"Resultado Índice Cintura Cadera (R-ICC)\",\n" +
"CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
//"CASE WHEN CAST ( t.sistolica AS NUMERIC ) <= 120 AND CAST(t.diastolica AS NUMERIC ) <= 80 THEN 'OPTIMA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) <= 129 AND CAST(t.diastolica AS NUMERIC ) <=85 THEN 'NORMAL' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 130 AND CAST(t.sistolica AS NUMERIC ) <=139 THEN 'NORMAL ALTA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 140 AND CAST(t.sistolica AS NUMERIC ) <=159 THEN 'HIPERTENSION LEVE' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 160 AND CAST(t.sistolica AS NUMERIC ) <=179 THEN 'HIPERTENSION MODERADA' \n" +
//"     WHEN CAST ( t.sistolica AS NUMERIC ) >= 180 THEN 'HIPERTENSION GRAVE' \n" +
//"     ELSE 'DATOS INSUFICIENTES'     \n" +
//"END AS \"R-HA\",\n" +
"CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS \"Frecuencia Cardiaca (FC)\",\n" +
"CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS \"Frecuencia Respiratoria (FR)\",\n" +
"o.v_cerca_s_od AS \"Cerca OD\",\n" +
"o.v_lejos_s_od AS \"Lejos OD\",\n" +
"o.v_cerca_s_oi AS \"Cerca OI\",\n" +
"o.v_lejos_s_oi AS \"Lejos OI\",\n" +
"o.v_cerca_c_od AS \"Cerca Corregida OD\",\n" +
"o.v_lejos_c_od AS \"Lejos Corregida OD\",\n" +
"o.v_cerca_c_oi AS \"Cerca Corregida OI\",\n" +
"o.v_lejos_c_oi AS \"Lejos Corregida OI\",\n" +
"CASE WHEN o.e_oculares IS NULL THEN '...' ELSE o.e_oculares END AS \"Resultado de examen de ojos \",\n" +
"CASE WHEN a.txtconclusion IS NULL THEN '...' ELSE a.txtconclusion END AS \"Resultado de Espirometría \",\n" +
"CASE WHEN a.txtod IS NULL THEN '...' ELSE a.txtod END AS \"Otoscopía OD \",\n" +
"CASE WHEN a.txtoi IS NULL THEN '...' ELSE a.txtoi END AS \"Otoscopía OI \",\n" +
"CASE WHEN au.diagnostico IS NULL THEN '...' ELSE au.diagnostico END AS \"Audiometria \", \n" +
"CASE WHEN rt.txtconclusionesradiograficas IS NULL THEN '...' ELSE rt.txtconclusionesradiograficas END AS \"Radiografia Torax \", \n" + 
"CASE WHEN ie.conclusion IS NULL THEN '...' ELSE ie.conclusion END AS \"Resultado EKG \",\n" + 
"CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS \"Hemoglobina \",\n" +  
//////////////////////////////////////////////////////////////////            
"CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE '**' END AS \"R- hemoglobina \",\n" +              
//////////////////////////////////////////////////////////////////            
 "CASE WHEN lc.txtleucocitosematologia IS NULL THEN '...' ELSE lc.txtleucocitosematologia END AS \"Leucocitos \",\n" +  
 "CASE WHEN lc.txtleucocitosematologia IS NULL THEN '...' ELSE '**' END AS \"Resultado Leu \",\n" +  
 "CASE WHEN lc.n_orden IS NULL THEN '***' ELSE '**' END AS \"Plaquetas \",\n" +  
 "CASE WHEN lc.n_orden IS NULL THEN '***' ELSE '**' END AS \"R. Plaquetas\",\n" +
 "CASE WHEN lc.chko = 'TRUE' THEN 'O'"
 + " WHEN lc.chka = 'TRUE' THEN 'A'"
 + " WHEN lc.chkb = 'TRUE' THEN 'B'"
 + " WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| "
 + "CASE WHEN lc.rbrhpositivo ='TRUE' THEN '+' "
 + " WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS \"Grupo y factor \" ,\n" +  
"CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS \"Glucosa \",\n" +     
"CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE '***' END AS \"Resultado Glucosa\",\n" +                            
"CASE WHEN lc.txtobservacioneslb IS NULL THEN '...' ELSE lc.txtobservacioneslb END AS \"Examen de Orina \", \n" +  
"CASE WHEN od.txtpiezasmalestado IS NULL THEN 0 ELSE od.txtpiezasmalestado END AS \"Piezas en Mal estado \" ,\n" +
"CASE WHEN od.txtausentes IS NULL THEN 0 ELSE od.txtausentes END AS \"Piezas Faltantes \", \n" +             
"CASE WHEN od.txtobservaciones IS NULL THEN '...' ELSE od.txtobservaciones END AS \"Resultado de evaluación dental \", \n" +     
"CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS \"Resultado de Evaluaciones \", \n" +       
"CASE WHEN ca.chkapto = 'TRUE' THEN 'APTO'"
+ " WHEN ca.chkapto_restriccion = 'TRUE' THEN 'APTO CON RESTRICCION'"
+ " WHEN ca.chkno_apto = 'TRUE' THEN 'NO APTO'"+    
"     END  AS \"APTITUD MEDICA\"\n" +
"\n" +
"\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"FULL JOIN anexo7c AS a ON (a.n_orden = n.n_orden)\n" +
"FULL JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"FULL JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"FULL JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"FULL JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) " +
"FULL JOIN audiometria_po AS au ON(au.n_orden = n.n_orden) " +
"FULL JOIN radiografia_torax AS rt ON(rt.n_orden = n.n_orden) " +
"FULL JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden) " +
"FULL JOIN certificado_aptitud_medico_ocupacional AS ca ON(ca.n_orden = n.n_orden)" + 
"FULL JOIN odontograma AS od ON(od.n_orden = n.n_orden) " +            
"FULL JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden) "+            
"WHERE '"+txtEmpresa.getText().toString()+"' = n.razon_contrata ";
    if(((JTextField)F_inicio.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
                 {
                 vSql +=" AND n.fecha_apertura_po >= '"+F_inicio.getDate().toString()+"'";
                 }
                 if (((JTextField)F_final.getDateEditor().getUiComponent()).getText().trim().length()> 2 ) 
                 {
                 vSql +=" AND n.fecha_apertura_po <= '"+F_final.getDate().toString()+"'";
                 }         
System.out.println("contrata: "+vSql);
                   //oFunc.SubSistemaMensajeInformacion(vSql);      
                if (oConn.FnBoolQueryExecute(vSql))
             {
             try  {
                        java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                        int CantidaColumnas = rsmt.getColumnCount();
                        for (int i = 1; i <= CantidaColumnas; i++) {
                         model.addColumn(rsmt.getColumnLabel(i));
                        }
                    while (oConn.setResult.next())
                    {
                        Object [] Fila = new Object[CantidaColumnas];
                        for (int i = 0; i < CantidaColumnas; i++) {
                            Fila[i] = oConn.setResult.getObject(i+1);
                        }
                        model.addRow(Fila);
                    }
                                            
                        tbReporte = autoResizeColWidth(tbReporte, model);
                       
                      tbReporte.setModel(model);
                      
                   
                     oConn.setResult.close();
                } 
                catch (SQLException ex) 
                {
                    oFunc.SubSistemaMensajeError(ex.toString());
                    Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    
    
    }
public void Exportar(){
   if(this.tbReporte.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "No hay datos en la tabla para exportar.","Aviso",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo de exel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        if(chooser.showSaveDialog(null)== JFileChooser.APPROVE_OPTION){
            List<JTable> tb = new ArrayList<>();
            List<String> nom = new ArrayList<>();
        tb.add(tbReporte);
        nom.add("socios");
        
        String file=chooser.getSelectedFile().toString().concat(".xls");
        try{
            ExportarExel e = new ExportarExel(new File(file), tb, nom);
            if(e.export()){
                JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel.","Reportes",JOptionPane.INFORMATION_MESSAGE);
            }
        }catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Hubo un error"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        
        }
        
        }

}
//private HSSFWorkbook libro = new HSSFWorkbook();
public void generar(JTable table) {
        HSSFWorkbook libro = new HSSFWorkbook();
        HSSFSheet hoja = libro.createSheet("Reporte");
             HSSFRow trow = hoja.createRow((short) 0);
         //  createTituloCell(libro, trow, 0, CellStyle.ALIGN_CENTER,CellStyle.VERTICAL_CENTER, "Titulo del Excel");

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo de exel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        //////////
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String file = chooser.getSelectedFile().toString().concat(".xls");
            ///////////////////////
            HSSFFont fuente = libro.createFont();
            HSSFFont fuente2 = libro.createFont();
fuente.setFontHeightInPoints((short)8);         
fuente.setFontName(HSSFFont.FONT_ARIAL);
fuente.setColor(IndexedColors.WHITE.getIndex());
fuente.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
///////////
fuente2.setFontHeightInPoints((short)7);         
fuente2.setFontName(HSSFFont.FONT_ARIAL);
fuente2.setColor(IndexedColors.BLACK.getIndex());

///////////////////
HSSFCellStyle estiloCelda = libro.createCellStyle();
HSSFCellStyle estiloCelda2 = libro.createCellStyle();

estiloCelda.setWrapText(true);
estiloCelda.setAlignment(HSSFCellStyle. ALIGN_CENTER);
estiloCelda.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
estiloCelda.setFont(fuente);
/////////////////////
estiloCelda2.setWrapText(true);
estiloCelda2.setAlignment(HSSFCellStyle. ALIGN_LEFT);
estiloCelda2.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
estiloCelda2.setFont(fuente2);
//////////////////
// También, podemos establecer bordes...
estiloCelda.setBorderBottom(HSSFCellStyle.BORDER_THIN);
estiloCelda.setBottomBorderColor((short)8);
estiloCelda.setBorderLeft(HSSFCellStyle.BORDER_THIN);
estiloCelda.setLeftBorderColor((short)8);
estiloCelda.setBorderRight(HSSFCellStyle.BORDER_THIN);
estiloCelda.setRightBorderColor((short)8);
estiloCelda.setBorderTop(HSSFCellStyle.BORDER_THIN);
estiloCelda.setTopBorderColor((short)8);
//////////
estiloCelda2.setBorderBottom(HSSFCellStyle.BORDER_THIN);
estiloCelda2.setBottomBorderColor((short)8);
estiloCelda2.setBorderLeft(HSSFCellStyle.BORDER_THIN);
estiloCelda2.setLeftBorderColor((short)8);
estiloCelda2.setBorderRight(HSSFCellStyle.BORDER_THIN);
estiloCelda2.setRightBorderColor((short)8);
estiloCelda2.setBorderTop(HSSFCellStyle.BORDER_THIN);
estiloCelda2.setTopBorderColor((short)8);
///////////////////////
estiloCelda.setFillForegroundColor(IndexedColors.DARK_BLUE.getIndex());
estiloCelda.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);

///////////////////////////////
           for (int i = 0; i < table.getRowCount() ; i++) {
                
               if (i == 0) {
                   HSSFRow fila = hoja.createRow(i);
                 for (int j = 0; j < table.getColumnCount() ; j++) {
                        HSSFCell celda = fila.createCell(j);
                        celda.setCellValue(new HSSFRichTextString(table.getColumnModel().getColumn(j).getHeaderValue().toString().toUpperCase()));
                       celda.setCellStyle(estiloCelda);
                      
                        
                   }
              } //else {
                    HSSFRow fila = hoja.createRow(i+1);
                    for (int j = 0; j < table.getColumnCount() ; j++) {
                        HSSFCell celda = fila.createCell(j);
                         
                        if (table.getValueAt(i, j) != null) {
                           
                            celda.setCellValue(new HSSFRichTextString(table.getValueAt(i, j).toString()));
                            hoja.autoSizeColumn(j);
                            celda.setCellStyle(estiloCelda2);
                            
                   // }
                 }      
                
               }
                try {
                    try (FileOutputStream elFichero = new FileOutputStream(file)) {
                        libro.write(elFichero);
                    }
                } catch (IOException e) {
                }
            }
 }

}
private static void createTituloCell(HSSFWorkbook wb, HSSFRow row, int column, short halign, short valign,String strContenido) {

     CreationHelper ch = wb.getCreationHelper();
        Cell cell = row.createCell(column);
        cell.setCellValue(ch.createRichTextString(strContenido));
       
        HSSFFont cellFont = wb.createFont();
        cellFont.setFontHeightInPoints((short)11);
        cellFont.setFontName(HSSFFont.FONT_ARIAL);
        cellFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
       
        CellStyle cellStyle = wb.createCellStyle();
        cellStyle.setAlignment(halign);
        cellStyle.setVerticalAlignment(valign);
        cellStyle.setFont(cellFont);
        cell.setCellStyle(cellStyle);
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exportar;
    private com.toedter.calendar.JDateChooser F_final;
    private com.toedter.calendar.JDateChooser F_inicio;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnObrainsa;
    private javax.swing.JButton btnPoderosa;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkAnexo2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbContrata;
    private javax.swing.JRadioButton rbEmpresa;
    private javax.swing.JTable tbReporte;
    private javax.swing.JTextField txtEmpresa;
    // End of variables declaration//GEN-END:variables

 public JTable autoResizeColWidth(JTable table, DefaultTableModel model) {
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    table.setModel(model);

    int margin = 5;

    for (int i = 0; i < table.getColumnCount(); i++) {
        int                     vColIndex = i;
        DefaultTableColumnModel colModel  = (DefaultTableColumnModel) table.getColumnModel();
        TableColumn             col       = colModel.getColumn(vColIndex);
        int                     width     = 0;

        // Get width of column header
        TableCellRenderer renderer = col.getHeaderRenderer();

        if (renderer == null) {
            renderer = table.getTableHeader().getDefaultRenderer();
        }

        Component comp = renderer.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);

        width = comp.getPreferredSize().width;

        // Get maximum width of column data
        for (int r = 0; r < table.getRowCount(); r++) {
            renderer = table.getCellRenderer(r, vColIndex);
            comp     = renderer.getTableCellRendererComponent(table, table.getValueAt(r, vColIndex), false, false,
                    r, vColIndex);
            width = Math.max(width, comp.getPreferredSize().width);
        }
        // Add margin
        width += 2 * margin;

        // Set the width
        col.setPreferredWidth(width);
    }
    ((DefaultTableCellRenderer) table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.LEFT);
    // table.setAutoCreateRowSorter(true);
    table.getTableHeader().setReorderingAllowed(false);

    return table;
} 
    private void stracon(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT n.n_orden AS N°, \n" +
"	CASE WHEN n.razon_empresa !='' THEN '...' END  as CONDICION,\n" +
"        fecha_apertura_po AS FECHADIGITACION,  n.razon_empresa AS EMPRESA,n.razon_contrata,     \n" +
"        d.apellidos_pa AS APELLIDOS,nombres_pa AS NOMBRES,d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"        obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD,\n" +
"        CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS SEXO,\n" +
"	d.cod_pa AS DNI_CARNETEXT,n.cargo_de AS PUESTO,d.cel_pa as FONOCONTACTO,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'HORIZONTE MEDIC' END  AS ESTABLECIMIENTO,\n" +
"	n.nom_examen AS TIPODEEMO,fecha_apertura_po AS FECHADEEVALUACIÓN,ca.fecha_hasta AS VIGENCIAHASTA,\n" +
"	au.o_d_500,au.o_d_1000,au.o_d_2000, au.o_d_3000, au.o_d_4000, \n" +
"	au.o_d_6000, au.o_d_8000, \n" +
"	CASE WHEN n.n_orden is not null THEN '...' END PROMEDIO_OD,\n" +
"	au.o_i_500, au.o_i_1000,au.o_i_2000, au.o_i_3000, au.o_i_4000,\n" +
"	au.o_i_6000, au.o_i_8000,\n" +
"	CASE WHEN n.n_orden is not null THEN '...' END PROMEDIO_OI,\n" +
"	au.o_d1_500,au.o_d1_1000,au.o_d1_2000,au.o_d1_3000,au.o_d1_4000,au.o_d1_6000 ,au.o_d1_8000,\n" +
"	au.o_i1_500,au.o_i1_1000,au.o_i1_2000,au.o_i1_3000,au.o_i1_4000,au.o_i1_6000,au.o_i1_8000,\n" +
"        au.diagnostico AS CONCLUSION,a.txtdiagnosticoaudio as DESCRIPCION,\n" +
"        rt.txtconclusionesradiograficas, rt.txtobservacionesrt as descripcion,\n" +
"	f.fvc,f.fev1, f.fev1fvc,a.txtconclusion,\n" +
"	CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"	CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"	CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"	CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"	     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'NORMAL'\n" +
"	     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBREPESO'   \n" +
"	     WHEN t.imc > '29.9' AND t.imc < '35' THEN 'OBESIDAD I'\n" +
"	     WHEN t.imc > '34.9' AND t.imc < '40' THEN 'OBESIDAD II'\n" +
"	     WHEN t.imc > '39.9' THEN 'OBESIDAD'\n" +
"	     WHEN t.imc is null THEN 'SIN FICHA 7C'\n" +
"	     END  AS R_IMC,\n" +
"	o.v_lejos_s_od AS Lejos_OD,\n" +
"	o.v_lejos_s_oi AS Lejos_OI,\n" +
"	CASE WHEN o.v_lejos_c_od ='00' THEN ol.v_lejos_c_od ELSE o.v_lejos_c_od END \n" +
"	AS Lejos_Corregida_OD,\n" +
"	CASE WHEN o.v_lejos_c_oi ='00' THEN ol.v_lejos_c_oi ELSE o.v_lejos_c_oi END\n" +
"	AS Lejos_Corregida_OI,\n" +
"	CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END ,\n" +
"	CASE WHEN ol.e_oculares1 IS NULL THEN o.e_oculares1 ELSE ol.e_oculares1  END,\n" +
"	o.v_colores ,CASE WHEN n.n_orden is not null THEN '...' END  AS DESCRIPCION_VC,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  AS VISION_PROFUNDIDAD,\n" +
"	CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS Hemoglobina ,\n" +
"	CASE WHEN lc.txthemoglobina < '14' or lc.txthemoglobina > '20' THEN 'ANORMAL' \n" +
"	     WHEN lc.txthemoglobina >= '14' AND lc.txthemoglobina <='20' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HEMOGLOBINA ,\n" +
"	CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS Glucosa,\n" +
"	CASE WHEN lc.txtglucosabio = 'N/A' OR lc.txtglucosabio = ''OR lc.txtglucosabio = '-'OR lc.txtglucosabio = '.' or lc.txtglucosabio is null THEN 'N/A'\n" +
"             WHEN lc.txtglucosabio::decimal <'70' or lc.txtglucosabio::decimal >'110' THEN 'ANORMAL' \n" +
"             WHEN lc.txtglucosabio::decimal >='70' AND lc.txtglucosabio::decimal<='110' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_GLUCOSA  ,\n" +
"	CASE WHEN ab.txtcolesterol IS NOT NULL THEN ab.txtcolesterol ELSE '...'\n" +
"	     END  AS Colesterol,   \n" +
"	CASE WHEN ab.txtcolesterol= '' or ab.txtcolesterol= '-' or ab.txtldlcolesterol= '.' or ab.txtcolesterol= 'N/A' or ab.txtcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtcolesterol::decimal < '200' THEN 'NORMAL' \n" +
"	     WHEN ab.txtcolesterol::decimal >= '200'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_COLESTEROL,    \n" +
"	CASE WHEN ab.txtldlcolesterol IS NOT NULL THEN ab.txtldlcolesterol ELSE '...'\n" +
"	     END  AS LDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtldlcolesterol= '' or ab.txtldlcolesterol= '-' or ab.txtldlcolesterol= '.'or ab.txtldlcolesterol= 'N/A' or ab.txtldlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtldlcolesterol::decimal < '129' THEN 'NORMAL' \n" +
"	     WHEN ab.txtldlcolesterol::decimal >= '129'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_LDL_COLESTEROL,     \n" +
"	CASE WHEN ab.txthdlcolesterol IS NOT NULL THEN ab.txthdlcolesterol ELSE '...'\n" +
"	     END  AS HDL_Colesterol,   \n" +
"	CASE WHEN ab.txthdlcolesterol= '' or ab.txthdlcolesterol= '-' or ab.txthdlcolesterol= '.'or ab.txthdlcolesterol= 'N/A' or ab.txthdlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txthdlcolesterol::decimal < '40' or ab.txthdlcolesterol::decimal > '60'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txthdlcolesterol::decimal >= '40' AND ab.txthdlcolesterol::decimal<='60'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtvldlcolesterol IS NOT NULL THEN ab.txtvldlcolesterol ELSE '...'\n" +
"	     END  AS VLDL_Colesterol,   \n" +
"	CASE WHEN ab.txtvldlcolesterol= '' or ab.txtvldlcolesterol= '-' or ab.txtvldlcolesterol= '.'or ab.txtvldlcolesterol= 'N/A' or ab.txtvldlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtvldlcolesterol::decimal < '30' THEN 'NORMAL' \n" +
"	     WHEN ab.txtvldlcolesterol::decimal >= '30'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_VLDL_COLESTEROL, \n" +
"	CASE WHEN ab.txttrigliseridos IS NOT NULL THEN ab.txttrigliseridos ELSE '...'\n" +
"	    END  AS trigliceridos, \n" +
"	CASE WHEN ab.txttrigliseridos= '' or ab.txttrigliseridos= '-' or ab.txttrigliseridos= '.'or ab.txttrigliseridos= 'N/A' or ab.txttrigliseridos IS NULL THEN 'N/A'\n" +
"	     WHEN ab.txttrigliseridos::decimal < '150' THEN 'NORMAL' \n" +
"	     WHEN ab.txttrigliseridos::decimal >= '150'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_TRIGLISERIDOS,     \n" +
"	CASE WHEN ab.txtcreatinina IS NOT NULL THEN ab.txtcreatinina ELSE '...'\n" +
"	    END  AS Creatinina, \n" +
"	CASE WHEN ab.txtcreatinina= '' or ab.txtcreatinina= '-' or ab.txtcreatinina= '.'or ab.txtcreatinina= 'N/A' or ab.txtcreatinina IS NULL THEN 'N/A'\n" +
"	     WHEN ab.txtcreatinina::decimal < '0.8' or ab.txtcreatinina::decimal > '1.4'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txtcreatinina::decimal >= '0.8' AND ab.txtcreatinina::decimal <='1.4'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_CREATININA,  \n" +
"	CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"	CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"	CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"	CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"	CASE WHEN t.sistolica < '120' THEN 'NORMAL' \n" +
"	     WHEN t.sistolica > '119.9' AND t.sistolica < '140' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.sistolica >= '140' AND t.sistolica <'160' THEN 'HTA-1' \n" +
"	     WHEN t.sistolica <= '99'  THEN 'NORMAL' \n" +
"	     WHEN t.sistolica >= '160' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'   \n" +
"	     END AS R_SIST,\n" +
"	CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
"	CASE WHEN t.diastolica ='100' THEN 'HTA-2'\n" +
"	     WHEN t.diastolica <'80' THEN 'NORMAL'\n" +
"	     WHEN t.diastolica >'79.9' AND t.diastolica < '90' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.diastolica >='90' AND t.diastolica < '100' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >='90' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >'100' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'  \n" +
"	     END AS R_DIAST,\n" +
"	     \n" +
"        CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS FC,\n" +
"	CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS FR,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as PLOMO_SANGRE,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as CADMIO_ORINA,	\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as TIOCINATOS_ORINA,\n" +
"        ie.hallazgo AS EKG_RESULTADO,ie.recomendaciones AS EKG_OBS,\n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS ResultadodeEvaluaciones,            \n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| \n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS Grupoyfactor,\n" +
"	CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as ALERGIAS,\n" +
"	CASE WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_TRAB_ALTURA,	\n" +
"	CASE WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             END AS APTITUD_MANEJO,	\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ac.apto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ad.apto = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ac.no_apto = 'TRUE' THEN 'No Apto' \n" +
"             WHEN ad.no_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"	     WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END as APTITUD_OCUP,\n" +
"	ca.atxtrestricciones AS RESTRICCIONES,\n" +
"	ca.nom_medico,\n" +
"	oi.txt_s_comentarios,\n" +
"	ip.a_intelectual,ip.a_personalidad,ip.recomendaciones\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia_lo AS ol ON (ol.n_orden = n.n_orden)\n" +
"LEFT JOIN audiometria_po AS au ON (au.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) \n" +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)\n" +
"LEFT JOIN ex_radiograficos_sanguineos AS er ON (er.n_orden = n.n_orden)\n" +
"LEFT JOIN radiografia_torax AS rt ON (rt.n_orden = n.n_orden)\n" +
"LEFT JOIN oit AS oi ON (oi.n_orden = n.n_orden)\n" +
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)\n" +
"LEFT JOIN analisis_bioquimicos AS ab ON(ab.n_orden = n.n_orden)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join anexo7d as ad ON (ad.n_orden=n.n_orden)\n" +
"left join anexoc as ac ON (ac.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden)\n" +
"Left join informe_psicologico as ip ON (ip.n_orden=n.n_orden)  "
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql); 
        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void stracon1(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT n.n_orden AS N°, \n" +
"	CASE WHEN n.razon_empresa !='' THEN '...' END  as CONDICION,\n" +
"        fecha_apertura_po AS FECHADIGITACION,  n.razon_empresa AS EMPRESA,n.razon_contrata,     \n" +
"        d.apellidos_pa AS APELLIDOS,nombres_pa AS NOMBRES,d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"        obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD,\n" +
"        CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS SEXO,\n" +
"	d.cod_pa AS DNI_CARNETEXT,n.cargo_de AS PUESTO,d.cel_pa as FONOCONTACTO,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'HORIZONTE MEDIC' END  AS ESTABLECIMIENTO,\n" +
"	n.nom_examen AS TIPODEEMO,fecha_apertura_po AS FECHADEEVALUACIÓN,ca.fecha_hasta AS VIGENCIAHASTA,\n" +
"	au.o_d_500,au.o_d_1000,au.o_d_2000, au.o_d_3000, au.o_d_4000, \n" +
"	au.o_d_6000, au.o_d_8000, \n" +
"	CASE WHEN n.n_orden is not null THEN '...' END PROMEDIO_OD,\n" +
"	au.o_i_500, au.o_i_1000,au.o_i_2000, au.o_i_3000, au.o_i_4000,\n" +
"	au.o_i_6000, au.o_i_8000,\n" +
"	CASE WHEN n.n_orden is not null THEN '...' END PROMEDIO_OI,\n" +
"	au.o_d1_500,au.o_d1_1000,au.o_d1_2000,au.o_d1_3000,au.o_d1_4000,au.o_d1_6000 ,au.o_d1_8000,\n" +
"	au.o_i1_500,au.o_i1_1000,au.o_i1_2000,au.o_i1_3000,au.o_i1_4000,au.o_i1_6000,au.o_i1_8000,\n" +
"        au.diagnostico AS CONCLUSION,au.diagnostico as DESCRIPCION,\n" +
"        rt.txtconclusionesradiograficas, rt.txtobservacionesrt as descripcion,\n" +
"	f.fvc,f.fev1, f.fev1fvc,a.txtconclusion,\n" +
"	CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"	CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"	CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"	CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"	     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'NORMAL'\n" +
"	     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBREPESO'   \n" +
"	     WHEN t.imc > '29.9' AND t.imc < '35' THEN 'OBESIDAD I'\n" +
"	     WHEN t.imc > '34.9' AND t.imc < '40' THEN 'OBESIDAD II'\n" +
"	     WHEN t.imc > '39.9' THEN 'OBESIDAD'\n" +
"	     WHEN t.imc is null THEN 'SIN FICHA 7C'\n" +
"	     END  AS R_IMC,\n" +
"	o.v_lejos_s_od AS Lejos_OD,\n" +
"	o.v_lejos_s_oi AS Lejos_OI,\n" +
"	CASE WHEN o.v_lejos_c_od ='00' THEN ol.v_lejos_c_od ELSE o.v_lejos_c_od END \n" +
"	AS Lejos_Corregida_OD,\n" +
"	CASE WHEN o.v_lejos_c_oi ='00' THEN ol.v_lejos_c_oi ELSE o.v_lejos_c_oi END\n" +
"	AS Lejos_Corregida_OI,\n" +
"	CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END ,\n" +
"	CASE WHEN ol.e_oculares1 IS NULL THEN o.e_oculares1 ELSE ol.e_oculares1  END,\n" +
"	o.v_colores ,CASE WHEN n.n_orden is not null THEN '...' END  AS DESCRIPCION_VC,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  AS VISION_PROFUNDIDAD,\n" +
"	CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS Hemoglobina ,\n" +
"	CASE WHEN lc.txthemoglobina < '14' or lc.txthemoglobina > '20' THEN 'ANORMAL' \n" +
"	     WHEN lc.txthemoglobina >= '14' AND lc.txthemoglobina <='20' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HEMOGLOBINA ,\n" +
"	CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS Glucosa,\n" +
"	CASE WHEN lc.txtglucosabio = 'N/A' OR lc.txtglucosabio = ''OR lc.txtglucosabio = '-'OR lc.txtglucosabio = '.' or lc.txtglucosabio is null THEN 'N/A'\n" +
"             WHEN lc.txtglucosabio::decimal <'70' or lc.txtglucosabio::decimal >'110' THEN 'ANORMAL' \n" +
"             WHEN lc.txtglucosabio::decimal >='70' AND lc.txtglucosabio::decimal<='110' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_GLUCOSA  ,\n" +
"	CASE WHEN ab.txtcolesterol IS NOT NULL THEN ab.txtcolesterol ELSE '...'\n" +
"	     END  AS Colesterol,   \n" +
"	CASE WHEN ab.txtcolesterol= '' or ab.txtcolesterol= '-' or ab.txtldlcolesterol= '.' or ab.txtcolesterol= 'N/A' or ab.txtcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtcolesterol::decimal < '200' THEN 'NORMAL' \n" +
"	     WHEN ab.txtcolesterol::decimal >= '200'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_COLESTEROL,    \n" +
"	CASE WHEN ab.txtldlcolesterol IS NOT NULL THEN ab.txtldlcolesterol ELSE '...'\n" +
"	     END  AS LDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtldlcolesterol= '' or ab.txtldlcolesterol= '-' or ab.txtldlcolesterol= '.'or ab.txtldlcolesterol= 'N/A' or ab.txtldlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtldlcolesterol::decimal < '129' THEN 'NORMAL' \n" +
"	     WHEN ab.txtldlcolesterol::decimal >= '129'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_LDL_COLESTEROL,     \n" +
"	CASE WHEN ab.txthdlcolesterol IS NOT NULL THEN ab.txthdlcolesterol ELSE '...'\n" +
"	     END  AS HDL_Colesterol,   \n" +
"	CASE WHEN ab.txthdlcolesterol= '' or ab.txthdlcolesterol= '-' or ab.txthdlcolesterol= '.'or ab.txthdlcolesterol= 'N/A' or ab.txthdlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txthdlcolesterol::decimal < '40' or ab.txthdlcolesterol::decimal > '60'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txthdlcolesterol::decimal >= '40' AND ab.txthdlcolesterol::decimal<='60'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtvldlcolesterol IS NOT NULL THEN ab.txtvldlcolesterol ELSE '...'\n" +
"	     END  AS VLDL_Colesterol,   \n" +
"	CASE WHEN ab.txtvldlcolesterol= '' or ab.txtvldlcolesterol= '-' or ab.txtvldlcolesterol= '.'or ab.txtvldlcolesterol= 'N/A' or ab.txtvldlcolesterol IS NULL THEN 'N/A' \n" +
"	     WHEN ab.txtvldlcolesterol::decimal < '30' THEN 'NORMAL' \n" +
"	     WHEN ab.txtvldlcolesterol::decimal >= '30'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_VLDL_COLESTEROL, \n" +
"	CASE WHEN ab.txttrigliseridos IS NOT NULL THEN ab.txttrigliseridos ELSE '...'\n" +
"	    END  AS trigliceridos, \n" +
"	CASE WHEN ab.txttrigliseridos= '' or ab.txttrigliseridos= '-' or ab.txttrigliseridos= '.'or ab.txttrigliseridos= 'N/A' or ab.txttrigliseridos IS NULL THEN 'N/A'\n" +
"	     WHEN ab.txttrigliseridos::decimal < '150' THEN 'NORMAL' \n" +
"	     WHEN ab.txttrigliseridos::decimal >= '150'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_TRIGLISERIDOS,     \n" +
"	CASE WHEN ab.txtcreatinina IS NOT NULL THEN ab.txtcreatinina ELSE '...'\n" +
"	    END  AS Creatinina, \n" +
"	CASE WHEN ab.txtcreatinina= '' or ab.txtcreatinina= '-' or ab.txtcreatinina= '.'or ab.txtcreatinina= 'N/A' or ab.txtcreatinina IS NULL THEN 'N/A'\n" +
"	     WHEN ab.txtcreatinina::decimal < '0.8' or ab.txtcreatinina::decimal > '1.4'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txtcreatinina::decimal >= '0.8' AND ab.txtcreatinina::decimal <='1.4'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_CREATININA,    \n" +
"	CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"	CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"	CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"	CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"	CASE WHEN t.sistolica < '120' THEN 'NORMAL' \n" +
"	     WHEN t.sistolica > '119.9' AND t.sistolica < '140' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.sistolica >= '140' AND t.sistolica <'160' THEN 'HTA-1' \n" +
"	     WHEN t.sistolica <= '99'  THEN 'NORMAL' \n" +
"	     WHEN t.sistolica >= '160' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'   \n" +
"	     END AS R_SIST,\n" +
"	     \n" +
"	CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
"	CASE WHEN t.diastolica ='100' THEN 'HTA-2'\n" +
"	     WHEN t.diastolica <'80' THEN 'NORMAL'\n" +
"	     WHEN t.diastolica >'79.9' AND t.diastolica < '90' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.diastolica >='90' AND t.diastolica < '100' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >='90' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >'100' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'  \n" +
"	     END AS R_DIAST,\n" +
"	     \n" +
"        CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS FC,\n" +
"	CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS FR,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as PLOMO_SANGRE,\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as CADMIO_ORINA,	\n" +
"	CASE WHEN n.razon_empresa !='' THEN 'N/A' END  as TIOCINATOS_ORINA,\n" +
"        ie.hallazgo AS EKG_RESULTADO,ie.recomendaciones AS EKG_OBS,\n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS ResultadodeEvaluaciones,            \n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| \n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS Grupoyfactor,\n" +
"	CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as ALERGIAS,\n" +
"	CASE WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_TRAB_ALTURA,	\n" +
"	CASE WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             END AS APTITUD_MANEJO,	\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ac.apto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ad.apto = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ac.no_apto = 'TRUE' THEN 'No Apto' \n" +
"             WHEN ad.no_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"	     WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END as APTITUD_OCUP,\n" +
"	ca.nom_medico,\n" +
"	oi.txt_s_comentarios,\n" +
"	ip.a_intelectual,ip.a_personalidad,ip.recomendaciones, "+
           "CASE WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_MÉDICA,"
                + "ca.txtconclusiones AS CONCLUSIONESAPTITUD,"
                + "ca.txtrecomendaciones AS RECOMENDACIONESAPTITUD, ca.atxtrestricciones AS RESTRICCIONESAPTITUD \n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia_lo AS ol ON (ol.n_orden = n.n_orden)\n" +
"LEFT JOIN audiometria_po AS au ON (au.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) \n" +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)\n" +
"LEFT JOIN ex_radiograficos_sanguineos AS er ON (er.n_orden = n.n_orden)\n" +
"LEFT JOIN radiografia_torax AS rt ON (rt.n_orden = n.n_orden)\n" +
"LEFT JOIN oit AS oi ON (oi.n_orden = n.n_orden)\n" +
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)\n" +
"LEFT JOIN analisis_bioquimicos AS ab ON(ab.n_orden = n.n_orden)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo_agroindustrial as a ON (a.n_orden=n.n_orden)\n" +
"left join aptitud_medico_ocupacional_agro as ca ON (ca.n_orden=n.n_orden)\n" +
"left join anexo7d as ad ON (ad.n_orden=n.n_orden)\n" +
"left join anexoc as ac ON (ac.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden)\n" +
"Left join informe_psicologico as ip ON (ip.n_orden=n.n_orden) "
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql);      
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void obrainsa(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT n.n_orden AS N°, CASE WHEN n.razon_empresa !='' THEN 'HORIZONTE MEDIC' END  AS ESTABLECIMIENTO,\n" +
"	n.razon_empresa AS EMPRESA,CASE WHEN n.razon_empresa !='' THEN 'SAUSACOCHA' END  AS UNIDAD,d.apellidos_pa||', '||nombres_pa AS NOMBRES,\n" +
"	obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD, CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS SEXO,\n" +
"	d.cod_pa AS DNI,d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"	d.nivel_est_pa AS \"GRADO INST\",n.cargo_de AS PUESTO,n.nom_ex as ZONA,\n" +
"	n.area_o AS AREA,fecha_apertura_po AS FECHADEEVALUACIÓN,n.nom_examen AS TIPODEEMO,\n" +
"	CASE  WHEN ob.n_orden is not null THEN 'Observado'\n" +
"               WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"               WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"               WHEN ac.apto = 'TRUE' THEN 'Apto'\n" +
"               WHEN ad.apto = 'TRUE' THEN 'Apto'\n" +
"               WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"               WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"               WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"               WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"               WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"               WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'  \n" +
"               WHEN ac.no_apto = 'TRUE' THEN 'No Apto' \n" +
"               WHEN ad.no_apto = 'TRUE' THEN 'No Apto'\n" +
"               WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"               WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"	       WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"               WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END as RESULTADO,\n" +
"        CASE WHEN a.chktnada ='TRUE' THEN 'NADA'\n" +
"	     WHEN a.chktpoco ='TRUE' THEN 'POCO'\n" +
"	     WHEN a.chkthabitual ='TRUE' THEN 'HABITUAL'\n" +
"	     WHEN a.chktexcesivo ='TRUE' THEN 'EXCESIVO' END FUMAR,\n" +
"        CASE WHEN a.chkanada ='TRUE' THEN 'NADA'\n" +
"	     WHEN a.chkapoco ='TRUE' THEN 'POCO'\n" +
"	     WHEN a.chkahabitual ='TRUE' THEN 'HABITUAL'\n" +
"	     WHEN a.chkaexcesivo ='TRUE' THEN 'EXCESIVO' END LICOR,\n" +
"	CASE WHEN a.chkdnada ='TRUE' THEN 'NADA'\n" +
"	     WHEN a.chkdpoco ='TRUE' THEN 'POCO'\n" +
"	     WHEN a.chkdhabitual ='TRUE' THEN 'HABITUAL'\n" +
"	     WHEN a.chkdexcesivo ='TRUE' THEN 'EXCESIVO' END DROGAS,\n" +
"	CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"	CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"	CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"	CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"	     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'NORMAL'\n" +
"	     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBREPESO'   \n" +
"	     WHEN t.imc > '29.9' AND t.imc < '35' THEN 'OBESIDAD I'\n" +
"	     WHEN t.imc > '34.9' AND t.imc < '40' THEN 'OBESIDAD II'\n" +
"	     WHEN t.imc > '39.9' THEN 'OBESIDAD'\n" +
"	     WHEN t.imc is null THEN 'SIN FICHA 7C'\n" +
"	     END  AS \"R-IMC\",\n" +
"	CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"	CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"	CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"	CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"	CASE WHEN t.sistolica < '120' THEN 'NORMAL' \n" +
"	     WHEN t.sistolica > '119.9' AND t.sistolica < '140' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.sistolica  >= '140' AND t.sistolica <'160' THEN 'HTA-1' \n" +
"	     WHEN t.sistolica  <= '99'  THEN 'NORMAL' \n" +
"	     WHEN t.sistolica >= '160' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'   \n" +
"	     END AS \"R-SIST\",\n" +
"	CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
"	CASE WHEN t.diastolica ='100' THEN 'HTA-2'\n" +
"	     WHEN t.diastolica <'80' THEN 'NORMAL' \n" +
"	     WHEN t.diastolica >'79.9' AND t.diastolica < '90' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.diastolica >='90' AND t.diastolica < '100' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >='90' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >'100' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'   \n" +
"	     END AS \"R-DIAST\",\n" +
"        CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS FC,\n" +
"	CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS FR,\n" +
"	o.v_cerca_s_od AS \"Cerca OD\",\n" +
"	o.v_lejos_s_od AS \"Lejos OD\",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"RESULTADO OD LEJOS\",\n" +
"	o.v_cerca_s_oi AS \"Cerca OI\",\n" +
"	o.v_lejos_s_oi AS \"Lejos OI\",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"RESULTADO OI LEJOS\",\n" +
"	CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END ,\n" +
"	CASE WHEN ol.e_oculares1 IS NULL THEN o.e_oculares1 ELSE ol.e_oculares1  END,\n" +
"	CASE WHEN o.v_cerca_c_od ='00' THEN ol.v_cerca_c_od ELSE o.v_cerca_c_od END \n" +
"	AS \"Cerca Corregida OD\",\n" +
"	CASE WHEN o.v_lejos_c_od ='00' THEN ol.v_lejos_c_od ELSE o.v_lejos_c_od END \n" +
"	AS \"Lejos Corregida OD\",\n" +
"	CASE WHEN o.v_cerca_c_oi ='00' THEN ol.v_cerca_c_oi ELSE o.v_cerca_c_oi END\n" +
"	AS \"Cerca Corregida OI\",\n" +
"	CASE WHEN o.v_lejos_c_oi ='00' THEN ol.v_lejos_c_oi ELSE o.v_lejos_c_oi END\n" +
"	 AS \"Lejos Corregida OI\",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"REFRA OD \",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"REFRA OI \",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"ADD AO \",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"DIP AO \",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"PIO OD \",\n" +
"	CASE WHEN n.n_orden is not null THEN '' END \"PIO OI \",\n" +
"        o.v_colores as DISCRO,CASE WHEN n.n_orden is not null THEN 'N/A' END  AS ESTEREO,\n" +
"        f.fev1_teorico,f.fvc_teorico,a.txtconclusion,\n" +
"        CASE WHEN a.txtod IS NULL THEN '...' ELSE a.txtod END AS \"Otoscopía OD\",\n" +
"        CASE WHEN a.txtoi IS NULL THEN '...' ELSE a.txtoi END AS \"Otoscopía OI\",\n" +
"        CASE WHEN n.n_orden is not null THEN 'N/A' END O_D_125,\n" +
"        CASE WHEN n.n_orden is not null THEN 'N/A' END O_D_250,\n" +
"	au.o_d_500, CASE WHEN n.n_orden is not null THEN 'N/A' END O_D_750,\n" +
"	au.o_d_1000, CASE WHEN n.n_orden is not null THEN 'N/A' END O_D_1500,\n" +
"	au.o_d_2000, au.o_d_3000, au.o_d_4000, au.o_d_6000, au.o_d_8000, \n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END O_I_125,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END O_I_250,\n" +
"	au.o_i_500, CASE WHEN n.n_orden is not null THEN 'N/A' END O_I_750,\n" +
"	au.o_i_1000,CASE WHEN n.n_orden is not null THEN 'N/A' END O_I_1500,\n" +
"        au.o_i_2000, au.o_i_3000, au.o_i_4000, au.o_i_6000, au.o_i_8000,"
       + " CASE WHEN a.txtdiagnosticoaudio is null THEN au.diagnostico ELSE a.txtdiagnosticoaudio END RESULTADOAUDIOMETRIA,\n" +
"        ie.hallazgo AS \"EKG RESULTADO\",ie.recomendaciones AS \"EKG OBS\",\n" +
"	CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS Hemoglobina ,\n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| \n" +
"	CASE WHEN lc.rbrhpositivo ='TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS Grupoyfactor  , \n" +
"	CASE WHEN ab.txtcolesterol IS NOT NULL THEN ab.txtcolesterol ELSE '...'\n" +
"	     END  AS Colesterol,    \n" +
"	CASE WHEN ab.txttrigliseridos IS NOT NULL THEN ab.txttrigliseridos ELSE '...'\n" +
"	    END  AS trigliceridos, \n" +
"	CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS Glucosa , \n" +
"	er.txtcalidad,er.txtsimbolos,rt.txtconclusionesradiograficas,\n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS ResultadodeEvaluaciones,             \n" +
"	ca.atxtrestricciones AS RESTRICCIONES, \n" +
"	oi.txt_s_comentarios,f.fev1,f.fvc, a.txtconclusion           \n" +
"	\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia_lo AS ol ON (ol.n_orden = n.n_orden)\n" +
"LEFT JOIN audiometria_po AS au ON (au.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) \n" +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)\n" +
"LEFT JOIN ex_radiograficos_sanguineos AS er ON (er.n_orden = n.n_orden)\n" +
"LEFT JOIN radiografia_torax AS rt ON (rt.n_orden = n.n_orden)\n" +
"LEFT JOIN oit AS oi ON (oi.n_orden = n.n_orden)\n" +
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)\n" +
"LEFT JOIN analisis_bioquimicos AS ab ON(ab.n_orden = n.n_orden)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)   \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join anexo7d as ad ON (ad.n_orden=n.n_orden)\n" +
"left join anexoc as ac ON (ac.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden) "
                + "WHERE ";
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
                
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql); 
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void poderosa(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT n.n_orden AS N° ,d.apellidos_pa||', '||nombres_pa AS NOMBRES, \n" +
"       d.cod_pa AS DNI,obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD,\n" +
"       n.razon_empresa,n.razon_contrata,n.nom_examen as Tipo_examen, n.cargo_de,d.provincia_pa,d.departamento_pa,\n" +
"       fecha_apertura_po AS FECHAEVALUACION, \n" +
"       CASE WHEN ca.n_orden is NOT null THEN ca.fecha end FECHAAPTITUD,\n" +
"       CASE  WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto' END as CONDICION,\n" +
"             ca.atxtrestricciones RESTRICCIONES,\n" +
"        CASE WHEN n.n_orden is not null THEN 'HORIZ0NTE MEDIC' END  AS ESTABLECIMIENTO, \n" +
"        CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||''|| \n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS Grupoyfactor,\n" +
"	CASE WHEN ca.n_orden IS NOT NULL THEN 'N/A' END AS OBSERVACIONES,         \n" +
"	CASE WHEN ba.n_orden is null then 'N/A'\n" +
"	     WHEN ba.chk_apto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto' end TRABAJOSENALTURA\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join certificado_altura_poderosa as ba ON (ba.n_orden=n.n_orden)    "
                + "WHERE ";
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
                
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql);  
        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
    }
    private void caraveli(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
         String vSql = "SELECT n.n_orden AS N°, CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN caa.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN caa.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN caa.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"	     WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END as CONDICION,\n" +
"        fecha_apertura_po AS FECHADIGITACION,  n.razon_empresa AS EMPRESA,n.razon_contrata,     \n" +
"        d.apellidos_pa AS APELLIDOS,nombres_pa AS NOMBRES,d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"        obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD,\n" +
"        CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS SEXO,\n" +
"        CASE WHEN d.cod_pa is null THEN '' ELSE 'DNI' END AS TIPODOC,d.cod_pa AS DNI_CARNETEXT,     \n" +
"	n.cargo_de AS PUESTO,d.cel_pa as FONOCONTACTO,\n" +
"	CASE WHEN n.n_orden is not null THEN 'HORIZONTE MEDIC' END  AS CENTROMEDICO,\n" +
"	n.nom_examen AS TIPODEEMO,\n" +
"	CASE WHEN a.fecha is not null THEN a.fecha\n" +
"             WHEN aag.fecha is not null THEN aag.fecha END as FECHAEXAMENMEDICO,\n" +
"        CASE WHEN ca.fecha_hasta is not null THEN ca.fecha_hasta \n" +
"             WHEN caa.fecha_hasta is not null THEN caa.fecha_hasta END as VIGENCIAHASTA,\n" +
"	au.o_d_500,au.o_d_1000,au.o_d_2000, au.o_d_3000, au.o_d_4000, \n" +
"	au.o_d_6000, au.o_d_8000, \n" +
"	CASE WHEN n.n_orden is not null THEN 'NA' END PROMEDIO_OD,\n" +
"	au.o_i_500, au.o_i_1000,au.o_i_2000, au.o_i_3000, au.o_i_4000,\n" +
"	au.o_i_6000, au.o_i_8000,\n" +
"	CASE WHEN n.n_orden is not null THEN 'NA' END PROMEDIO_OI,\n" +
"	au.o_d1_500,au.o_d1_1000,au.o_d1_2000,au.o_d1_3000,au.o_d1_4000,au.o_d1_6000 ,au.o_d1_8000,\n" +
"	au.o_i1_500,au.o_i1_1000,au.o_i1_2000,au.o_i1_3000,au.o_i1_4000,au.o_i1_6000,au.o_i1_8000,\n" +
"        au.diagnostico AS CONCLUSION,a.txtdiagnosticoaudio as DESCRIPCION,\n" +
"        rt.txtconclusionesradiograficas, rt.txtobservacionesrt as descripcion,\n" +
"	f.fvc,f.fev1, f.fev1fvc,a.txtconclusion,\n" +
"	CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"	CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"	CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"	CASE WHEN t.imc < '18.5' THEN 'PESO BAJO'\n" +
"	     WHEN t.imc > '18.4' AND t.imc < '25'  THEN 'NORMAL'\n" +
"	     WHEN t.imc > '24.9' AND t.imc < '30'  THEN 'SOBREPESO'   \n" +
"	     WHEN t.imc > '29.9' AND t.imc < '35' THEN 'OBESIDAD I'\n" +
"	     WHEN t.imc > '34.9' AND t.imc < '40' THEN 'OBESIDAD II'\n" +
"	     WHEN t.imc > '39.9' THEN 'OBESIDAD'\n" +
"	     WHEN t.imc is null THEN 'SIN FICHA 7C'\n" +
"	     END  AS CONCLUSION_IMC,\n" +
"	o.v_lejos_s_od AS Lejos_OD,\n" +
"	o.v_lejos_s_oi AS Lejos_OI,\n" +
"	CASE WHEN o.v_lejos_c_od ='00' THEN ol.v_lejos_c_od ELSE o.v_lejos_c_od END \n" +
"	AS Lejos_Corregida_OD,\n" +
"	CASE WHEN o.v_lejos_c_oi ='00' THEN ol.v_lejos_c_oi ELSE o.v_lejos_c_oi END\n" +
"	AS Lejos_Corregida_OI,\n" +
"	CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END,\n" +
"	CASE WHEN ol.e_oculares1 IS NULL THEN o.e_oculares1 ELSE ol.e_oculares1  END,\n" +
"	o.v_colores ,CASE WHEN n.n_orden is not null THEN '...' END  AS DESCRIPCION_VC,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  AS VP_CONCLUCION,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  AS VP_DESCRIPCION,\n" +
"	CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS Hemoglobina,\n" +
"	CASE WHEN lc.txthemoglobina < '14' or lc.txthemoglobina > '20' THEN 'ANORMAL' \n" +
"	     WHEN lc.txthemoglobina >= '14' AND lc.txthemoglobina <='20' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HEMOGLOBINA ,\n" +
"	CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS Glucosa ,\n" +
"	CASE WHEN lc.txtglucosabio < '70' or lc.txtglucosabio > '110' THEN 'ANORMAL' \n" +
"	     WHEN lc.txtglucosabio >= '70' AND lc.txtglucosabio <='110' THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_GLUCOSA,\n" +
"	CASE WHEN ab.txtcolesterol IS NOT NULL THEN ab.txtcolesterol ELSE '...'\n" +
"	     END  AS Colesterol,   \n" +
"	CASE WHEN ab.txtcolesterol < '200' THEN 'NORMAL' \n" +
"	     WHEN ab.txtcolesterol >= '200'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_COLESTEROL,    \n" +
"	CASE WHEN ab.txtldlcolesterol IS NOT NULL THEN ab.txtldlcolesterol ELSE '...'\n" +
"	     END  AS LDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtldlcolesterol < '129' THEN 'NORMAL' \n" +
"	     WHEN ab.txtldlcolesterol >= '129'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_LDL_COLESTEROL,     \n" +
"	CASE WHEN ab.txthdlcolesterol IS NOT NULL THEN ab.txthdlcolesterol ELSE '...'\n" +
"	     END  AS HDL_Colesterol,   \n" +
"	CASE WHEN ab.txthdlcolesterol < '40' or ab.txthdlcolesterol > '60'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txthdlcolesterol >= '40' AND ab.txthdlcolesterol <='60'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_HDL_COLESTEROL,  \n" +
"	CASE WHEN ab.txtvldlcolesterol IS NOT NULL THEN ab.txtvldlcolesterol ELSE '...'\n" +
"	     END  AS VLDL_Colesterol,   \n" +
"	CASE WHEN ab.txtvldlcolesterol < '30' THEN 'NORMAL' \n" +
"	     WHEN ab.txtvldlcolesterol >= '30'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_VLDL_COLESTEROL, \n" +
"	CASE WHEN ab.txttrigliseridos IS NOT NULL THEN ab.txttrigliseridos ELSE '...'\n" +
"	    END  AS trigliceridos, \n" +
"	CASE WHEN ab.txttrigliseridos < '150' THEN 'NORMAL' \n" +
"	     WHEN ab.txttrigliseridos >= '150'  THEN 'ANORMAL' \n" +
"	     END AS CONCLUCION_TRIGLISERIDOS,     \n" +
"	CASE WHEN ab.txtcreatinina IS NOT NULL THEN ab.txtcreatinina ELSE '...'\n" +
"	    END  AS Creatinina, \n" +
"	CASE WHEN ab.txtcreatinina < '0.8' or ab.txtcreatinina > '1.4'  THEN 'ANORMAL' \n" +
"	     WHEN ab.txtcreatinina >= '0.8' AND ab.txtcreatinina <='1.4'   THEN 'NORMAL' \n" +
"	     END AS CONCLUCION_CREATININA,  \n" +
"	CASE WHEN t.cintura is null THEN 'INF. NO TOMADA' ELSE t.cintura END,\n" +
"	CASE WHEN t.cadera is null THEN 'INF. NO TOMADA' ELSE t.cadera END,\n" +
"	CASE WHEN t.icc is null THEN 'INF. NO TOMADA' ELSE t.icc END,\n" +
"	CASE WHEN t.sistolica IS NULL THEN 'INF. NO TOMADA' ELSE t.sistolica END,\n" +
"	CASE WHEN t.sistolica < '120' THEN 'NORMAL' \n" +
"	     WHEN t.sistolica > '119.9' AND t.sistolica < '140' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.sistolica >= '140' AND t.sistolica <'160' THEN 'HTA-1' \n" +
"	     WHEN t.sistolica <= '99'  THEN 'NORMAL' \n" +
"	     WHEN t.sistolica >= '160' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'   \n" +
"	     END AS R_SIST,\n" +
"	CASE WHEN t.diastolica IS NULL THEN 'INF NO TOMADA' ELSE t.diastolica END ,\n" +
"	CASE WHEN t.diastolica ='100' THEN 'HTA-2'\n" +
"	     WHEN t.diastolica <'80' THEN 'NORMAL'\n" +
"	     WHEN t.diastolica >'79.9' AND t.diastolica < '90' THEN 'PREHIPERTENSION' \n" +
"	     WHEN t.diastolica >='90' AND t.diastolica < '100' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >='90' THEN 'HTA-1' \n" +
"	     WHEN t.diastolica >'100' THEN 'HTA-2'\n" +
"	     ELSE 'DATOS INSUFICIENTES'  \n" +
"	     END AS R_DIAST,\n" +
"        CASE WHEN t.f_cardiaca IS NULL THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END AS FC,\n" +
"	CASE WHEN t.f_respiratoria IS NULL THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END AS FR,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  as PLOMO_SANGRE,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  as CADMIO_ORINA,	\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  as TIOCINATOS_ORINA,\n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS ResultadodeEvaluaciones, \n" +
"	ca.txtrecomendaciones as RECOMENDACIONES,\n" +
"	ca.atxtrestricciones AS OBSERVACIONES,           \n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END GUPOSAN,\n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS FACTOR,\n" +
"	CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as ALERGIAS,\n" +
"		\n" +
"	CASE WHEN bc.chk_si = 'TRUE' THEN 'Apto'\n" +
"             WHEN bc.chk_apto_r = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             END AS APTITUD_MANEJO,	\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN caa.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN caa.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN caa.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"	     WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END  as APTITUD_OCUP,\n" +
"	ca.atxtrestricciones AS RESTRICCIONES,\n" +
"	ca.nom_medico,\n" +
"	 CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as RESPONSABLE_DIGITACION,\n" +
"	oi.txt_s_comentarios as NOTAS,\n" +
"	ip.a_intelectual,ip.a_personalidad,ip.recomendaciones,\n" +
"	od.txtcariadasoturar AS DX_NCARIES,\n" +
"	ie.hallazgo AS EKG_RESULTADO,ie.recomendaciones AS EKG_OBS,\n" +
"	CASE WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"	     WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"	     WHEN cma.p_si2 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN cma.p_si3 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con restricción'\n" +
"	     WHEN ba.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_TRAB_ALTURA,\n" +
"        CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as RESPONSABLE_REVISION,\n" +
"        CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as REZONANCIA_MAGNETICA,\n" +
"        CASE WHEN n.n_orden IS NOT NULL THEN 'N/A' END  as PRUEBAESFUERZOS,\n" +
"        OD.txtobservaciones AS DX_ODONTOLOGICO             \n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia_lo AS ol ON (ol.n_orden = n.n_orden)\n" +
"LEFT JOIN audiometria_po AS au ON (au.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) \n" +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)\n" +
"LEFT JOIN ex_radiograficos_sanguineos AS er ON (er.n_orden = n.n_orden)\n" +
"LEFT JOIN radiografia_torax AS rt ON (rt.n_orden = n.n_orden)\n" +
"LEFT JOIN oit AS oi ON (oi.n_orden = n.n_orden)\n" +
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)\n" +
"LEFT JOIN analisis_bioquimicos AS ab ON(ab.n_orden = n.n_orden)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_anexo02 as caa ON (caa.n_orden=n.n_orden)\n" +
"left join anexo_agroindustrial as aag ON (aag.n_orden=n.n_orden)\n" +
"left join anexo7d as ad ON (ad.n_orden=n.n_orden)\n" +
"left join anexoc as ac ON (ac.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden) "+
"left join informe_psicologico as ip ON (ip.n_orden=n.n_orden)   "
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql); 
//        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void proseguridad(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT n.n_orden AS N°, d.cod_pa AS DNI_CARNETEXT,   \n" +
"        concat(d.apellidos_pa,' ',nombres_pa )AS NOMBRES,\n" +
"	d.email_pa as CORREO,d.cel_pa as FONOCONTACTO,n.nom_examen AS TIPODEEMO,\n" +
"	CASE WHEN n.n_orden is not null THEN '..' END  AS PERFIL,\n" +
"	CASE WHEN n.n_orden is not null THEN 'HORIZONTE MEDIC' END  AS CLINICA,\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN caa.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN caa.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN caa.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"	     WHEN bc.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN ba.chk_observado = 'TRUE' THEN 'Observado' END  as APTITUD,\n" +
"        CASE WHEN ca.atxtrestricciones is not null THEN ca.atxtrestricciones \n" +
"             WHEN caa.atxtrestricciones is not null THEN caa.atxtrestricciones END  AS MOTIVORESTRICCION,\n" +
"        fecha_apertura_po AS FECHAEXAMEN,\n" +
"	CASE WHEN a.txtantecedentespersonales is null THEN 'SIN FICHA ANT. PAT.' ELSE a.txtantecedentespersonales END AS  ANTECEDENTESPERSNALES,\n" +
"        CASE WHEN ap.chk1 = 'TRUE' THEN 'SI' END  AS ALERGIAS,\n" +
"        CASE WHEN n.n_orden is not null THEN '..' END  AS MEDICAMENTOSDEUSO,\n" +
"        CASE WHEN t.peso is null THEN 'INF. NO TOMADA' ELSE t.peso END,\n" +
"	CASE WHEN t.talla is null THEN 'INF. NO TOMADA' ELSE t.talla END,\n" +
"	CASE WHEN t.imc is null THEN 'INF. NO TOMADA' ELSE t.imc END,\n" +
"	CASE WHEN t.sistolica is null THEN 'INF. NO TOMADA' ELSE t.sistolica END ||'/'||\n" +
"	CASE WHEN t.diastolica is null THEN 'INF. NO TOMADA' ELSE t.diastolica END as PA,\n" +
"	CASE WHEN t.f_cardiaca is null THEN 'INF. NO TOMADA' ELSE t.f_cardiaca END,\n" +
"	CASE WHEN t.f_respiratoria is null THEN 'INF. NO TOMADA' ELSE t.f_respiratoria END,\n" +
"	CASE WHEN n.n_orden is not null THEN '..' END  AS EXAMENOSTEOMUSCULAR,\n" +
"	CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END AS EXAMENOFTALMOLOGICO,\n" +
"	o.v_cerca_s_od AS Cerca_OD,\n" +
"	o.v_cerca_s_oi AS Cerca_OI,\n" +
"	CASE WHEN o.v_cerca_c_od ='00' THEN ol.v_cerca_c_od ELSE o.v_cerca_c_od END \n" +
"	AS Cerca_Corregida_OD,\n" +
"	CASE WHEN o.v_cerca_c_oi ='00' THEN ol.v_cerca_c_oi ELSE o.v_cerca_c_oi END\n" +
"	AS Cerca_Corregida_OI,\n" +
"	o.v_lejos_s_od AS Lejos_OD,\n" +
"	o.v_lejos_s_oi AS Lejos_OI,\n" +
"	CASE WHEN o.v_lejos_c_od ='00' THEN ol.v_lejos_c_od ELSE o.v_lejos_c_od END \n" +
"	AS Lejos_Corregida_OD,\n" +
"	CASE WHEN o.v_lejos_c_oi ='00' THEN ol.v_lejos_c_oi ELSE o.v_lejos_c_oi END\n" +
"	AS Lejos_Corregida_OI,\n" +
"	CASE WHEN lc.txthemoglobina IS NULL THEN '...' ELSE lc.txthemoglobina END AS Hemoglobina,\n" +
"	CASE WHEN lc.txtleucocitosematologia IS NULL THEN '...' ELSE lc.txtleucocitosematologia END AS LEUCOCITOS,\n" +
"	CASE WHEN lc.txtplaquetas IS NULL THEN '...' ELSE lc.txtplaquetas END AS PLAQUETAS,\n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||' '||\n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS GRUPOSAN,\n" +
"	CASE WHEN lc.txtglucosabio IS NULL THEN '...' ELSE lc.txtglucosabio END AS Glucosa ,\n" +
"	CASE WHEN ab.txtcolesterol IS NOT NULL THEN ab.txtcolesterol ELSE '...'\n" +
"	     END  AS Colesterol,   \n" +
"	CASE WHEN ab.txttrigliseridos IS NOT NULL THEN ab.txttrigliseridos ELSE '...'\n" +
"	    END  AS trigliceridos,\n" +
"	CASE WHEN lc.txtobservacioneslb IS NOT NULL THEN lc.txtobservacioneslb ELSE '...'\n" +
"	    END  AS EXAORINA, \n" +
"	ie.hallazgo AS EKG_RESULTADO,\n" +
"	CASE WHEN n.n_orden is not null THEN '...' END  AS SINTOMARESPIRATORIO,\n" +
"	CASE WHEN n.n_orden is not null THEN 'N/A' END  AS TESTSOMNOLENCIA,\n" +
"	CASE WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"	     WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"	     WHEN cma.p_si2 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN cma.p_si3 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con restricción'\n" +
"	     WHEN ba.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_TRAB_ALTURA,\n" +
"	au.diagnostico AS CONCLUSIONAUDIO,a.txtconclusion AS RESULTESPIROMETRIA, \n" +
"	ip.recomendaciones AS EVALUACIONPSICOLOGICA,\n" +
"	CASE WHEN ip.aprobo_inf = 'TRUE' THEN 'Apto'\n" +
"             WHEN ip.desaprobo_inf = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ip.n_orden IS NULL THEN 'NA'\n" +
"             END AS APTITUDPSICOLOGICA,\n" +
"       CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS DIAGNOSTICOGENERAL, \n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS NUTRICIONAL,\n" +
"       CASE WHEN ol.e_oculares is null THEN o.e_oculares ELSE ol.e_oculares END ||' '||\n" +
"	CASE WHEN ol.e_oculares1 IS NULL THEN o.e_oculares1 ELSE ol.e_oculares1  END AS OFTALMOLOGICO,\n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS MUSCULOESQUELETICO,\n" +
"       CASE WHEN lc.txtobservacioneslb is not null THEN lc.txtobservacioneslb END  AS LABORATORIAL,\n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS CARDIOVASCULAR,\n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS DERMATOLOGICO,\n" +
"       CASE WHEN ip.recomendaciones is not null THEN ip.recomendaciones END  AS PSICOLOGICO,\n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS BIOQUIMICO,\n" +
"       CASE WHEN n.n_orden is not null THEN 'N/A' END  AS ENFERMPREXISTENTES,\n" +
"       a.txtdiagnosticoaudio as AUDIOMETRICO,a.txtconclusion AS ESPIROMETRICO,\n" +
"        CASE WHEN ca.txtrecomendaciones is NOT  null THEN ca.txtrecomendaciones \n" +
"	     WHEN caa.txtrecomendaciones is NOT null THEN caa.txtrecomendaciones END  AS RECOMENDACIONES,\n" +
"         CASE WHEN ca.atxtrestricciones is not null THEN ca.atxtrestricciones \n" +
"              WHEN caa.atxtrestricciones is not null THEN caa.atxtrestricciones END  AS RESTRICCIONES\n" +
"	         \n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN triaje AS t ON (t.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia AS o ON (o.n_orden = n.n_orden)\n" +
"LEFT JOIN oftalmologia_lo AS ol ON (ol.n_orden = n.n_orden)\n" +
"LEFT JOIN audiometria_po AS au ON (au.n_orden = n.n_orden)\n" +
"LEFT JOIN funcion_abs AS f ON (f.n_orden = n.n_orden)\n" +
"LEFT JOIN ficha_audiologica AS fa ON(fa.n_orden = n.n_orden) \n" +
"LEFT JOIN informe_electrocardiograma AS ie ON (ie.n_orden = n.n_orden)\n" +
"LEFT JOIN ex_radiograficos_sanguineos AS er ON (er.n_orden = n.n_orden)\n" +
"LEFT JOIN radiografia_torax AS rt ON (rt.n_orden = n.n_orden)\n" +
"LEFT JOIN oit AS oi ON (oi.n_orden = n.n_orden)\n" +
"LEFT JOIN odontograma AS od ON(od.n_orden = n.n_orden)\n" +
"LEFT JOIN analisis_bioquimicos AS ab ON(ab.n_orden = n.n_orden)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join aptitud_medico_ocupacional_agro as caa ON (caa.n_orden=n.n_orden)\n" +
"left join anexo_agroindustrial as aag ON (aag.n_orden=n.n_orden)\n" +
"left join anexo7d as ad ON (ad.n_orden=n.n_orden)\n" +
"left join anexoc as ac ON (ac.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join antecedentes_patologicos as ap ON (ap.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden)\n" +
"Left join informe_psicologico as ip ON (ip.n_orden=n.n_orden)"
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql); 
//        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void boroo(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT 	n.n_orden AS N°,\n" +
"	d.apellidos_pa ||' ' ||nombres_pa AS NOMBRES,\n" +
"	d.cod_pa AS DNI_CARNETEXT,d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"	CASE WHEN lc.chko = 'TRUE' THEN 'O'\n" +
"	     WHEN lc.chka = 'TRUE' THEN 'A'\n" +
"	     WHEN lc.chkb = 'TRUE' THEN 'B'\n" +
"	     WHEN lc.chkab = 'TRUE' THEN 'AB' ELSE '.' END ||' '||\n" +
"	CASE WHEN lc.rbrhpositivo = 'TRUE' THEN '+' \n" +
"	     WHEN lc.rbrhnegativo = 'TRUE' THEN '-' END AS GRUPOSAN,\n" +
"	n.razon_empresa AS EMPRESA,n.razon_contrata AS CONTRATA,n.cargo_de AS CARGO, \n" +
"	case when n.cod_sede=1 then 'HORIZONTE MEDIC-TRUJILLO'\n" +
"                   when n.cod_sede=2 then 'HORIZONTE MEDIC-HUAMACHUCO'\n" +
"                   WHEN n.cod_sede=3 then 'HORIZONTE MEDIC-HUANCAYO'\n" +
"                   WHEN n.cod_sede=4 then 'HORIZONTE MEDIC-TRUJILLO-PIEROLA' END LUGAREXAMEN,\n" +
"	n.fecha_apertura_po AS FECHAEXAMEN,\n" +
"	CASE WHEN ap.chk1 = 'TRUE' THEN 'SI' \n" +
"	     WHEN ap.chk1 = 'FALSE' THEN 'NO' \n" +
"	     WHEN ap.n_orden is null then 'N/A'END  AS ALERGIAS,\n" +
"	d.lugar_nac_pa AS CIUDAD,\n" +
"	n.nom_examen AS TIPODEEMO,\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN caa.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN caa.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN caa.chkno_apto = 'TRUE' THEN 'No Apto' END  as APTITUD,\n" +
"	CASE WHEN cma.p_si1 = 'TRUE' THEN 'Apto'\n" +
"	     WHEN ba.chk_si = 'TRUE' THEN 'Apto'\n" +
"	     WHEN cma.p_si2 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN cma.p_si3 = 'TRUE' THEN 'Apto con restriccion'\n" +
"	     WHEN ba.chk_apto_r = 'TRUE' THEN 'Apto con restricción'\n" +
"	     WHEN ba.chk_observado = 'TRUE' THEN 'Observado'\n" +
"             WHEN cma.p_no1 = 'TRUE' THEN 'No Apto'\n" +
"             WHEN ba.chk_no_apto = 'TRUE' THEN 'No Apto'\n" +
"             END AS APTITUD_TRAB_ALTURA,       \n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS DIAGNOSTICOGENERAL, \n" +
"	CASE WHEN ca.atxtrestricciones is not null THEN ca.atxtrestricciones else '...' END  AS RESTRICCIONES,	\n" +
"	CASE WHEN n.n_orden is not null THEN '' END  AS NUMERODEBREVETE,\n" +
"	CASE WHEN n.n_orden is not null THEN '' END  AS CATEGORIA,\n" +
"	CASE WHEN n.n_orden is not null THEN '' END  AS FECHAVENCIMIENTO\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_anexo02 as caa ON (caa.n_orden=n.n_orden)\n" +
"left join anexo_agroindustrial as aag ON (aag.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join antecedentes_patologicos as ap ON (ap.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden)\n" +
"Left join informe_psicologico as ip ON (ip.n_orden=n.n_orden)   "
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        vSql += " order by n.n_orden asc";
        //oFunc.SubSistemaMensajeInformacion(vSql); 
        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void sumagold(){
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        };
        String vSql = "SELECT 	n.n_orden AS N°,d.cod_pa AS DNI_CARNETEXT,\n" +
"	d.apellidos_pa as APELLIDOS,nombres_pa AS NOMBRES,\n" +
"        obtener_edad(d.fecha_nacimiento_pa,n.fecha_apertura_po) AS EDAD,\n" +
"        CASE WHEN d.sexo_pa='F' THEN 'FEMENINO' ELSE 'MASCULINO' END AS SEXO,\n" +
"        d.estado_civil_pa as ESTADOCIVIL,\n" +
"	d.fecha_nacimiento_pa AS FECHANACIMIENTO,\n" +
"	CONCAT(d.direccion_pa,' ',caserio_pa)AS DOMICILIO,\n" +
"	d.distrito_pa as DISTRITO,\n" +
"	d.provincia_pa as PROVINCIA,\n" +
"	d.departamento_pa as DEPARTAMENTO,\n" +
"	d.cel_pa as TELEFONO,\n" +
"	n.fecha_apertura_po AS FECHAEXAMEN,\n" +
"	\n" +
"	n.cargo_de as CARGO,\n" +
"	n.area_o as AREA,\n" +
"	n.razon_empresa as EMPRESA,\n" +
"	CASE WHEN ob.n_orden is not null THEN 'Observado'\n" +
"             WHEN ca.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN ca.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN caa.chkapto = 'TRUE' THEN 'Apto'\n" +
"             WHEN caa.chkapto_restriccion = 'TRUE' THEN 'Apto con Restriccion'\n" +
"             WHEN ca.chkno_apto = 'TRUE' THEN 'No Apto'\n" +
"             WHEN caa.chkno_apto = 'TRUE' THEN 'No Apto' END  as APTITUD,\n" +
"	CASE WHEN a.txtobservacionesfm IS NULL THEN '...' ELSE a.txtobservacionesfm END AS DIAGNOSTICOGENERAL, \n" +
"	CASE WHEN ca.atxtrestricciones is not null THEN ca.atxtrestricciones END  AS RESTRICCIONES	\n" +
"FROM datos_paciente AS d\n" +
"INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)\n" +
"LEFT JOIN lab_clinico AS lc ON (lc.n_orden = n.n_orden)  \n" +
"left join anexo7c as a ON (a.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_medico_ocupacional as ca ON (ca.n_orden=n.n_orden)\n" +
"left join certificado_aptitud_anexo02 as caa ON (caa.n_orden=n.n_orden)\n" +
"left join anexo_agroindustrial as aag ON (aag.n_orden=n.n_orden)\n" +
"left join observaciones as ob ON (ob.n_orden=n.n_orden)\n" +
"left join b_certificado_conduccion as bc ON (bc.n_orden=n.n_orden)\n" +
"left join antecedentes_patologicos as ap ON (ap.n_orden=n.n_orden)\n" +
"left join b_certificado_altura as ba ON (ba.n_orden=n.n_orden)   \n" +
"left join certificacion_medica_altura as cma ON (cma.n_orden=n.n_orden)\n" +
"Left join informe_psicologico as ip ON (ip.n_orden=n.n_orden)   "
                + "WHERE ";
              
        if(rbContrata.isSelected()){
           vSql+= "n.razon_contrata='"+txtEmpresa.getText().toString()+"' ";
        }else{
            vSql+= "n.razon_empresa='"+txtEmpresa.getText().toString()+"' ";
        }
          
        if (((JTextField) F_inicio.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po >= '" + F_inicio.getDate().toString() + "'";
        }
        if (((JTextField) F_final.getDateEditor().getUiComponent()).getText().trim().length() > 2) {
            vSql += " AND n.fecha_apertura_po <= '" + F_final.getDate().toString() + "'";
        }
        //oFunc.SubSistemaMensajeInformacion(vSql); 
//        System.out.println(vSql);
        if (oConn.FnBoolQueryExecute(vSql)) {
            try {
                java.sql.ResultSetMetaData rsmt = oConn.setResult.getMetaData();
                int CantidaColumnas = rsmt.getColumnCount();
                for (int i = 1; i <= CantidaColumnas; i++) {
                    model.addColumn(rsmt.getColumnLabel(i));
                }
                while (oConn.setResult.next()) {
                    Object[] Fila = new Object[CantidaColumnas];
                    for (int i = 0; i < CantidaColumnas; i++) {
                        Fila[i] = oConn.setResult.getObject(i + 1);
                    }
                    model.addRow(Fila);
                }

                tbReporte = autoResizeColWidth(tbReporte, model);

                tbReporte.setModel(model);

                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(Audiometria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
