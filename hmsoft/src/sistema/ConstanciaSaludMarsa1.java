/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sistema;

import Clases.GestorTime;
import Clases.clsConnection;
import Clases.clsFunciones;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import static sistema.Ocupacional1.lasede;

/**
 *
 * @author Richard
 */
public class ConstanciaSaludMarsa1 extends javax.swing.JInternalFrame {

    clsConnection oConn1 = new clsConnection();
 clsFunciones  oFunc = new clsFunciones();
 String sintomas="";
    // Ingreso ads = new Ingreso();
String sed="";
 String ipa="",seded="";
 String codvalor="";
    public ConstanciaSaludMarsa1() {
          
         Properties props = new Properties();
       
            FileInputStream in = null;
        try {
            in = new FileInputStream("huancayo.properties");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ocupacional1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            props.load(in);
        } catch (IOException ex) {
            Logger.getLogger(Ocupacional1.class.getName()).log(Level.SEVERE, null, ex);
        }
           String url = props.getProperty("dataBaseServer");
           String db = props.getProperty("dataBaseCatalog");
           String username = props.getProperty("dataBaseUser");
           String password = props.getProperty("dataBasePassword");
         
  
           lasede=props.getProperty("nameSede");
           seded=props.getProperty("nameSede");
           ipa= props.getProperty("dataBaseServer");
        initComponents();
           activar(false);
        timer.start();
        Fecha();
        chkIgmPositivo.setVisible(false);
chkIgmNegativo.setVisible(false);
chkIggPositivo.setVisible(false);
chkIggNegativo.setVisible(false);
chkInvalido.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgSintoma = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        FechaHoy = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmpresa = new javax.swing.JTextField();
        chkIgmPositivo = new javax.swing.JCheckBox();
        chkIggPositivo = new javax.swing.JCheckBox();
        chkIggNegativo = new javax.swing.JCheckBox();
        chkIgmNegativo = new javax.swing.JCheckBox();
        chkInvalido = new javax.swing.JCheckBox();
        txtSintoma = new javax.swing.JTextField();
        chkAsintomatico = new javax.swing.JCheckBox();
        chkSintomatico = new javax.swing.JCheckBox();
        txtMuestra = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        chkTos = new javax.swing.JCheckBox();
        chkDolorG = new javax.swing.JCheckBox();
        chkCongestionN = new javax.swing.JCheckBox();
        chkDificultadR = new javax.swing.JCheckBox();
        chkFiebre = new javax.swing.JCheckBox();
        chkMalestar = new javax.swing.JCheckBox();
        chkPerdidaOlf1 = new javax.swing.JCheckBox();
        chkExpctoracion = new javax.swing.JCheckBox();
        chkDolor = new javax.swing.JCheckBox();
        chkIrritaibilidad = new javax.swing.JCheckBox();
        chkCefalea = new javax.swing.JCheckBox();
        chkNauseas = new javax.swing.JCheckBox();
        chkDiarrea = new javax.swing.JCheckBox();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnImp = new javax.swing.JButton();
        txtimp = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaRecomendaciones = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtNorden = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("CONSTANCIA SALUD");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Constancia Médica"));
        jPanel1.setDoubleBuffered(false);

        jLabel2.setText("Por la presente se deja constancia que el colaborador");

        jLabel5.setText("identificado con DNI:");

        jLabel7.setText("Fue evaluado de acuerdo al protocolo para detección de Covid - 19, encontrandose");

        FechaHoy.setDateFormatString("'TRUJILLO - ' EEEEE dd MMMMM yyyy");

        jLabel8.setText("de la empresa ");

        jLabel3.setText("ANTIGENOS");

        chkIgmPositivo.setText("POSITIVO");
        chkIgmPositivo.setEnabled(false);
        chkIgmPositivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIgmPositivoActionPerformed(evt);
            }
        });

        chkIggPositivo.setText("POSITIVO");
        chkIggPositivo.setEnabled(false);

        chkIggNegativo.setText("NEGATIVO");
        chkIggNegativo.setEnabled(false);

        chkIgmNegativo.setText("NEGATIVO");
        chkIgmNegativo.setEnabled(false);
        chkIgmNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIgmNegativoActionPerformed(evt);
            }
        });

        chkInvalido.setText("INVALIDO");
        chkInvalido.setEnabled(false);

        btgSintoma.add(chkAsintomatico);
        chkAsintomatico.setSelected(true);
        chkAsintomatico.setText("Asintomático");
        chkAsintomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAsintomaticoActionPerformed(evt);
            }
        });

        btgSintoma.add(chkSintomatico);
        chkSintomatico.setText("Sintomático");
        chkSintomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSintomaticoActionPerformed(evt);
            }
        });

        txtMuestra.setEditable(false);
        txtMuestra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMuestraActionPerformed(evt);
            }
        });

        jLabel38.setText("Hora :");

        lblHora.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        chkTos.setText("Tos");
        chkTos.setEnabled(false);
        chkTos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkTosMouseClicked(evt);
            }
        });
        chkTos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTosActionPerformed(evt);
            }
        });

        chkDolorG.setText("Dolor de garganta");
        chkDolorG.setEnabled(false);
        chkDolorG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkDolorGMouseClicked(evt);
            }
        });
        chkDolorG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDolorGActionPerformed(evt);
            }
        });

        chkCongestionN.setText("Congestión Nasal");
        chkCongestionN.setEnabled(false);
        chkCongestionN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkCongestionNMouseClicked(evt);
            }
        });
        chkCongestionN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCongestionNActionPerformed(evt);
            }
        });

        chkDificultadR.setText("Dificultad respiratoria");
        chkDificultadR.setEnabled(false);
        chkDificultadR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkDificultadRMouseClicked(evt);
            }
        });
        chkDificultadR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDificultadRActionPerformed(evt);
            }
        });

        chkFiebre.setText("Fiebre/ Escalofrio");
        chkFiebre.setEnabled(false);
        chkFiebre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFiebreActionPerformed(evt);
            }
        });

        chkMalestar.setText("Malestar general");
        chkMalestar.setEnabled(false);
        chkMalestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMalestarActionPerformed(evt);
            }
        });

        chkPerdidaOlf1.setText("Perdida olfato o gusto");
        chkPerdidaOlf1.setEnabled(false);
        chkPerdidaOlf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPerdidaOlf1ActionPerformed(evt);
            }
        });

        chkExpctoracion.setText("Expectoración");
        chkExpctoracion.setEnabled(false);
        chkExpctoracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExpctoracionActionPerformed(evt);
            }
        });

        chkDolor.setText("Dolor");
        chkDolor.setEnabled(false);
        chkDolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDolorActionPerformed(evt);
            }
        });

        chkIrritaibilidad.setText("Irritabilidad / confusión");
        chkIrritaibilidad.setEnabled(false);
        chkIrritaibilidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIrritaibilidadActionPerformed(evt);
            }
        });

        chkCefalea.setText("Cefalea");
        chkCefalea.setEnabled(false);
        chkCefalea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCefaleaActionPerformed(evt);
            }
        });

        chkNauseas.setText("Nauseas / vómitos");
        chkNauseas.setEnabled(false);
        chkNauseas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNauseasActionPerformed(evt);
            }
        });

        chkDiarrea.setText("Diarrea");
        chkDiarrea.setEnabled(false);
        chkDiarrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDiarreaActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/entrar.png"))); // NOI18N
        btnGuardar.setText("Guardar/Actualizar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnImp.setBackground(new java.awt.Color(102, 0, 51));
        btnImp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImpActionPerformed(evt);
            }
        });

        txtimp.setBackground(new java.awt.Color(0, 153, 153));
        txtimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtimpActionPerformed(evt);
            }
        });

        jTextAreaRecomendaciones.setColumns(20);
        jTextAreaRecomendaciones.setRows(5);
        jScrollPane1.setViewportView(jTextAreaRecomendaciones);

        jLabel1.setText("RECOMENDACIONES:");

        jLabel4.setText("N° PRUEBA:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(chkIgmPositivo)
                                .addGap(30, 30, 30)
                                .addComponent(chkIgmNegativo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(chkIggPositivo)
                                        .addGap(24, 24, 24)
                                        .addComponent(chkIggNegativo))
                                    .addComponent(chkInvalido))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkDificultadR)
                                    .addComponent(chkCongestionN)
                                    .addComponent(chkTos)
                                    .addComponent(chkDolorG)
                                    .addComponent(chkFiebre)
                                    .addComponent(chkMalestar))
                                .addGap(2, 2, 2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkExpctoracion)
                                    .addComponent(chkDolor)
                                    .addComponent(chkIrritaibilidad)
                                    .addComponent(chkCefalea)
                                    .addComponent(chkNauseas)
                                    .addComponent(chkDiarrea)))
                            .addComponent(chkPerdidaOlf1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtSintoma, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGuardar)
                            .addComponent(txtMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnLimpiar)
                                .addGap(53, 53, 53)
                                .addComponent(btnImp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtimp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FechaHoy, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAsintomatico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkSintomatico)
                .addGap(15, 15, 15))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkAsintomatico)
                    .addComponent(chkSintomatico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSintoma, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkIgmPositivo)
                            .addComponent(chkIgmNegativo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkIggPositivo)
                            .addComponent(chkIggNegativo))
                        .addGap(10, 10, 10)
                        .addComponent(chkInvalido))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkTos, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkDiarrea, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkDolorG, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkNauseas, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkCongestionN, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkCefalea, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkDificultadR, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkIrritaibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkFiebre, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkDolor, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMalestar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkExpctoracion, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPerdidaOlf1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(FechaHoy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel38)
                        .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMuestra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImp)
                    .addComponent(txtimp)))
        );

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("N° Ficha :");

        txtNorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNordenActionPerformed(evt);
            }
        });
        txtNorden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNordenKeyTyped(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/configuracion.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static com.toedter.calendar.JDateChooser FechaNacimiento;
public void valorSede(String sede){
if(sede.equals("Trujillo"))
codvalor="1";
if(sede.equals("Huamachuco"))
codvalor="2";
if(sede.equals("Huancayo"))
codvalor="3";
if(sede.equals("Trujillo-Pierola"))
codvalor="4";

}
private void CargarSedes(){
      String sQuery;        
        // Prepara el Query
        sQuery ="select s.nombre_sede from n_orden_ocupacional as n inner join sede as s on n.cod_sede=s.cod_sede where n_orden=" + txtNorden.getText().toString().trim();
        String cboSede="1";
        if (oConn1.FnBoolQueryExecute(sQuery))
        {
            try 
            {
                // Verifica resultados
                 while (oConn1.setResult.next())
                 {                     
                     // Obtiene los datos de la Consulta
                     sed=(oConn1.setResult.getString ("nombre_Sede"));
                     System.out.println(sed);
                     
                 }
                 
                 
                 // Cierra Resultados
                 oConn1.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialorootPane,ex);
                oFunc.SubSistemaMensajeInformacion(ex.toString());
                Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        // selecciona
        //cboSede.setSelectedIndex(1);


}
private void CargarSedes1(){
      String sQuery;        
        // Prepara el Query
        sQuery ="select s.nombre_sede from n_orden_ocupacional as n inner join sede as s on n.cod_sede=s.cod_sede where n_orden=" + txtimp.getText().toString().trim();
        String cboSede="1";
        if (oConn1.FnBoolQueryExecute(sQuery))
        {
            try 
            {
                // Verifica resultados
                 while (oConn1.setResult.next())
                 {                     
                     // Obtiene los datos de la Consulta
                     sed=(oConn1.setResult.getString ("nombre_Sede"));
                     System.out.println(sed);
                     
                 }
                 
                 
                 // Cierra Resultados
                 oConn1.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialorootPane,ex);
                oFunc.SubSistemaMensajeInformacion(ex.toString());
                Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        // selecciona
        //cboSede.setSelectedIndex(1);


}
    Timer timer = new Timer(1000, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Date HorNew = new Date();
            SimpleDateFormat fechaforma = new SimpleDateFormat("hh:mm:ss a");
            String FfechaSystemA = fechaforma.format(HorNew);

            GestorTime.setFfechaSystem(FfechaSystemA);
            lblHora.setText(GestorTime.getFfechaSystem());
        }
    });

    private void txtNordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNordenActionPerformed
        //activar(true);
          CargarSedes();
        valorSede(seded);
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
       if(!txtNorden.getText().isEmpty()){
        if(!OrdenExiste()){  
               
       String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre, "
               + "d.fecha_nacimiento_pa,n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,n.chkcovid1,n.chkcovid2,n.tipoprueba  "
                + "FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
               + "INNER JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
               + "WHERE n.n_orden ="+txtNorden.getText().toString() +" AND n.cod_Sede="+codvalor;
         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                      //  txtSexo.setText(oConn.setResult.getString("sexo_pa").equals("M")?"MASCULINO" : "FEMENINO");   
                        txtEmpresa.setText(oConn1.setResult.getString("razon_empresa"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          if(oConn1.setResult.getString("tipoprueba").equals("P1"))
                              txtMuestra.setText("1era MUESTRA");
                           if(oConn1.setResult.getString("tipoprueba").equals("P2"))
                              txtMuestra.setText("2da MUESTRA");
                            if(oConn1.setResult.getString("tipoprueba").equals("PC"))
                              txtMuestra.setText("Prueba en hotel");
                              if(oConn1.setResult.getString("tipoprueba").equals("AE"))
                              txtMuestra.setText("ALTA EPIDEMIOLOGICA ");
                              if(oConn1.setResult.getString("tipoprueba").equals("PA"))
                              txtMuestra.setText("PRUEBA DE ANTICUERPOS ");
                      //    if(oConn.setResult.getBoolean("chkcovid1")){
                       //       txtMuestra.setText("1era MUESTRA");
                       //   }else if(oConn.setResult.getBoolean("chkcovid2")){
                        //      txtMuestra.setText("2da MUESTRA");
                          //}
                        txtNorden.setEditable(false);
                     //   FechaHoy.requestFocusInWindow();
                         Fecha();
                       }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios(Alta en Ex-Ocupacionales)");
                    }
                    oConn1.setResult.close();
                    oConn1.sqlStmt.close();
            } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());}
       
        }
           } 
    }//GEN-LAST:event_txtNordenActionPerformed
public boolean OrdenExiste()
    {
        boolean bResultado=false;
        if(!txtNorden.getText().isEmpty()){
        String sQuery;

        sQuery  = "Select n_orden from constancia_salud_marsa1 Where n_orden ="+txtNorden.getText().toString();
        oConn1.FnBoolQueryExecute(sQuery);
        try {
            if (oConn1.setResult.next())
            {
                bResultado = true;
//             oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//             txtNorden.setText(null);
            }
            oConn1.setResult.close();
            oConn1.sqlStmt.close();
        } catch (SQLException ex) {
         
        }
        }       
        return bResultado;
        }
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
    limpiar();        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimpiarActionPerformed
private boolean Grabar() throws SQLException{
        boolean bResult = false;
                 sintomas=txtSintoma.getText().toString();
         int tamaño=sintomas.length();
         if(tamaño>=1)
             tamaño=tamaño;
         else
         {
         sintomas=",";
         tamaño=1;
         }
            sintomas=sintomas.substring(0,tamaño-1);
            txtSintoma.setText(sintomas);
       String strSqlStmt ="INSERT INTO constancia_salud_marsa1(\n" +
"            n_orden, fecha_examen, hora_examen, txtmuestra, chk_asintomatico, \n" +
"            chk_sintomatico, txtresultados, chks1, chks2, chks3, chks4, chks5, \n" +
"            chks6, chks7, chks8, chks9, chks10, chks11, chks12, chks13,recomendaciones)";       
            strSqlStmt+= "values ('"+ txtNorden.getText().toString()+"',"
                    + "'"+ FechaHoy.getDate()+"',"
                    + "'"+ lblHora.getText()+"',"
                    + "'"+ txtMuestra.getText()+"',"
                    + "'"+ chkAsintomatico.isSelected()+"',"
                    + "'"+ chkSintomatico.isSelected()+"',"
                    + "'"+txtSintoma.getText()+"',"
                    +"'"+chkTos.isSelected()+ "',"
                    +"'"+chkDolorG.isSelected()+ "',"
                    +"'"+chkCongestionN.isSelected()+ "',"
                    + "'"+chkDificultadR.isSelected()+ "',"
                    + "'"+chkFiebre.isSelected()+ "',"
                    + "'"+chkMalestar.isSelected()+ "',"
                    + "'"+chkDiarrea.isSelected()+ "',"
                    + "'"+chkNauseas.isSelected()+ "',"
                    + "'"+chkCefalea.isSelected()+ "',"
                    + "'"+chkIrritaibilidad.isSelected()+ "',"
                    + "'"+chkDolor.isSelected()+ "',"
                    + "'"+chkExpctoracion.isSelected()+ "',"
                    + "'"+chkPerdidaOlf1.isSelected()+"','" 
                    +jTextAreaRecomendaciones.getText().toString()+"' )";
             if (oConn1.FnBoolQueryExecuteUpdate(strSqlStmt)){
//                   oConn.setResult.next();
                   bResult = true;
                       oFunc.SubSistemaMensajeInformacion("Orden Registrada");
                       
               } 
                try {
             //            oFunc.SubSistemaMensajeInformacion("Se ha se elimino la Entrada con Éxito");
                        oConn1.sqlStmt.close();
                        } catch (SQLException ex) {
                             Logger.getLogger(ConstanciaSaludMarsa1.class.getName()).log(Level.SEVERE, null, ex);
                            }   
                return bResult;       
        }
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        CargarSedes();
        if(OrdenExiste()){  
            Actualizar();
         }else{
              if(!txtNorden.getText().isEmpty()){
            try {
              
                if(Grabar()){
                    imprimir();
                    limpiar();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(ConstanciaSaludMarsa1.class.getName()).log(Level.SEVERE, null, ex);
            }
           }
         }
       
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImpActionPerformed
       CargarSedes1();
        if(!txtimp.getText().isEmpty()){
            if(sed.contains("Huancayo"))
                 print12(Integer.valueOf(txtimp.getText().toString()));
            else
            print(Integer.valueOf(txtimp.getText().toString()));
        }
    }//GEN-LAST:event_btnImpActionPerformed

    private void txtNordenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNordenKeyTyped
       oFunc.NoLetras(evt);
    }//GEN-LAST:event_txtNordenKeyTyped

    private void txtimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtimpActionPerformed
         CargarSedes1();
        if(!txtimp.getText().isEmpty()){
            if(sed.contains("Huancayo"))
                 print12(Integer.valueOf(txtimp.getText().toString()));
            else
            print(Integer.valueOf(txtimp.getText().toString()));
        }
    }//GEN-LAST:event_txtimpActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        CargarSedes();
                valorSede(seded);
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre,d.fecha_nacimiento_pa, "
                + "n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,c.fecha_examen,c.hora_examen, "
                + "c.txtmuestra, c.chk_asintomatico, c.chk_sintomatico, c.txtresultados,n.chkcovid1,n.chkcovid2,chks1,chks2,"
               + "chks3, chks4, chks5, chks6, chks7, chks8, chks9, chks10, chks11, chks12, chks13,n.tipoprueba,c.recomendaciones "
                + " FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
                + "INNER JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
                + "INNER JOIN constancia_salud_marsa1 AS c ON (c.n_orden = n.n_orden) "
               + "WHERE n.n_orden ="+txtNorden.getText().toString() +"  AND n.cod_Sede="+codvalor;
         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                      //  txtSexo.setText(oConn.setResult.getString("sexo_pa").equals("M")?"MASCULINO" : "FEMENINO");   
                        txtEmpresa.setText(oConn1.setResult.getString("razon_empresa"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          txtMuestra.setText(oConn1.setResult.getString("txtmuestra"));
                          chkAsintomatico.setSelected(oConn1.setResult.getBoolean("chk_asintomatico"));
                          chkSintomatico.setSelected(oConn1.setResult.getBoolean("chk_sintomatico"));
                        txtSintoma.setText(oConn1.setResult.getString("txtresultados"));
                        chkTos.setSelected(oConn1.setResult.getBoolean("chks1"));
                        chkDolorG.setSelected(oConn1.setResult.getBoolean("chks2"));
                        chkCongestionN.setSelected(oConn1.setResult.getBoolean("chks3"));
                        chkDificultadR.setSelected(oConn1.setResult.getBoolean("chks4"));
                        chkFiebre.setSelected(oConn1.setResult.getBoolean("chks5"));
                        chkMalestar.setSelected(oConn1.setResult.getBoolean("chks6"));
                        chkDiarrea.setSelected(oConn1.setResult.getBoolean("chks7"));
                        chkNauseas.setSelected(oConn1.setResult.getBoolean("chks8"));
                        chkCefalea.setSelected(oConn1.setResult.getBoolean("chks9"));
                        chkIrritaibilidad.setSelected(oConn1.setResult.getBoolean("chks10"));
                        chkDolor.setSelected(oConn1.setResult.getBoolean("chks11"));
                        chkExpctoracion.setSelected(oConn1.setResult.getBoolean("chks12"));
                        chkPerdidaOlf1.setSelected(oConn1.setResult.getBoolean("chks13"));
                        jTextAreaRecomendaciones.setText(oConn1.setResult.getString("recomendaciones"));
                        if(oConn1.setResult.getString("tipoprueba").equals("P1"))
                              txtMuestra.setText("1era MUESTRA");
                           if(oConn1.setResult.getString("tipoprueba").equals("P2"))
                              txtMuestra.setText("2da MUESTRA");
                            if(oConn1.setResult.getString("tipoprueba").equals("PC"))
                              txtMuestra.setText("Prueba en hotel");
                              if(oConn1.setResult.getString("tipoprueba").equals("AE"))
                              txtMuestra.setText("ALTA EPIDEMIOLOGICA ");
                              if(oConn1.setResult.getString("tipoprueba").equals("PA"))
                              txtMuestra.setText("PRUEBA DE ANTICUERPOS ");
                     //    if(oConn.setResult.getBoolean("chkcovid1")){
                         //     txtMuestra.setText("1era MUESTRA");
                       //   }else if(oConn.setResult.getBoolean("chkcovid2")){
                          //    txtMuestra.setText("2da MUESTRA");
                         // }
                        Fecha();
//                        FechaHoy.setDate(oConn.setResult.getDate("fecha_hoy"));
                       }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios");
                    }
                oConn1.setResult.close();
                oConn1.sqlStmt.close();
            } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());
            }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void chkIgmPositivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIgmPositivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkIgmPositivoActionPerformed

    private void chkIgmNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIgmNegativoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkIgmNegativoActionPerformed

    private void chkPerdidaOlf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPerdidaOlf1ActionPerformed
           if(chkPerdidaOlf1.isSelected())       
        sintomas+="perdida del olfato,"; 
         else
          sintomas=   sintomas.replaceAll("perdida del olfato,", "");
                             txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkPerdidaOlf1ActionPerformed

    private void chkSintomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSintomaticoActionPerformed
        // TODO add your handling code here:
        chkTos.setEnabled(true);
        chkDolorG.setEnabled(true);
        chkCongestionN.setEnabled(true);
        chkDificultadR.setEnabled(true);
        chkFiebre.setEnabled(true);
        chkMalestar.setEnabled(true);
        chkDiarrea.setEnabled(true);
        chkNauseas.setEnabled(true);
        chkCefalea.setEnabled(true);
        chkIrritaibilidad.setEnabled(true);
        chkDolor.setEnabled(true);
        chkExpctoracion.setEnabled(true);
        chkPerdidaOlf1.setEnabled(true);
    }//GEN-LAST:event_chkSintomaticoActionPerformed

    private void chkAsintomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAsintomaticoActionPerformed
        // TODO add your handling code here:
        chkTos.setEnabled(false);
        chkDolorG.setEnabled(false);
        chkCongestionN.setEnabled(false);
        chkDificultadR.setEnabled(false);
        chkFiebre.setEnabled(false);
        chkMalestar.setEnabled(false);
        chkDiarrea.setEnabled(false);
        chkNauseas.setEnabled(false);
        chkCefalea.setEnabled(false);
        chkIrritaibilidad.setEnabled(false);
        chkDolor.setEnabled(false);
        chkExpctoracion.setEnabled(false);
        chkPerdidaOlf1.setEnabled(false);
    }//GEN-LAST:event_chkAsintomaticoActionPerformed

    private void txtMuestraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMuestraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMuestraActionPerformed

    private void chkTosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTosActionPerformed
          if(chkTos.isSelected())       
        sintomas+="tos,";
           else
          { 
             sintomas= sintomas.replaceAll("tos,", "");
             
          }
          txtSintoma.setText(sintomas);
    }//GEN-LAST:event_chkTosActionPerformed

    private void chkDolorGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDolorGActionPerformed
         if(chkDolorG.isSelected())       
        sintomas+="dolor de garganta,";
          else
            sintomas= sintomas.replaceAll("dolor de garganta,", "");
                   txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkDolorGActionPerformed

    private void chkCongestionNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCongestionNActionPerformed
         if(chkCongestionN.isSelected())       
        sintomas+="congestion nasal,";
         else
           sintomas=  sintomas.replaceAll("congestion nasal,", "");
                   txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkCongestionNActionPerformed

    private void chkDificultadRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDificultadRActionPerformed
        if(chkDificultadR.isSelected())       
        sintomas+="dificultad para respirar,";
        else
           sintomas=  sintomas.replaceAll("dificultad para respirar,", "");
                  txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkDificultadRActionPerformed

    private void chkFiebreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFiebreActionPerformed
         if(chkFiebre.isSelected())       
        sintomas+="fiebre/escalofrios,"; 
            else
           sintomas=  sintomas.replaceAll("fiebre/escalofrios,", "");
                           txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkFiebreActionPerformed

    private void chkMalestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMalestarActionPerformed
         if(chkMalestar.isSelected())       
        sintomas+="malestar general,"; 
         else
             sintomas=sintomas.replaceAll("malestar general,", "");
                           txtSintoma.setText(sintomas);

         
    }//GEN-LAST:event_chkMalestarActionPerformed

    private void chkDiarreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDiarreaActionPerformed
        if(chkDiarrea.isSelected())       
        sintomas+="diarrera,"; 
         else
           sintomas=  sintomas.replaceAll("diarrera,", "");
                          txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkDiarreaActionPerformed

    private void chkNauseasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNauseasActionPerformed
         if(chkNauseas.isSelected())       
        sintomas+="nauseas y vomitos,"; 
         else
         sintomas=   sintomas.replaceAll("nauseas y vomitos,", "");
                           txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkNauseasActionPerformed

    private void chkCefaleaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCefaleaActionPerformed
 if(chkCefalea.isSelected())       
        sintomas+="cefalea,"; 
         else
          sintomas=   sintomas.replaceAll("cefalea,", "");
                   txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkCefaleaActionPerformed

    private void chkIrritaibilidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIrritaibilidadActionPerformed
        if(chkIrritaibilidad.isSelected())       
        sintomas+="irritabilidad/confusion,"; 
         else
          sintomas=   sintomas.replaceAll("irritabilidad/confusion,", ""); 
                          txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkIrritaibilidadActionPerformed

    private void chkDolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDolorActionPerformed
       if(chkDolor.isSelected())       
        sintomas+="dolor,"; 
         else
          sintomas=   sintomas.replaceAll("dolor,", ""); 
                         txtSintoma.setText(sintomas);

    }//GEN-LAST:event_chkDolorActionPerformed

    private void chkExpctoracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExpctoracionActionPerformed
  if(chkExpctoracion.isSelected())       
        sintomas+="expextoracion,"; 
         else
         sintomas=sintomas.replaceAll("expextoracion,", ""); 
                  txtSintoma.setText(sintomas);
    }//GEN-LAST:event_chkExpctoracionActionPerformed

    private void chkTosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkTosMouseClicked
    

    }//GEN-LAST:event_chkTosMouseClicked

    private void chkDolorGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkDolorGMouseClicked
     
    }//GEN-LAST:event_chkDolorGMouseClicked

    private void chkCongestionNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkCongestionNMouseClicked
  
    }//GEN-LAST:event_chkCongestionNMouseClicked

    private void chkDificultadRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkDificultadRMouseClicked
   
    }//GEN-LAST:event_chkDificultadRMouseClicked

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        cerrarVentana();
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
               // cerrarVentana();

    }//GEN-LAST:event_formInternalFrameClosed
    private void print(Integer cod){
                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);             
                
                try 
                {
                        String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Salud_Marsa1.jasper";
                        JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                        JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
                        JasperViewer viewer = new JasperViewer(myPrint, false);
                        viewer.setTitle("CONSTANCIA SALUD MARSA");
                        // viewer.setAlwaysOnTop(true);
                        viewer.setVisible(true);
                   
                 } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
 
 }
        private void print12(Integer cod){
                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);             
                
                try 
                {
                        String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Salud_Marsa3213.jasper";
                        JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                        JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
                        JasperViewer viewer = new JasperViewer(myPrint, false);
                        viewer.setTitle("CONSTANCIA SALUD MARSA");
                        // viewer.setAlwaysOnTop(true);
                        viewer.setVisible(true);
                   
                 } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
 
 }
    private void Actualizar(){
        String sCodigo=txtNorden.getText();
        String strSqlStmt;
        sintomas=txtSintoma.getText().toString();
         int tamaño=sintomas.length();
         if(tamaño>=1)
             tamaño=tamaño;
         else
         {
         sintomas=",";
         tamaño=1;
         }
            sintomas=sintomas.substring(0,tamaño-1);
            txtSintoma.setText(sintomas);
        strSqlStmt="UPDATE constancia_salud_marsa1\n" +
                    "   SET  fecha_examen='"+FechaHoy.getDate()+"',"
                +"hora_examen='"+lblHora.getText()+"',"
                +"txtmuestra='"+txtMuestra.getText()+"',"
                +"chk_asintomatico='"+chkAsintomatico.isSelected()+"',"
                +"chk_sintomatico='"+chkSintomatico.isSelected()+"',"
                + "txtresultados='"+txtSintoma.getText()+"'" ;
              strSqlStmt+= ", chks1='"+chkTos.isSelected()+"'"
                        + ", chks2='"+chkDolorG.isSelected()+"'"
                        + ", chks3='"+chkCongestionN.isSelected()+"'"
                        + ", chks4='"+chkDificultadR.isSelected()+"'"
                        + ", chks5='"+chkFiebre.isSelected()+"'"
                        + ", chks6='"+chkMalestar.isSelected()+"'"
                        + ", chks7='"+chkDiarrea.isSelected()+"'"
                        + ", chks8='"+chkNauseas.isSelected()+"'"
                        + ", chks9='"+chkCefalea.isSelected()+"'"
                        + ", chks10='"+chkIrritaibilidad.isSelected()+"'"
                        + ", chks11='"+chkDolor.isSelected()+"'"
                        + ", chks12='"+chkExpctoracion.isSelected()+"'"
                        + ", chks13='"+chkPerdidaOlf1.isSelected()+"'"
                       + ", recomendaciones='"+jTextAreaRecomendaciones.getText().toString()+"'"+
                " WHERE n_orden='" + sCodigo + "'";
            
        //oFunc.SubSistemaMensajeInformacion(strSqlStmt);
        if (oConn1.FnBoolQueryExecuteUpdate(strSqlStmt)) {
            oFunc.SubSistemaMensajeInformacion("Se ha actualizado la Entrada con Éxito");
            imprimir();
            limpiar();
            
        } else {
            oFunc.SubSistemaMensajeError("No se pudo Agregar La Entrada");
        }
        
        try {
             //            oFunc.SubSistemaMensajeInformacion("Se ha se elimino la Entrada con Éxito");
                oConn1.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(ConstanciaSaludMarsa1.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    
    
    private boolean imprimir(){
   
        
        boolean im = false;
int seleccion = JOptionPane.showOptionDialog(
    this, // Componente padre
    "¿Desea Imprimir?", //Mensaje
    "Seleccione una opción", // Título
    JOptionPane.YES_NO_CANCEL_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,    // null para icono por defecto.
    new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
    "Si");
    if (seleccion != -1)
    {
   if((seleccion + 1)==1)
   {
       
       if(sed.contains("Huancayo"))
                 printer12(Integer.valueOf(txtNorden.getText().toString()));
        else
       { printer(Integer.valueOf(txtNorden.getText().toString()));
       im = true;
       }
   }
   else
   {
      // PRESIONO NO
     }
    }
    return im;

}
   private void printer(Integer cod){
                 Map parameters = new HashMap(); 
                parameters.put("Norden",cod);      
                    try 
                {          
                    String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Salud_Marsa1.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
//                    JasperViewer viewer = new JasperViewer(myPrint, true);
                    JasperPrintManager.printReport(myPrint,true);
//                    viewer.setTitle("CONSTANCIA MÉDICA COVID 19");
                    // viewer.setAlwaysOnTop(true);
//                    viewer.setVisible(true);
                    
                   } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
   }
   
      private void printer12(Integer cod){
                 Map parameters = new HashMap(); 
                parameters.put("Norden",cod);      
                    try 
                {          
                    String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Salud_Marsa3213.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
//                    JasperViewer viewer = new JasperViewer(myPrint, true);
                    JasperPrintManager.printReport(myPrint,true);
//                    viewer.setTitle("CONSTANCIA MÉDICA COVID 19");
                    // viewer.setAlwaysOnTop(true);
//                    viewer.setVisible(true);
                    
                   } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
   }
    private void activar(boolean b){
    txtNombre.setEnabled(b);
    txtDNI.setEnabled(b);
  //  FechaHoy.setEnabled(b);
    txtEmpresa.setEnabled(b);
   // atxtDiagnostico.setEnabled(!b);
}
private void limpiar(){
txtNombre.setText(null);
txtDNI.setText(null);
jTextAreaRecomendaciones.setText(null);
txtEmpresa.setText(null);
txtMuestra.setText(null);
btgSintoma.clearSelection();
chkAsintomatico.setSelected(true);
txtSintoma.setText(null);
chkTos.setSelected(false);
        chkDolorG.setSelected(false);
        chkCongestionN.setSelected(false);
        chkDificultadR.setSelected(false);
        chkFiebre.setSelected(false);
        chkMalestar.setSelected(false);
        chkDiarrea.setSelected(false);
        chkNauseas.setSelected(false);
        chkCefalea.setSelected(false);
        chkIrritaibilidad.setSelected(false);
        chkDolor.setSelected(false);
        chkExpctoracion.setSelected(false);
        chkPerdidaOlf1.setSelected(false);
FechaHoy.setDate(null);
txtNorden.setText(null);
txtNorden.setEditable(true);
txtNorden.requestFocus();
}
void Fecha(){
       // Ingreso ads = new Ingreso();
        //sed=ads.nombresede;
Date fechaDate = new Date();
//SimpleDateFormat formateador = new SimpleDateFormat("'HUAMACHUCO - ' EEEEE dd MMMMM yyyy");
FechaHoy.setDate(fechaDate);
}

public void cerrarVentana(){
        // JOptionPane.showMessageDialog(null, "probando para cerrar el stament");
        System.out.println("cerro esta ventana");
        try {
            if (oConn1.setResult != null) 
         
            oConn1.setResult.close();
         
            if ( oConn1.sqlStmt != null) 
             
                oConn1.sqlStmt .close();
             
            /*if (oConn1.oConnection != null) 
             
                oConn1.oConnection.close();*/
            
           // oConn1.sqlStmt.close();
           // oConn1.oConnection.close();
        } catch (SQLException ex) {
            Logger.getLogger(ConstanciaSaludMarsa1.class.getName()).log(Level.SEVERE, null, ex);
        }
  
    this.dispose();
      //  System.exit(0);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaHoy;
    private javax.swing.ButtonGroup btgSintoma;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImp;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JCheckBox chkAsintomatico;
    private javax.swing.JCheckBox chkCefalea;
    private javax.swing.JCheckBox chkCongestionN;
    private javax.swing.JCheckBox chkDiarrea;
    private javax.swing.JCheckBox chkDificultadR;
    private javax.swing.JCheckBox chkDolor;
    private javax.swing.JCheckBox chkDolorG;
    private javax.swing.JCheckBox chkExpctoracion;
    private javax.swing.JCheckBox chkFiebre;
    private javax.swing.JCheckBox chkIggNegativo;
    private javax.swing.JCheckBox chkIggPositivo;
    private javax.swing.JCheckBox chkIgmNegativo;
    private javax.swing.JCheckBox chkIgmPositivo;
    private javax.swing.JCheckBox chkInvalido;
    private javax.swing.JCheckBox chkIrritaibilidad;
    private javax.swing.JCheckBox chkMalestar;
    private javax.swing.JCheckBox chkNauseas;
    private javax.swing.JCheckBox chkPerdidaOlf1;
    private javax.swing.JCheckBox chkSintomatico;
    private javax.swing.JCheckBox chkTos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaRecomendaciones;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtEmpresa;
    private javax.swing.JTextField txtMuestra;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNorden;
    private javax.swing.JTextField txtSintoma;
    private javax.swing.JTextField txtimp;
    // End of variables declaration//GEN-END:variables
}
