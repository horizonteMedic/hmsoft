/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sistema;

import Caja.BuscarCliente;
import Clases.GestorTime;
import Clases.clsConnection;
import Clases.clsFunciones;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Richard
 */
public class ConstanciaAltaMarsa1 extends javax.swing.JInternalFrame {

    clsConnection oConn1 = new clsConnection();
    clsFunciones  oFunc = new clsFunciones();
    String condicional;
    //Ingreso ads = new Ingreso();
    String sed="";
     String ipa="",seded="";
 String codvalor="";
    public ConstanciaAltaMarsa1() {
        
         Properties props = new Properties();
       
            FileInputStream in = null;
        try {
            in = new FileInputStream("configuracion.properties");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ocupacional1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            props.load(in);
        } catch (IOException ex) {
            Logger.getLogger(Ocupacional1.class.getName()).log(Level.SEVERE, null, ex);
        }
           String url = props.getProperty("dataBaseServer");
           String db = props.getProperty("dataBaseCatalog");
           String username = props.getProperty("dataBaseUser");
           String password = props.getProperty("dataBasePassword");
         
  
           seded=props.getProperty("nameSede");
           ipa= props.getProperty("dataBaseServer");


        valorSede(seded);

        initComponents();
        activar(false);
        //sed=ads.nombresede;
        chkPositivo.setBackground(Color.red);
        chkNegativo.setBackground(Color.BLUE);
        jComboBox1.setSelectedIndex(0);
        this.txtInstitucion.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgSintoma = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        FechaHoy = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDiasDesc = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        chkIgmPositivo = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        chkIggPositivo = new javax.swing.JCheckBox();
        chkIggNegativo = new javax.swing.JCheckBox();
        chkIgmNegativo = new javax.swing.JCheckBox();
        chkInvalido = new javax.swing.JCheckBox();
        txtInstitucion = new javax.swing.JTextField();
        chkPositivo = new javax.swing.JCheckBox();
        chkNegativo = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        FechaDesde1 = new com.toedter.calendar.JDateChooser();
        FechaHasta = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDiagnostico = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnImp = new javax.swing.JButton();
        txtimp = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNorden = new javax.swing.JTextField();
        btnEditar = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(true);
        setTitle("CONSTANCIA ALTA DE ANTIGENOS");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Constancia Médica"));
        jPanel1.setDoubleBuffered(false);

        jLabel2.setText("Por la presente se deja constancia que ");

        jLabel5.setText("identificado con DNI:");

        jLabel7.setText("obteniendo resultado");

        FechaHoy.setDateFormatString("'TRUJILLO - ' EEEEE dd MMMMM yyyy");
        FechaHoy.setEnabled(false);

        jLabel8.setText("realizó aislamiento social por ");

        jLabel3.setText("periodo esta comprendido entre el ");

        txtDiasDesc.setEnabled(false);
        txtDiasDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiasDescActionPerformed(evt);
            }
        });

        jLabel15.setText("IgM :");

        chkIgmPositivo.setText("POSITIVO");
        chkIgmPositivo.setEnabled(false);
        chkIgmPositivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIgmPositivoActionPerformed(evt);
            }
        });

        jLabel16.setText("IgG :");

        chkIggPositivo.setText("POSITIVO");
        chkIggPositivo.setEnabled(false);

        chkIggNegativo.setText("NEGATIVO");
        chkIggNegativo.setEnabled(false);

        chkIgmNegativo.setText("NEGATIVO");
        chkIgmNegativo.setEnabled(false);
        chkIgmNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkIgmNegativoActionPerformed(evt);
            }
        });

        chkInvalido.setText("INVALIDO");
        chkInvalido.setEnabled(false);

        txtInstitucion.setText("nuestra institución");
        txtInstitucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInstitucionActionPerformed(evt);
            }
        });

        chkPositivo.setBackground(new java.awt.Color(204, 0, 0));
        btgSintoma.add(chkPositivo);
        chkPositivo.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        chkPositivo.setForeground(new java.awt.Color(204, 0, 0));
        chkPositivo.setText("Positivo");
        chkPositivo.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        chkPositivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPositivoActionPerformed(evt);
            }
        });

        chkNegativo.setBackground(new java.awt.Color(0, 0, 102));
        btgSintoma.add(chkNegativo);
        chkNegativo.setFont(new java.awt.Font("Arial Black", 3, 14)); // NOI18N
        chkNegativo.setForeground(new java.awt.Color(0, 0, 102));
        chkNegativo.setText("Negativo");

        jLabel9.setText("días,  luego de haber pasado perfil COVID-19 en ");

        jLabel10.setText("en la prueba serológica, este");

        jLabel17.setText("  al");

        jLabel4.setText("quien ha evolucionado favorablemente.");

        jLabel6.setText("A la fecha,");

        txtDiagnostico.setText("CLINICAMENTE SANO");
        txtDiagnostico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiagnosticoActionPerformed(evt);
            }
        });

        jLabel11.setText(".Con Prueba de Antigenos");

        jLabel12.setText("<html>Se expide la presente a solicitud del interesado para los fines que crea por conveniente.</html>");

        jLabel14.setBackground(new java.awt.Color(255, 0, 51));
        jLabel14.setForeground(new java.awt.Color(255, 0, 51));
        jLabel14.setText("La fecha de los resultados son:");

        jTextField1.setEditable(false);
        jTextField1.setEnabled(false);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NUESTRA INSTITUCION", "INSTITUCION DE SALUD", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtDiasDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(chkPositivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkNegativo, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FechaDesde1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(FechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(329, 329, 329))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(txtInstitucion, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(FechaHoy, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkIgmPositivo)
                                .addGap(30, 30, 30)
                                .addComponent(chkIgmNegativo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkIggPositivo)
                                .addGap(30, 30, 30)
                                .addComponent(chkIggNegativo)))
                        .addGap(18, 18, 18)
                        .addComponent(chkInvalido))
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtDiasDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkPositivo)
                    .addComponent(chkNegativo)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(FechaDesde1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FechaHasta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(chkIgmPositivo)
                            .addComponent(chkIgmNegativo)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(chkIggPositivo)
                            .addComponent(chkIggNegativo)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(chkInvalido)))
                .addGap(25, 25, 25)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(FechaHoy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtInstitucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );

        FechaDesde1.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener(){
            public void propertyChange(java.beans.PropertyChangeEvent evt){
                calcularDias();
            }
        });
        FechaHasta.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener(){
            public void propertyChange(java.beans.PropertyChangeEvent evt){
                calcularDias();
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/entrar.png"))); // NOI18N
        btnGuardar.setText("Guardar/Actualizar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnImp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImpActionPerformed(evt);
            }
        });

        txtimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtimpActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("N° Ficha :");

        txtNorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNordenActionPerformed(evt);
            }
        });
        txtNorden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNordenKeyTyped(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/configuracion.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        jCheckBox1.setText("VERIFICAR HISTORIAL");

        jLabel1.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        jLabel1.setText("HISTORIAL:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "N ORDEN", "FECHA", "RESULTADO"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(btnGuardar)
                        .addGap(2, 2, 2)
                        .addComponent(btnLimpiar)
                        .addGap(77, 77, 77)
                        .addComponent(btnImp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtimp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(657, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)
                        .addGap(107, 107, 107))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel1))
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImp)
                    .addComponent(txtimp))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static com.toedter.calendar.JDateChooser FechaNacimiento;

public void calcularTipoexamen(){

 String sQuery;

        sQuery  = "Select tipoprueba from n_orden_ocupacional Where n_orden ="+txtNorden.getText().toString();
        oConn1.FnBoolQueryExecute(sQuery);
        try {
            if (oConn1.setResult.next())
            {
              condicional=oConn1.setResult.getString("tipoprueba");
//             oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//             txtNorden.setText(null);
            }
            oConn1.setResult.close();
            oConn1.sqlStmt.close();
        } catch (SQLException ex) {
         
        }
}
// FALTA REVISAR ESTE
public void  altasinAEV2(){
    System.out.println("entro a sin AE");
              Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        String fecha1=dateFormat.format(date); 
    String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre, "
               + "d.fecha_nacimiento_pa,n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,e.fecha_examen "
                + "FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
               + "INNER JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
               + "WHERE d.cod_pa =(select  cod_pa from n_orden_ocupacional where n_orden="+txtNorden.getText().toString() +")"
                + " order by n.n_orden desc limit 1;";
            System.out.println("la consulta es:"+Sql);

         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                           Fecha();
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          jTextField1.setText(oConn1.setResult.getString("fecha_examen"));
                        txtNorden.setEditable(false);
                     //   FechaHoy.requestFocusInWindow();
                        
                        sbCargarDatosEmpresa();
                         txtDiasDesc.requestFocus();
                       }else{
                                altasinAEV2();                    
                    }
                  oConn1.setResult.close();
                  oConn1.sqlStmt.close();
            }
                catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());}

}

private void CargarSedes(){
      String sQuery;        
        // Prepara el Query
        sQuery ="select s.nombre_sede from n_orden_ocupacional as n inner join sede as s on n.cod_sede=s.cod_sede where n_orden=" + txtNorden.getText().toString().trim();
        String cboSede="1";
        if (oConn1.FnBoolQueryExecute(sQuery))
        {
            try 
            {
                // Verifica resultados
                 while (oConn1.setResult.next())
                 {                     
                     // Obtiene los datos de la Consulta
                     sed=(oConn1.setResult.getString ("nombre_Sede"));
                     
                 }
                 
                 
                 // Cierra Resultados
                 oConn1.setResult.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialorootPane,ex);
                oFunc.SubSistemaMensajeInformacion(ex.toString());
                Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        // selecciona
        //cboSede.setSelectedIndex(1);


}

    public void altaSinAE(){
        System.out.println("entro a sin AE");
              Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        String fecha1=dateFormat.format(date); 
    String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre, "
               + "d.fecha_nacimiento_pa,n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,e.fecha_examen "
                + " FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
               + "INNER JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
              + "LEFT JOIN constancia_salud_marsa1 AS c ON (n.n_orden = c.n_orden) "
               + " WHERE d.cod_pa =(select  cod_pa from n_orden_ocupacional where n_orden="+txtNorden.getText().toString() +")"
                + " and e.fecha_examen<>'"+fecha1+"' and c.chk_sintomatico<>'true'  and n.cod_sede="+codvalor
            + "  order by n.n_orden desc limit 1;";
            System.out.println("la consulta es:"+Sql);

         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                           Fecha();
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          jTextField1.setText(oConn1.setResult.getString("fecha_examen"));
                        txtNorden.setEditable(false);
                     //   FechaHoy.requestFocusInWindow();
                        
                        sbCargarDatosEmpresa();
                         txtDiasDesc.requestFocus();
                       }else{
                                altasinAEV2();                    
                            }
                    oConn1.setResult.close();
                    oConn1.sqlStmt.close();
            } 
                catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());}
    }

    private void txtNordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNordenActionPerformed
        //activar(true);
        CargarSedes();
                valorSede(seded);
        Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        String fecha1=dateFormat.format(date); 
        
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
       if(!txtNorden.getText().isEmpty()){
        if(!OrdenExiste()){ 
            calcularTipoexamen();
            if(condicional.length()<1)
                    condicional="no";
               if(condicional.equals("AE"))
               {
       String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre, "
               + "d.fecha_nacimiento_pa,n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,e.fecha_examen "
                + "FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
               + "LEFT JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
               + "WHERE d.cod_pa =(select  cod_pa from n_orden_ocupacional where n_orden="+txtNorden.getText().toString() +")"
               + " and e.fecha_examen<>'"+fecha1+"' limit 1;";
         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                           Fecha();
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          jTextField1.setText(oConn1.setResult.getString("fecha_examen"));
                        txtNorden.setEditable(false);
                     //   FechaHoy.requestFocusInWindow();
                        
                        sbCargarDatosEmpresa();
                         txtDiasDesc.requestFocus();
                       }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios(Alta en Ex-Ocupacionales)");
                    }
                oConn1.setResult.close();
                oConn1.sqlStmt.close();
            } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());}
       
        }
        
               else {
               altaSinAE();
               }  
               
        }
        
        
           } 
    }//GEN-LAST:event_txtNordenActionPerformed
public void valorSede(String sede){
if(sede.equals("Trujillo"))
codvalor="1";
if(sede.equals("Huamachuco"))
codvalor="2";
if(sede.equals("Huancayo"))
codvalor="3";
if(sede.equals("Trujillo-Pierola"))
codvalor="4";

}
    public boolean OrdenExiste()
    {
        boolean bResultado=false;
        if(!txtNorden.getText().isEmpty()){
        String sQuery;

        sQuery  = "Select n_orden from constancia_alta_marsa1 Where n_orden ="+txtNorden.getText().toString();
        oConn1.FnBoolQueryExecute(sQuery);
        try {
            if (oConn1.setResult.next())
            {
                bResultado = true;
//             oFunc.SubSistemaMensajeError("Número de Orden Utilizado");
//             txtNorden.setText(null);
            }
            oConn1.setResult.close();
            oConn1.sqlStmt.close();
        } catch (SQLException ex) {
         
        }
        }       
        return bResultado;
        }
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
    limpiar();        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimpiarActionPerformed
private boolean Grabar() throws SQLException{
        boolean bResult = false;
              
       String strSqlStmt ="INSERT INTO constancia_alta_marsa1(\n" +
"            n_orden, fecha_examen, txtdias_desc, txtinstitucion, chkpositivo, \n" +
"            chknegativo, fecha_desde, fecha_hasta, txtdiagnostico)";       
            strSqlStmt+= "values ('"+ txtNorden.getText().toString()+"',"
                    + "'"+ FechaHoy.getDate()+"',"
                    + "'"+ txtDiasDesc.getText()+"',"
                    + "'"+ jComboBox1.getSelectedItem().toString()+"',"
                    + "'"+ chkPositivo.isSelected()+"',"
                    + "'"+ chkNegativo.isSelected()+"',"
                    + "'"+ FechaDesde1.getDate()+"',"
                    + "'"+ FechaHasta.getDate()+"',"
                    + "'"+txtDiagnostico.getText()+"' )";
           
             if (oConn1.FnBoolQueryExecuteUpdate(strSqlStmt)){
                
//                   oConn.setResult.next();
            
                   bResult = true;
                       oFunc.SubSistemaMensajeInformacion("Orden Registrada");
                       
               }
              
              oConn1.sqlStmt.close();
                return bResult;       
        }
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
if(chkPositivo.isSelected() ||chkNegativo.isSelected())    
{
        if(jCheckBox1.isSelected())
{   
        if(OrdenExiste()){  
            Actualizar();
         }else{
              if(!txtNorden.getText().isEmpty()){
            try {
              
                if(Grabar()){
                    imprimir();
                    limpiar();
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(ConstanciaAltaMarsa1.class.getName()).log(Level.SEVERE, null, ex);
            }
           }
         }
}
else 
     JOptionPane.showMessageDialog(null,"MARCAR -> 'VERIFICAR HISTORIAL PARA REGISTRAR O ACTUALIZAR'");
  }
else 
     JOptionPane.showMessageDialog(null,"DEBE DE MARCAR SI ES POSITIVO O NEGATIVO'");
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImpActionPerformed
        if(!txtimp.getText().isEmpty()){
             if(sed.contains("Huancayo"))
                 print12(Integer.valueOf(txtimp.getText().toString()));
             else
            print(Integer.valueOf(txtimp.getText().toString()));
        }
    }//GEN-LAST:event_btnImpActionPerformed

    private void txtNordenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNordenKeyTyped
       oFunc.NoLetras(evt);
    }//GEN-LAST:event_txtNordenKeyTyped

    private void txtimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtimpActionPerformed
        if(!txtimp.getText().isEmpty()){
            print(Integer.valueOf(txtimp.getText().toString()));
        }
    }//GEN-LAST:event_txtimpActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
          FechaNacimiento = new com.toedter.calendar.JDateChooser();
              CargarSedes();
                valorSede(seded);

        String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombre,d.fecha_nacimiento_pa, "
                + "n.razon_empresa,e.chkigm_reactivo, e.chkigm_noreactivo, \n" +
            "       e.chkigg_reactivo, e.chkigg_noreactivo, e.chkinvalido,c.fecha_examen,c.txtdias_desc, c.txtinstitucion,"
                + " c.chkpositivo,c.chknegativo, c.fecha_desde, c.fecha_hasta, c.txtdiagnostico,e.fecha_examen "
                + "FROM datos_paciente AS d "
                + "INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa) "
                + "LEFT JOIN examen_inmunologico AS e ON (n.n_orden = e.n_orden) "
                + "INNER JOIN constancia_alta_marsa1 AS c ON (c.n_orden = n.n_orden) "
                 + "INNER JOIN constancia_salud_marsa1 AS cs ON (cs.n_orden = n.n_orden) "
               + "WHERE n.n_orden ="+txtNorden.getText().toString() +" and cs.chk_sintomatico<>'true'"
                + " AND n.cod_sede="+codvalor;
                System.out.println("sql:"+Sql);

         oConn1.FnBoolQueryExecute(Sql);
                try {
                    if (oConn1.setResult.next()) {
                        txtNombre.setText(oConn1.setResult.getString("nombre"));
                        txtDNI.setText(oConn1.setResult.getString("cod_pa"));
                        FechaNacimiento.setDate(oConn1.setResult.getDate("fecha_nacimiento_pa"));
                      //  txtSexo.setText(oConn.setResult.getString("sexo_pa").equals("M")?"MASCULINO" : "FEMENINO");   
                        txtDiasDesc.setText(oConn1.setResult.getString("txtdias_desc"));
                        jComboBox1.setSelectedItem(oConn1.setResult.getString("txtinstitucion"));
                      //  txtInstitucion.setText(oConn.setResult.getString("txtinstitucion"));
                        chkIgmPositivo.setSelected(oConn1.setResult.getBoolean("chkigm_reactivo"));
                          chkIgmNegativo.setSelected(oConn1.setResult.getBoolean("chkigm_noreactivo"));
                          chkIggPositivo.setSelected(oConn1.setResult.getBoolean("chkigg_reactivo"));
                          chkIggNegativo.setSelected(oConn1.setResult.getBoolean("chkigg_noreactivo"));
                          chkInvalido.setSelected(oConn1.setResult.getBoolean("chkinvalido"));
                          chkPositivo.setSelected(oConn1.setResult.getBoolean("chkpositivo"));
                          chkNegativo.setSelected(oConn1.setResult.getBoolean("chknegativo"));
                          jTextField1.setText(oConn1.setResult.getString("fecha_examen"));
                           Fecha();
                           FechaHoy.setDate(oConn1.setResult.getDate("fecha_examen"));
                          FechaDesde1.setDate(oConn1.setResult.getDate("fecha_desde"));
                          FechaHasta.setDate(oConn1.setResult.getDate("fecha_hasta"));
                          txtDiagnostico.setText(oConn1.setResult.getString("txtdiagnostico")); 
                          sbCargarDatosEmpresa();
                         // FechaDesde.setDate(oConn.setResult.getDate("fecha_desde"));
                         // FechaHasta.setDate(oConn.setResult.getDate("fecha_hasta"));
                       //   txtDiagnostico.setText(oConn.setResult.getString("txtdiagnostico"));
                            //jTextField1.setText(oConn.setResult.getString("fecha_examen"));
                          calcularDias();
                          
                       }else{
                        oFunc.SubSistemaMensajeError("No se encuentra Algunos Registros necesarios");
                    }
                oConn1.setResult.close();
                oConn1.sqlStmt.close();
            } catch (SQLException ex) {
            oFunc.SubSistemaMensajeInformacion("Constancia:" + ex.getMessage().toString());
            }
    }//GEN-LAST:event_btnEditarActionPerformed

void fechaDesde() throws ParseException{
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//        oFunc.SubSistemaMensajeError(dateFormat.format(FechaDesde.getDate()));
        if(FechaDesde1.getDate()!=null){
	Date fechaInicial=dateFormat.parse(dateFormat.format(FechaDesde1.getDate()));
	Date fechaFinal=dateFormat.parse(dateFormat.format(FechaHasta.getDate()));
        int dias=(int)((fechaFinal.getTime()- fechaInicial.getTime())/86400000) +1;
        txtDiasDesc.setText(String.valueOf(dias));}
    }
public void calcularDias(){
        try {
            fechaDesde();
        } catch (ParseException ex) {
            Logger.getLogger(ConstanciaAltaMarsa1.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    private void chkIgmPositivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIgmPositivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkIgmPositivoActionPerformed

    private void chkIgmNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkIgmNegativoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkIgmNegativoActionPerformed

    private void txtInstitucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInstitucionActionPerformed
        // TODO add your handling code here:
        FechaDesde1.requestFocus();
    }//GEN-LAST:event_txtInstitucionActionPerformed

    private void txtDiagnosticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiagnosticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiagnosticoActionPerformed

    private void txtDiasDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiasDescActionPerformed
        // TODO add your handling code here:
//        fechaDesde();
        txtInstitucion.requestFocus();
    }//GEN-LAST:event_txtDiasDescActionPerformed

    private void chkPositivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPositivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkPositivoActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        cerrarVentana();
    }//GEN-LAST:event_formInternalFrameClosing
    private void print(Integer cod){
                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);             
                
                try 
                {
                        String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Alta_Marsa1.jasper";
                        JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                        JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
                        JasperViewer viewer = new JasperViewer(myPrint, false);
                        viewer.setTitle("CONSTANCIA SALUD MARSA");
                        // viewer.setAlwaysOnTop(true);
                        viewer.setVisible(true);
                   
                 } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
 
 }
      private void print12(Integer cod){
                Map parameters = new HashMap(); 
                parameters.put("Norden",cod);             
                
                try 
                {
                        String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Alta_Marsa3213.jasper";
                        JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                        JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
                        JasperViewer viewer = new JasperViewer(myPrint, false);
                        viewer.setTitle("CONSTANCIA SALUD MARSA");
                        // viewer.setAlwaysOnTop(true);
                        viewer.setVisible(true);
                   
                 } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
                 
 
 }
    private void Actualizar(){
        String sCodigo=txtNorden.getText();
        String strSqlStmt;
        strSqlStmt="UPDATE constancia_alta_marsa1\n" +
                    "   SET  fecha_actua='"+FechaHoy.getDate()+"',"
                +"txtdias_desc='"+txtDiasDesc.getText()+"',"
                +"txtinstitucion='"+jComboBox1.getSelectedItem().toString()+"',"
                +"chkpositivo='"+chkPositivo.isSelected()+"',"
                +"chknegativo='"+chkNegativo.isSelected()+"',"
                +"fecha_desde='"+FechaDesde1.getDate()+"',"
                +"fecha_hasta='"+FechaHasta.getDate()+"',"
                + "txtdiagnostico='"+txtDiagnostico.getText()+"'" +
                " WHERE n_orden='" + sCodigo + "'";
            
        //oFunc.SubSistemaMensajeInformacion(strSqlStmt);
        if (oConn1.FnBoolQueryExecuteUpdate(strSqlStmt)) {
            oFunc.SubSistemaMensajeInformacion("Se ha actualizado la Entrada con Éxito");
            imprimir();
            limpiar();
            
        } else {
            oFunc.SubSistemaMensajeError("No se pudo Agregar La Entrada");
        }
        
        try {
                oConn1.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(ConstanciaAltaMarsa1.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    private boolean imprimir(){
    boolean im = false;
int seleccion = JOptionPane.showOptionDialog(
    this, // Componente padre
    "¿Desea Imprimir?", //Mensaje
    "Seleccione una opción", // Título
    JOptionPane.YES_NO_CANCEL_OPTION,
    JOptionPane.QUESTION_MESSAGE,
    null,    // null para icono por defecto.
    new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
    "Si");
    if (seleccion != -1)
    {
   if((seleccion + 1)==1)
   {   
       
       if(sed.contains("Huancayo"))
                 printer12(Integer.valueOf(txtNorden.getText().toString()));
       else
      printer(Integer.valueOf(txtNorden.getText().toString()));
       im = true;
   }
   else
   {
      // PRESIONO NO
     }
    }
    return im;

}
   private void printer(Integer cod){
                 Map parameters = new HashMap(); 
                parameters.put("Norden",cod);      
                    try 
                {          
                    String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Alta_Marsa1.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
//                    JasperViewer viewer = new JasperViewer(myPrint, true);
                    JasperPrintManager.printReport(myPrint,true);
//                    viewer.setTitle("CONSTANCIA MÉDICA COVID 19");
                    // viewer.setAlwaysOnTop(true);
//                    viewer.setVisible(true);
                    
                   } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
   }
     private void printer12(Integer cod){
                 Map parameters = new HashMap(); 
                parameters.put("Norden",cod);      
                    try 
                {          
                    String direccionReporte = System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "Constancia_Alta_Marsa3213.jasper";
                    JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
                    JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
//                    JasperViewer viewer = new JasperViewer(myPrint, true);
                    JasperPrintManager.printReport(myPrint,true);
//                    viewer.setTitle("CONSTANCIA MÉDICA COVID 19");
                    // viewer.setAlwaysOnTop(true);
//                    viewer.setVisible(true);
                    
                   } catch (JRException ex) {
                    Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
                }
   } 
   final void sbCargarDatosEmpresa(){
        DefaultTableModel model;
    String [] titulos={"N ORDEN","FECHA","RESULTADOS"};
    String [] registros = new String[3];
    String sql="SELECT n.n_orden as orden, l.fecha_examen, reactivoono(n.n_orden) as RESULTADO \n" +
" FROM datos_paciente AS d  \n" +
"                   INNER JOIN n_orden_ocupacional AS n ON (d.cod_pa = n.cod_pa)  \n" +
"                  INNER JOIN examen_inmunologico AS l ON (n.n_orden = l.n_orden)  \n" +
"                  WHERE d.cod_pa =(select  cod_pa from n_orden_ocupacional where n_orden="+txtNorden.getText()+")";
      model = new DefaultTableModel(null,titulos);      
     
    if (oConn1.FnBoolQueryExecute(sql))
        {
             try  {
                
                while (oConn1.setResult.next())
                {
                    registros[0]= oConn1.setResult.getString("orden");
                    registros[1]= oConn1.setResult.getString("fecha_examen");
                    registros[2]= oConn1.setResult.getString("RESULTADO");
                     model.addRow(registros);
                }
                 
                  // Coloca el Modelo de Nueva Cuenta
                  jTable1.setModel(model);
                jTable1.getColumn("RESULTADOS").setPreferredWidth(200);
             
                 // Cierra Resultados
                 oConn1.setResult.close();
                 oConn1.sqlStmt.close();
            } 
            catch (SQLException ex) 
            {
                //JOptionPane.showMessageDialorootPane,ex);
                oFunc.SubSistemaMensajeError(ex.toString());
                Logger.getLogger(ConstanciaAltaMarsa1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}

    private void activar(boolean b){
    txtNombre.setEnabled(b);
    txtDNI.setEnabled(b);
   FechaHoy.setEnabled(true);
   // atxtDiagnostico.setEnabled(!b);
}
private void limpiar(){
    jCheckBox1.setSelected(false);
txtNombre.setText(null);
txtDNI.setText(null);
txtDiasDesc.setText("14");
btgSintoma.clearSelection();
//chkPositivo.setSelected(true);
//txtInstitucion.setText("nuestra institución");
FechaHoy.setDate(null);
FechaDesde1.setDate(null);
FechaHasta.setDate(null);
txtDiagnostico.setText("CLINICAMENTE SANO");
txtNorden.setText(null);
txtNorden.setEditable(true);
txtNorden.requestFocus();
}
void Fecha(){
Date fechaDate = new Date();
//SimpleDateFormat formateador = new SimpleDateFormat("'HUAMACHUCO - ' EEEEE dd MMMMM yyyy");
FechaHoy.setDate(fechaDate);
FechaHasta.setDate(fechaDate);
//Calendar hasta = Calendar.getInstance();
//        hasta.add(Calendar.DATE, -Integer.parseInt(txtDiasDesc.getText()));
//        FechaDesde.setCalendar(hasta);
}

public void cerrarVentana(){
        // JOptionPane.showMessageDialog(null, "probando para cerrar el stament");
        System.out.println("cerro esta ventana");
        try {
            if (oConn1.setResult != null) 
         
            oConn1.setResult.close();
         
            if ( oConn1.sqlStmt != null) 
             
                oConn1.sqlStmt .close();
             
            //if (oConn1.oConnection != null) 
             
              //  oConn1.oConnection.close();
        } catch (SQLException ex) {
            Logger.getLogger(ConstanciaAltaMarsa1.class.getName()).log(Level.SEVERE, null, ex);
        }
  
    this.dispose();
      //  System.exit(0);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaDesde1;
    private com.toedter.calendar.JDateChooser FechaHasta;
    private com.toedter.calendar.JDateChooser FechaHoy;
    private javax.swing.ButtonGroup btgSintoma;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImp;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JCheckBox chkIggNegativo;
    private javax.swing.JCheckBox chkIggPositivo;
    private javax.swing.JCheckBox chkIgmNegativo;
    private javax.swing.JCheckBox chkIgmPositivo;
    private javax.swing.JCheckBox chkInvalido;
    private javax.swing.JCheckBox chkNegativo;
    private javax.swing.JCheckBox chkPositivo;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtDiagnostico;
    private javax.swing.JTextField txtDiasDesc;
    private javax.swing.JTextField txtInstitucion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNorden;
    private javax.swing.JTextField txtimp;
    // End of variables declaration//GEN-END:variables
}
