/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema;

import Clases.clsConnection;
import Clases.clsFunciones;
import Clases.clsOperacionesUsuarios;
import autocomplete.ajTextField;
import autocomplete.ajTextFieldConsulta;
import com.toedter.calendar.JDateChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
/**
 *
 * @author admin
 */
public class InformeExamenMedicoAdeco extends javax.swing.JInternalFrame {
    clsConnection oConn = new clsConnection();
    clsFunciones  oFunc = new clsFunciones();
    clsOperacionesUsuarios oPe = new clsOperacionesUsuarios();
    DefaultTableModel model;
    Integer num= null;
   public InformeExamenMedicoAdeco() {
      initComponents();
//      CargarDiagnostico();
//      AutoCompleteDecorator.decorate(this.cboDiagnsoticos);
//      new ajTextField.autocompleterText(txtDiagnostico, "diagnostico", "diagnostico_cie10");
//      new ajTextFieldConsulta.autocompleterText(txtDiagnostico, "SELECT diagnostico FROM diagnostico_cie10 WHERE diagnostico");
      sbTabla();
   }
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmTicket = new javax.swing.JPopupMenu();
        btnEliminar = new javax.swing.JMenuItem();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txtPA = new javax.swing.JTextField();
        txtFC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        txtTalla = new javax.swing.JTextField();
        txtIMC = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        txtImprimir1 = new javax.swing.JTextField();
        btnImprimir6 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnLimpiar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNorden = new javax.swing.JTextField();
        txtNombres1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEdad = new javax.swing.JTextField();
        jLabel118 = new javax.swing.JLabel();
        FechaEx = new com.toedter.calendar.JDateChooser();
        btnEditar1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtEvaluacOftalmo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEvalPsicolo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtRadiografiaT = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtAudio = new javax.swing.JTextField();
        txtExpiro = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtHemoglobina = new javax.swing.JTextField();
        txtGlucosa = new javax.swing.JTextField();
        txtExamenOrina = new javax.swing.JTextField();
        txtColesterol = new javax.swing.JTextField();
        txtTrigliceridos = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbDiagnostico = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        txtCodCIE10 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRecomendaciones = new javax.swing.JTextArea();
        txtDiagnostico = new javax.swing.JTextField();
        btnLimpiar2 = new javax.swing.JButton();

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/xx.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        pmTicket.add(btnEliminar);

        setClosable(true);
        setTitle("INFORME");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("REGISTRO BASALES"));

        jLabel12.setText("P.A :");

        txtPA.setEditable(false);
        txtPA.setBackground(new java.awt.Color(233, 230, 230));

        txtFC.setEditable(false);
        txtFC.setBackground(new java.awt.Color(233, 230, 230));

        jLabel2.setText("F.C :");

        jLabel51.setText("Peso:");

        txtPeso.setEditable(false);
        txtPeso.setBackground(new java.awt.Color(233, 230, 230));

        jLabel53.setText("kg.");

        jLabel52.setText("Talla:");

        txtTalla.setEditable(false);
        txtTalla.setBackground(new java.awt.Color(233, 230, 230));

        txtIMC.setEditable(false);
        txtIMC.setBackground(new java.awt.Color(233, 230, 230));

        jLabel15.setText("IMC :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPA, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFC, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel53)
                .addGap(18, 18, 18)
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIMC, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(txtPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(txtFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(txtIMC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel52)
                        .addComponent(jLabel53))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel51)))
                .addGap(5, 5, 5))
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IMPRIMIR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        txtImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtImprimir1ActionPerformed(evt);
            }
        });

        btnImprimir6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/impresora.png"))); // NOI18N
        btnImprimir6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimir6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImprimir6)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtImprimir1)
            .addComponent(btnImprimir6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/entrar.png"))); // NOI18N
        jButton2.setText("Guardar/Actualizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnLimpiar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar1.setMnemonic('l');
        btnLimpiar1.setText("Limpiar");
        btnLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiar1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Nro Ficha:");

        jLabel10.setText("Nombres:");

        txtNorden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNordenActionPerformed(evt);
            }
        });

        jLabel11.setText("Edad: ");

        jLabel118.setText("Fecha :");

        FechaEx.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FechaExPropertyChange(evt);
            }
        });

        btnEditar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/configuracion.png"))); // NOI18N
        btnEditar1.setText("Editar");
        btnEditar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel118, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FechaEx, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtNombres1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(72, 72, 72))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNorden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel118)
                            .addComponent(btnEditar1))
                        .addComponent(FechaEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtNombres1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("EXAMENES AUXILIARES"));

        jLabel1.setText("Evaluación Oftalmológica :");

        txtEvaluacOftalmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEvaluacOftalmoActionPerformed(evt);
            }
        });

        jLabel4.setText("Evaluación Psicológica :");

        jLabel5.setText("Radiografia de Tórax :");

        jLabel14.setText("Evaluación audiometrica :");

        jLabel16.setText("Evaluación Espirometrica :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRadiografiaT, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtEvalPsicolo))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEvaluacOftalmo, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtExpiro, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtEvaluacOftalmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEvalPsicolo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtRadiografiaT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtExpiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("EXÁMENES DE LABORATORIO"));

        jLabel3.setText("Hemoglobina: ");

        jLabel6.setText("Glucosa : ");

        jLabel7.setText("Examen de Orina :");

        jLabel8.setText("Colesterol:");

        jLabel13.setText("Trigliceridos :");

        jCheckBox1.setText("NORMAL");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("ANORMAL");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtExamenOrina, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGlucosa, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHemoglobina, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(18, 18, 18)
                            .addComponent(txtColesterol, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtTrigliceridos, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 14, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtHemoglobina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtGlucosa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtExamenOrina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtColesterol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtTrigliceridos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        tbDiagnostico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbDiagnostico.setComponentPopupMenu(pmTicket);
        jScrollPane2.setViewportView(tbDiagnostico);

        jLabel27.setText("CIE10");

        txtCodCIE10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCIE10ActionPerformed(evt);
            }
        });

        jLabel26.setText("DIAGNOSTICO");

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/entrar.png"))); // NOI18N
        btnAgregar.setMnemonic('a');
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        txtRecomendaciones.setColumns(20);
        txtRecomendaciones.setRows(5);
        txtRecomendaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Recomendaciones:"));
        jScrollPane1.setViewportView(txtRecomendaciones);

        txtDiagnostico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiagnosticoActionPerformed(evt);
            }
        });

        btnLimpiar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        btnLimpiar2.setMnemonic('l');
        btnLimpiar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLimpiar1)
                                .addGap(36, 36, 36))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodCIE10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel27)
                                        .addComponent(txtCodCIE10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel26)
                                        .addComponent(txtDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(btnLimpiar2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar1)
                        .addGap(121, 121, 121))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNordenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNordenActionPerformed
        // TODO add your handling code here:
        JDateChooser FechaNacimiento = new com.toedter.calendar.JDateChooser();
        if(!txtNorden.getText().isEmpty()){
            if(!OrdenExiste()){
                String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombrecompleto,\n" +
"       d.sexo_pa, d.fecha_nacimiento_pa,\n" +
"       n.cargo_de, n.razon_contrata, n.razon_empresa,n.fecha_apertura_po, \n" +
"       t.f_cardiaca, t.sistolica, t.diastolica, t.f_respiratoria, \n" +
"       t.imc, t.sat_02,t.peso,t.talla,l.txthemoglobina, l.txtglucosabio,\n" +
"       r.txtconclusionesradiograficas, a.txtcolesterol,a.txttrigliseridos,\n" +
"       CASE WHEN i.aprobo_inf = 'TRUE' THEN 'APTO'ELSE 'NO APTO' END psicologia,o.e_oculares ,\n" +
"       od.txtobservaciones,el.hallazgo,au.diagnostico, e.interpretacion,"
                        + "case when  ama.txtrecomendaciones is not null then ama.txtrecomendaciones else am.txtrecomendaciones end as reco\n" +
"FROM datos_paciente as d\n" +
"INNER JOIN n_orden_ocupacional as n ON (d.cod_pa= n.cod_pa)\n" +
"INNER JOIN triaje as t ON (n.n_orden = t.n_orden) \n" +
"INNER JOIN lab_clinico as l ON (n.n_orden = l.n_orden) \n" +
"INNER JOIN radiografia_torax as r ON (n.n_orden = r.n_orden) \n" +
"INNER JOIN analisis_bioquimicos as a ON (n.n_orden = a.n_orden)\n" +
"INNER JOIN oftalmologia as o ON (n.n_orden = o.n_orden)\n" +
"INNER JOIN informe_psicologico as i ON (n.n_orden = i.n_orden)\n" +
"INNER JOIN odontograma as od ON (n.n_orden = od.n_orden)\n" +
"INNER JOIN audiometria_po as au ON (n.n_orden = au.n_orden)\n" +
"left JOIN certificado_aptitud_medico_ocupacional as am ON (n.n_orden = am.n_orden)\n" +
"INNER JOIN funcion_abs as e ON (n.n_orden = e.n_orden)\n" +
"left JOIN aptitud_medico_ocupacional_agro as ama ON (n.n_orden = ama.n_orden)\n" +
"LEFT JOIN informe_electrocardiograma as el ON (n.n_orden = el.n_orden)" +
                "where n.n_orden='"+txtNorden.getText() +"'";
                oConn.FnBoolQueryExecute(Sql);
                try {
                    if (oConn.setResult.next()) {
                        txtNombres1.setText(oConn.setResult.getString("nombrecompleto"));
                        FechaNacimiento.setDate(oConn.setResult.getDate("fecha_nacimiento_pa"));
                        txtEdad.setText(String.valueOf(oFunc.calcularEdad(FechaNacimiento.getCalendar())) +" AÑOS" );
                        oPe.fecha(FechaEx);
                        String sistolica=oConn.setResult.getString("sistolica");
                        String diastolica=oConn.setResult.getString("diastolica");
                        txtPA.setText(sistolica.concat("/").concat(diastolica));
                        txtFC.setText(oConn.setResult.getString("f_respiratoria"));
                        txtIMC.setText(oConn.setResult.getString("imc"));  
                        txtPeso.setText(oConn.setResult.getString("peso"));
                        txtTalla.setText(oConn.setResult.getString("talla"));
                        txtEvalPsicolo.setText(oConn.setResult.getString("psicologia"));
                        txtEvaluacOftalmo.setText(oConn.setResult.getString("e_oculares"));
                        txtRadiografiaT.setText(oConn.setResult.getString("txtconclusionesradiograficas"));
                        txtAudio.setText(oConn.setResult.getString("diagnostico"));
                        txtExpiro.setText(oConn.setResult.getString("interpretacion"));
                        txtHemoglobina.setText(oConn.setResult.getString("txthemoglobina"));
                        txtGlucosa.setText(oConn.setResult.getString("txtglucosabio"));
                        txtExamenOrina.setText("-");
                        txtColesterol.setText(oConn.setResult.getString("txtcolesterol"));
                        txtTrigliceridos.setText(oConn.setResult.getString("txttrigliseridos"));
                        txtEdad.setText(String.valueOf(oFunc.calcularEdad(FechaNacimiento.getCalendar())) );
                        txtRecomendaciones.setText(oConn.setResult.getString("reco"));
                        //   oPe.fecha(FechaHotel);
                    }else{
                        oFunc.SubSistemaMensajeError("No se encuentra registrado");
                    }
                    oConn.setResult.close();
                } catch (SQLException ex) {
                    oFunc.SubSistemaMensajeInformacion("toxicologia:" + ex.getMessage().toString());}
            }else{
                oFunc.SubSistemaMensajeError("N° orden regitrado");
            }
        }
    }//GEN-LAST:event_txtNordenActionPerformed

    private void FechaExPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FechaExPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_FechaExPropertyChange

    private void btnLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiar1ActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnLimpiar1ActionPerformed

    private void txtImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtImprimir1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtImprimir1ActionPerformed

    private void btnImprimir6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimir6ActionPerformed
        // TODO add your handling code here:
        print (Integer.parseInt(txtImprimir1.getText()));
    }//GEN-LAST:event_btnImprimir6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(OrdenExiste() ){
            Actualizar();
        }else{
            insertarRegistros();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    public void insertarRegistros(){
       boolean bCommit = false;
        if (validar()) {
            // Inicia la transacción colocando el commit a false
            oConn.SubAutoCommit(false);
            // Intenta ejecutar cada uno de los procesos
            if (oInformeDetalle()) {
                if (oInformeContenido()) {
                    bCommit = true;
                }
            }
            // Verifica si debe hacer commit
            if (bCommit) {
                // Realiza la confirmación de la transaccion
                oConn.SubCommit();
                imprimir();
                limpiar();
            } else {
                oConn.SubRollBack();
            }
        }
   }
    private void btnEditar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditar1ActionPerformed
        // TODO add your handling code here:
        JDateChooser FechaNacimiento = new com.toedter.calendar.JDateChooser();
        if(!txtNorden.getText().isEmpty()){
            String Sql="SELECT d.cod_pa, d.nombres_pa||' '||d.apellidos_pa as nombrecompleto,\n" +
"       d.sexo_pa, d.fecha_nacimiento_pa,\n" +
"       n.cargo_de, n.razon_contrata, n.razon_empresa,n.fecha_apertura_po, \n" +
"       t.f_cardiaca, t.sistolica, t.diastolica, t.f_respiratoria, \n" +
"       t.imc, t.sat_02,t.peso,t.talla,l.txthemoglobina, l.txtglucosabio,\n" +
"       r.txtconclusionesradiograficas, a.txtcolesterol,a.txttrigliseridos,\n" +
"       CASE WHEN i.aprobo_inf = 'TRUE' THEN 'APTO'ELSE 'NO APTO' END psicologia,o.e_oculares ,\n" +
"       od.txtobservaciones,el.hallazgo,au.diagnostico, e.interpretacion, ia.exa_orina, ia. recomendaciones\n" +
"FROM datos_paciente as d\n" +
"INNER JOIN n_orden_ocupacional as n ON (d.cod_pa= n.cod_pa)\n" +
"INNER JOIN triaje as t ON (n.n_orden = t.n_orden) \n" +
"INNER JOIN lab_clinico as l ON (n.n_orden = l.n_orden) \n" +
"INNER JOIN radiografia_torax as r ON (n.n_orden = r.n_orden) \n" +
"INNER JOIN analisis_bioquimicos as a ON (n.n_orden = a.n_orden)\n" +
"INNER JOIN oftalmologia as o ON (n.n_orden = o.n_orden)\n" +
"INNER JOIN informe_psicologico as i ON (n.n_orden = i.n_orden)\n" +
"INNER JOIN odontograma as od ON (n.n_orden = od.n_orden)\n" +
"INNER JOIN audiometria_po as au ON (n.n_orden = au.n_orden)\n" +
"INNER JOIN funcion_abs as e ON (n.n_orden = e.n_orden)\n" +
"INNER JOIN informe_electrocardiograma as el ON (n.n_orden = el.n_orden)\n" +
"INNER JOIN informe_adeco as ia ON (n.n_orden = ia.n_orden)\n" +
                "where ia.n_orden="+txtNorden.getText()+";";
            oConn.FnBoolQueryExecute(Sql);
            System.out.println(Sql);
            try {
                if (oConn.setResult.next()) {
                    txtNombres1.setText(oConn.setResult.getString("nombrecompleto"));
                    FechaNacimiento.setDate(oConn.setResult.getDate("fecha_nacimiento_pa"));
                    txtEdad.setText(String.valueOf(oFunc.calcularEdad(FechaNacimiento.getCalendar()))+" AÑOS" );
                    oPe.fecha(FechaEx);
                    String sistolica=oConn.setResult.getString("sistolica");
                    String diastolica=oConn.setResult.getString("diastolica");
                    txtPA.setText(sistolica.concat("/").concat(diastolica));
                    txtFC.setText(oConn.setResult.getString("f_respiratoria"));
                    txtIMC.setText(oConn.setResult.getString("imc"));  
                    txtPeso.setText(oConn.setResult.getString("peso"));
                    txtTalla.setText(oConn.setResult.getString("talla"));
                    txtEvalPsicolo.setText(oConn.setResult.getString("psicologia"));
                    txtEvaluacOftalmo.setText(oConn.setResult.getString("e_oculares"));
                    txtRadiografiaT.setText(oConn.setResult.getString("txtconclusionesradiograficas"));
                    txtHemoglobina.setText(oConn.setResult.getString("txthemoglobina"));
                    txtGlucosa.setText(oConn.setResult.getString("txtglucosabio"));
                    txtExamenOrina.setText(oConn.setResult.getString("exa_orina"));
                    txtColesterol.setText(oConn.setResult.getString("txtcolesterol"));
                    txtTrigliceridos.setText(oConn.setResult.getString("txttrigliseridos"));
                    txtEdad.setText(String.valueOf(oFunc.calcularEdad(FechaNacimiento.getCalendar())) );
                    txtRecomendaciones.setText(oConn.setResult.getString("recomendaciones"));
                    ActualizarContenido();
                }else{
                    oFunc.SubSistemaMensajeError("N° orden no registrado");
                }
                oConn.setResult.close();
            } catch (SQLException ex) {
                oFunc.SubSistemaMensajeInformacion("Ficha :" + ex.getMessage().toString());}
        }
    }//GEN-LAST:event_btnEditar1ActionPerformed

    private void txtEvaluacOftalmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEvaluacOftalmoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEvaluacOftalmoActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        sbAgrega1();
        
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int iRow;
        if(tbDiagnostico.getSelectedRow()>= 0){
            if(tbDiagnostico.getRowCount()>1){
                iRow = tbDiagnostico.getSelectedRow();
                DefaultTableModel tblDatos = (DefaultTableModel) tbDiagnostico.getModel();
                tblDatos.removeRow(iRow);
                tbDiagnostico.setModel(tblDatos);
            }
        }else{
            oFunc.SubSistemaMensajeError("Seleccione un Item");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        txtExamenOrina.setText("NORMAL");
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        txtExamenOrina.setText("ANORMAL");
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void txtDiagnosticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiagnosticoActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtDiagnosticoActionPerformed

    private void btnLimpiar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiar2ActionPerformed
        // TODO add your handling code here:
        txtCodCIE10.setText("");
        txtDiagnostico.setText("");
        txtCodCIE10.requestFocus();
    }//GEN-LAST:event_btnLimpiar2ActionPerformed

    private void txtCodCIE10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCIE10ActionPerformed
        // TODO add your handling code here:
         pServicios();
    }//GEN-LAST:event_txtCodCIE10ActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser FechaEx;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEditar1;
    private javax.swing.JMenuItem btnEliminar;
    private javax.swing.JButton btnImprimir6;
    private javax.swing.JButton btnLimpiar1;
    private javax.swing.JButton btnLimpiar2;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu pmTicket;
    private javax.swing.JTable tbDiagnostico;
    private javax.swing.JTextField txtAudio;
    private javax.swing.JTextField txtCodCIE10;
    private javax.swing.JTextField txtColesterol;
    private javax.swing.JTextField txtDiagnostico;
    private javax.swing.JTextField txtEdad;
    private javax.swing.JTextField txtEvalPsicolo;
    private javax.swing.JTextField txtEvaluacOftalmo;
    private javax.swing.JTextField txtExamenOrina;
    private javax.swing.JTextField txtExpiro;
    private javax.swing.JTextField txtFC;
    private javax.swing.JTextField txtGlucosa;
    private javax.swing.JTextField txtHemoglobina;
    private javax.swing.JTextField txtIMC;
    private javax.swing.JTextField txtImprimir1;
    private javax.swing.JTextField txtNombres1;
    private javax.swing.JTextField txtNorden;
    private javax.swing.JTextField txtPA;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtRadiografiaT;
    private javax.swing.JTextArea txtRecomendaciones;
    private javax.swing.JTextField txtTalla;
    private javax.swing.JTextField txtTrigliceridos;
    // End of variables declaration//GEN-END:variables
    
    public boolean OrdenExiste(){
        boolean bResultado=false;
         if (!txtNorden.getText().isEmpty()) {
             String sQuery;
             sQuery = "Select n_orden from informe_adeco where n_orden=" + txtNorden.getText().toString();
             oConn.FnBoolQueryExecute(sQuery);
             try {
                 if (oConn.setResult.next()) {
                     bResultado = true;
                 }
                 oConn.setResult.close();
             } catch (SQLException ex) {
             }
         }      
        return bResultado;
     }
     private boolean validar() {
        boolean bResultado = true;

        if (((JTextField) FechaEx.getDateEditor().getUiComponent()).getText().trim().length() < 2) {
            oFunc.SubSistemaMensajeError("Ingrese Fecha ");
            bResultado = false;
        }

        return bResultado;
    }
    private boolean oInformeDetalle() {
        // Para los resultados
        boolean bResult = false;
        // Para la sentencia Sql
        String insert;
        String values;
        try{
        // Query para actualizar el Folio
        insert = "INSERT INTO informe_adeco(\n" +
"            n_orden, fecha_examen,exa_orina, recomendaciones)";
        values = "VALUES ('" + txtNorden.getText() + "','" + FechaEx.getDate()+ "','"+ txtExamenOrina.getText()+ "','"
                       + txtRecomendaciones.getText() + "') RETURNING cod";
//        oFunc.SubSistemaMensajeError(insert+values);
            if (oConn.FnBoolQueryExecute(insert + values)) {
                bResult = true;
                 oConn.setResult.next();
                 num = Integer.valueOf(oConn.setResult.getString("cod"));
            }
            oConn.sqlStmt.close();
        }catch(SQLException ex){
            Logger.getLogger(InformeExamenMedicoAdeco.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Retorna el Valor
        return bResult;
    }

    private boolean oInformeContenido() {
        // Para los resultados
        boolean bResult = false;
        // Variable para las filas de la Tabla de Productos
        int iFila;
        // Variables para los diferentes datos
        String sCodigo, sDescripcion;
        // Para la sentencia Sql
        String strSqlStmt; // Para el Query
        // Ciclo para grabar el detalle de la venta
        try {
            for (iFila = 0; iFila < tbDiagnostico.getRowCount(); iFila++) {
                //Obtiene dato contenido en una celda de la tabla
                sCodigo = tbDiagnostico.getModel().getValueAt(iFila, 0).toString();
                sDescripcion = tbDiagnostico.getModel().getValueAt(iFila, 1).toString();
                // Prepara Query para grabar venta detalle
                strSqlStmt = " INSERT INTO informe_adeco_diagnostico(\n" +
"             cod_cie, diagnostico,n_orden)" ;
                strSqlStmt = strSqlStmt + " Values (";
//                    oFunc.SubSistemaMensajeError(String.valueOf(num));
                strSqlStmt +=  "'" + sCodigo + "'";
                strSqlStmt +=  ",'" + sDescripcion + "'";
                strSqlStmt +=  ",'" + txtNorden.getText()  + "')";
                // Ejecuta la Sentencia
//            oFunc.SubSistemaMensajeError(strSqlStmt);
                if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt)) {
                    bResult = true;
                }
            }
            // break;
            oConn.sqlStmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(InformeExamenMedicoAdeco.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bResult;
    }
    private void pServicios(){
      if(!txtCodCIE10.getText().isEmpty()){
               String Consulta;
//             Consulta = "SELECT cod FROM diagnostico_cie10 WHERE diagnostico  ='"+cboDiagnsoticos.getSelectedItem().toString()+"' limit 1";         
               Consulta = "SELECT diagnostico FROM diagnostico_cie10 WHERE cod='"+txtCodCIE10.getText().toString()+"' limit 1";   
               oConn.FnBoolQueryExecute(Consulta);
               try {
                 if (oConn.setResult.next()){       
                         txtDiagnostico.setText(oConn.setResult.getString("diagnostico"));       
                 }
                 oConn.setResult.close();
                 oConn.sqlStmt.close();
                 } catch (SQLException ex) 
                {
                    //JOptionPane.showMessageDialorootPane,ex);
                    oFunc.SubSistemaMensajeError(ex.toString());
                    Logger.getLogger(InformeExamenMedicoAdeco.class.getName()).log(Level.SEVERE, null, ex);
                }
           }
 } 
//    public void sbAgrega() {        // Variable para el modelo de la tabla
//        DefaultTableModel tblDatos = (DefaultTableModel) tbDiagnostico.getModel();
//        // Prepara los datos vacios iniciales
//        Object[] oFila = new Object[2];
//        // Para el Query
//        String sQuery;
//        // Valida que haya algo en el Codigo
//        if (cboDiagnsoticos.getSelectedIndex() >= 0) {
//            // Prepara el Query
//            sQuery = "select cod,diagnostico from diagnostico_cie10 where diagnostico ='" + cboDiagnsoticos.getSelectedItem().toString()+ "'";
//            //Ejecuta el Query
//            oConn.FnBoolQueryExecute(sQuery);
//            System.out.println(sQuery);
//            // Capturo el Error
//            try {
//                if (oConn.setResult.next()) {
//                    oFila[0] = oConn.setResult.getString("cod");
//                    oFila[1] = oConn.setResult.getString("diagnostico");
//                    tblDatos.insertRow(0, oFila);
//                    tbDiagnostico.setModel(tblDatos);
//                } else {
//                    oFunc.SubSistemaMensajeError("No se agrego correctamente");
//                }
//                // Cierro los Resultados
//                oConn.setResult.close();
//                oConn.sqlStmt.close();
//            } catch (SQLException ex) {
//                oFunc.SubSistemaMensajeError(":" + ex.getMessage().toString());
//            }
//        }
//    }
     public void sbAgrega1() {        // Variable para el modelo de la tabla
        DefaultTableModel tblDatos = (DefaultTableModel) tbDiagnostico.getModel();
        // Prepara los datos vacios iniciales
              // Prepara los datos vacios iniciales
        String [] oFila = new String[2];
        // Para el Query
        String sQuery;
        // Valida que haya algo en el Codigo
       if (!txtCodCIE10.getText().trim().isEmpty()) {
            oFila[0] = txtCodCIE10.getText().toString();
            oFila[1] = txtDiagnostico.getText().toString();
            tblDatos.insertRow(0, oFila);
            tbDiagnostico.setModel(tblDatos);
       }
    }
//    private void CargarDiagnostico() {
//        try {
//            String Consulta;
//            Consulta = "select diagnostico from diagnostico_cie10 ";
//            if (oConn.FnBoolQueryExecute(Consulta)) {
//                try {
//                    while (oConn.setResult.next()) {
//                        cboDiagnsoticos.addItem(oConn.setResult.getString("diagnostico"));
//                    }
//                    oConn.setResult.close();
//                } catch (SQLException ex) {
//                    //JOptionPane.showMessageDialorootPane,ex);
//                    oFunc.SubSistemaMensajeError(ex.toString());
//                    Logger.getLogger(InformeExamenMedicoAdeco.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//            oConn.setResult.close();
//            oConn.sqlStmt.close();
//        } catch (SQLException ex) {
//            Logger.getLogger(InformeExamenMedicoAdeco.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    private void sbTabla() {
        // Declaro un modelo de datos
        model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 1) {
                    return true;
                } else {
                    return false;
                }
            }
        };
       
        // Añadimos columnas al modelo de datos
        model.addColumn("Cod");
        model.addColumn("Diagnostico");
        // Coloca el Modelo en la Tabla
        tbDiagnostico.setModel(model);
        // Directamente
        tbDiagnostico.getColumnModel().getColumn(0).setPreferredWidth(5);
        tbDiagnostico.getColumnModel().getColumn(1).setPreferredWidth(5);
        tbDiagnostico.getTableHeader().setReorderingAllowed(false);
        tbDiagnostico.getTableHeader().setResizingAllowed(false);
        // tbBoleta.setFont(new java.awt.Font("Lucida Sans", 0, 12)); 
        // Alinear a la derecha las cantidades y precios
        DefaultTableCellRenderer cellAlinear = new DefaultTableCellRenderer();
        // Asignamos el Alineamiento Horizontal a la derecha
        cellAlinear.setHorizontalAlignment(SwingConstants.CENTER);
        // Asignamos la Variable de celda de alineamiento a cada una de las columnas a alinear
        tbDiagnostico.getColumnModel().getColumn(0).setCellRenderer(cellAlinear);
        tbDiagnostico.getColumnModel().getColumn(1).setCellRenderer(cellAlinear);
    }
    public void limpiar() {
        txtNorden.setText("");
        txtNombres1.setText("");
        txtEdad.setText("");
        FechaEx.setDate(null);
        txtFC.setText("");
        txtPA.setText("");
        txtPeso.setText("");
        txtTalla.setText("");
        txtIMC.setText("");
        txtEvaluacOftalmo.setText("");
        txtEvalPsicolo.setText("");
        txtRadiografiaT.setText("");
        txtHemoglobina.setText("");
        txtGlucosa.setText("");
        txtExamenOrina.setText("");
        txtColesterol.setText("");
        txtTrigliceridos.setText("");
        txtRecomendaciones.setText("");
//        cboDiagnsoticos.setSelectedIndex(-1);
        txtCodCIE10.setText("");
        txtDiagnostico.setText("");
        sbTabla();
    }
     private boolean imprimir(){
        boolean im = false;
        int seleccion = JOptionPane.showOptionDialog(
            this, // Componente padre
            "¿Desea Imprimir?", //Mensaje
            "Seleccione una opción", // Título
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,    // null para icono por defecto.
            new Object[] { "Si", "No"},    // null para YES, NO y CANCEL
            "Si");
            if (seleccion != -1)
            {
           if((seleccion + 1)==1)
           {
              printer(Integer.valueOf(txtNorden.getText().toString()));
               im = true;
           }
           else
           {
              // PRESIONO NO
             }
            }
            return im;
        }
    private void printer(Integer cod) {
        Map parameters = new HashMap();
        parameters.put("Norden", cod);
        String direccionReporte;
        try {
            direccionReporte= System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "InformeMedicoAdeco.jasper";
            JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
            JasperPrint jasperPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
            JasperPrintManager.printReport(jasperPrint, true);
        } catch (JRException ex) {
            Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void print(Integer cod) {
        Map parameters = new HashMap();
        parameters.put("Norden", cod);
        String direccionReporte;
        try {
            direccionReporte= System.getProperty("user.dir") + File.separator + "reportes" + File.separator + "InformeMedicoAdeco.jasper";          
            JasperReport myReport = (JasperReport) JRLoader.loadObjectFromFile(direccionReporte);
            JasperPrint myPrint = JasperFillManager.fillReport(myReport, parameters, clsConnection.oConnection);
            JasperViewer viewer = new JasperViewer(myPrint, false);
            viewer.setTitle("FORMATO ");
            // viewer.setAlwaysOnTop(true);
            viewer.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Odontograma.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void Actualizar(){
     if(!txtNorden.getText().isEmpty()){
                 if(validar()){ 
                     if(oInformeContenido()){
//                         if(tbDiagnostico.getRowCount()>0 ){
                             if(ActualizarDetalle()){
                                 imprimir();
                                 limpiar();
                                 oFunc.SubSistemaMensajeInformacion("Se Actualizo Correctamente C");
                             }
//                         }else{
//                             imprimir();
//                             limpiar();
//                             oFunc.SubSistemaMensajeInformacion("Se Actualizo Correctamente");
//                         }                         
                     }
                     imprimir();
                     limpiar();
                 }     
         }
}
     public boolean ActualizarDetalle() {
         boolean bResult = false;
        String sCodigo = txtNorden.getText();
        String strSqlStmt;
        strSqlStmt = "UPDATE informe_adeco \n" 
                + "   SET fecha_examen='" + FechaEx.getDate() + "',"
                + "        exa_orina='" + txtExamenOrina.getText() + "',"
                + "       recomendaciones='" + txtRecomendaciones.getText() + "'"
                + "   WHERE n_orden=" + sCodigo + ";";
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt)){
            
            oFunc.SubSistemaMensajeInformacion("Se ha actualizado la Entrada con Éxito");
            
            try {
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(InformePsicolaboral.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            oFunc.SubSistemaMensajeError("No se pudo Agregar La Entrada");
        }
          return bResult;   
    }
    public void ActualizarContenido() {
        String sCodigo = txtNorden.getText();
        String strSqlStmt;
        strSqlStmt = "DELETE FROM informe_adeco_diagnostico\n" 
                + "   WHERE n_orden=" + sCodigo + ";";
        //  System.out.println(strSqlStmt);
        //oFunc.SubSistemaMensajeInformacion(strSqlStmt);
        if (oConn.FnBoolQueryExecuteUpdate(strSqlStmt)){
            try {
                oConn.sqlStmt.close();
            } catch (SQLException ex) {
                Logger.getLogger(InformePsicolaboral.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            oFunc.SubSistemaMensajeError("No se pudo eliminar contenido");
        }
    } 
   
  
}
